{"version":3,"file":"static/js/330.c1bd9063.chunk.js","mappings":"0NASaA,EAAQ,W,8CACX,KAAAC,MAAgB,EAChB,KAAAC,wBAAoC,kBAAM,M,6BAKC,E,iBAKd,G,kBAKC,E,gBAKF,E,eAKD,O,eAKA,Y,+CAUO,UA1CvB,gDA6CZ,WACLC,KAAKC,UA9CY,sCAkDZ,WACLD,KAAKE,+BAnDY,+BAsDZ,WACLF,KAAKE,6BACLF,KAAKC,UAxDY,mBA2DX,WACND,KAAKG,wBAA0BH,KAAKI,cAAgBJ,KAAKK,cA5DxC,sBA+DX,WACN,IAAMC,EAAaN,KAAKO,WAAaP,KAAKG,wBAGtCG,GAAc,IAIdA,EAAaN,KAAKK,YACpBL,KAAKG,yBAA2BH,KAAKK,YAErCL,KAAKG,yBAA2BG,EAGlCN,KAAKD,wBAAwBC,KAAKG,4BA7EjB,wCAgFX,WACNH,KAAKD,yBAA0BS,EAAAA,EAAAA,GAAcR,KAAKS,qBAjFjC,oBAoFZ,WAAM,WACX,OACEC,EAAAA,EAAAA,GAAAA,MAAAA,CAAKC,MAAM,cACTD,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,MAAM,SACTX,KAAKF,MAAK,WAAKE,KAAKG,wBAAuB,IAAGH,KAAKY,UAAW,IAC9DZ,KAAKO,aAGRG,EAAAA,EAAAA,GAAAA,aAAAA,CACEG,MAAOb,KAAKc,UACZC,MAAOf,KAAKgB,YACZC,QAAS,kBAAM,EAAKC,kBA/FT,gC,4FAAA,K,QCTD","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/show-more/show-more.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/show-more/show-more.scss?tag=sdx-show-more&encapsulation=shadow"],"sourcesContent":["import { Component, h, Prop, State, Watch } from \"@stencil/core\"\nimport { parseFunction } from \"../../core/helpers/webcomponent-helpers\"\nimport { ButtonTheme } from \"../../core/types/types\"\n\n@Component({\n  tag: \"sdx-show-more\",\n  styleUrl: \"show-more.scss\",\n  shadow: true,\n})\nexport class ShowMore {\n  private start: number = 1\n  private invokeIncrementCallback: Function = () => null\n\n  /**\n   * How many items are currently shown (counter).\n   */\n  @State() private currentlyDisplayedItems: number = 0\n\n  /**\n   * How many items to add by each turn.\n   */\n  @Prop() public incrementBy: number = 10\n\n  /**\n   * Number of items to start from.\n   */\n  @Prop() public initialItems: number = 0\n\n  /**\n   * Number of all items in total.\n   */\n  @Prop() public totalItems: number = 0\n\n  /**\n   * Label for \"from\".\n   */\n  @Prop() public fromLabel: string = \"from\"\n\n  /**\n   * Label for \"more\".\n   */\n  @Prop() public moreLabel: string = \"Show more\"\n\n  /**\n   * Triggered when the number of displayed items has incremented.\n   */\n  @Prop() public incrementCallback?: ((count: number) => void) | string\n\n  /**\n   * Button theme.\n   */\n  @Prop() public buttonTheme: ButtonTheme = \"primary\"\n\n  @Watch(\"totalItems\")\n  public totalItemsChanged() {\n    this.reset()\n  }\n\n  @Watch(\"incrementCallback\")\n  public incrementCallbackChanged() {\n    this.setInvokeIncrementCallback()\n  }\n\n  public componentWillLoad() {\n    this.setInvokeIncrementCallback()\n    this.reset()\n  }\n\n  private reset(): void {\n    this.currentlyDisplayedItems = this.initialItems || this.incrementBy\n  }\n\n  private showMore(): void {\n    const deltaToMax = this.totalItems - this.currentlyDisplayedItems\n\n    // Reached total items\n    if (deltaToMax <= 0) {\n      return\n    }\n\n    if (deltaToMax > this.incrementBy) {\n      this.currentlyDisplayedItems += this.incrementBy\n    } else {\n      this.currentlyDisplayedItems += deltaToMax\n    }\n\n    this.invokeIncrementCallback(this.currentlyDisplayedItems)\n  }\n\n  private setInvokeIncrementCallback(): void {\n    this.invokeIncrementCallback = parseFunction(this.incrementCallback)\n  }\n\n  public render() {\n    return (\n      <div class=\"component\">\n        <span class=\"count\">\n          {this.start} â€“ {this.currentlyDisplayedItems} {this.fromLabel}{\" \"}\n          {this.totalItems}\n        </span>\n\n        <sdx-button\n          label={this.moreLabel}\n          theme={this.buttonTheme}\n          onClick={() => this.showMore()}\n        />\n      </div>\n    )\n  }\n}\n",".component {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .count {\n    margin-right: $baseline-3;\n  }\n\n  @include bp-desktop-max {\n    flex-flow: column;\n\n    .count {\n      margin-bottom: $baseline;\n      margin-right: 0;\n    }\n  }\n}\n"],"names":["ShowMore","start","invokeIncrementCallback","this","reset","setInvokeIncrementCallback","currentlyDisplayedItems","initialItems","incrementBy","deltaToMax","totalItems","parseFunction","incrementCallback","h","class","fromLabel","label","moreLabel","theme","buttonTheme","onClick","showMore"],"sourceRoot":""}