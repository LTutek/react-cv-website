{"version":3,"file":"static/js/997.060b9983.chunk.js","mappings":"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","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/numeric-stepper/numeric-stepper.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/numeric-stepper/numeric-stepper.scss?tag=sdx-numeric-stepper&encapsulation=shadow"],"sourcesContent":["import { Component, h, Element, Prop, State, Watch } from \"@stencil/core\"\nimport {\n  dispatchEvent,\n  parseFunction,\n  getAppearance,\n} from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-numeric-stepper\",\n  styleUrl: \"numeric-stepper.scss\",\n  shadow: true,\n})\nexport class NumericStepper {\n  private sdxInputEl?: HTMLSdxInputElement\n  private invokeChangeCallback: Function = () => null\n  private srHintValue = \"\"\n  private decreaseDisabled = true\n  private increaseDisabled = true\n\n  /**\n   * Emitted whenever increase or decrease button is pressed or value of input field changes.\n   * @event\n   */\n  private static eventInput = \"input\"\n\n  @Element() public el!: HTMLSdxNumericStepperElement\n\n  /**\n   * Text that will be written on the top of the numeric stepper. Make sure to include the maximum possible value here\n   * for the user.\n   */\n  @Prop({ reflect: true }) public label?: string\n\n  /**\n   * Text for the screen reader describing the numeric stepper.\n   */\n  @Prop() public srHint: string = \"\"\n\n  /**\n   * Minimum value. Cannot be negative.\n   */\n  @Prop() public min: number = 1\n\n  /**\n   * Maximum value. Cannot be set greater than 999.\n   */\n  @Prop() public max: number = 999\n\n  /**\n   * Must be between 0 and 999 including.\n   */\n  @Prop({ mutable: true }) public value: number | undefined = this.min\n\n  /**\n   * Callback that will fire on change.\n   * @deprecated use input event instead.\n   */\n  @Prop() public changeCallback?: ((value: string) => void) | string\n\n  /**\n   * Set this to false to declare the component as invalid and use the\n   * `validation-message` attribute to explain why.\n   */\n  @Prop() public valid?: boolean\n\n  /**\n   * Text that explains the validation status to the user.\n   */\n  @Prop() public validationMessage?: string\n\n  /**\n   * Disabled and not focusable using tab.\n   */\n  @Prop() public disabled: boolean = false\n\n  @State() private inputElValue?: string // will be set in constructor()\n\n  @Watch(\"changeCallback\")\n  public changeCallbackChanged() {\n    this.setInvokeChangeCallback()\n  }\n\n  @Watch(\"value\")\n  @Watch(\"min\")\n  @Watch(\"max\")\n  public valueChanged() {\n    this.setValue(this.value)\n  }\n\n  constructor() {\n    this.setValue(this.value)\n    this.setInvokeChangeCallback()\n    this.srHintValue = `${this.label} ${this.srHint}`\n  }\n\n  private setInvokeChangeCallback(): void {\n    this.invokeChangeCallback = parseFunction(this.changeCallback)\n  }\n\n  private decrease() {\n    if (this.value !== undefined) {\n      this.setValue(this.value - 1, true)\n      this.el.blur()\n    }\n  }\n\n  private increase() {\n    if (this.value !== undefined) {\n      this.setValue(this.value + 1, true)\n      this.el.blur()\n    }\n  }\n\n  private setValue(\n    value: string | number | undefined,\n    internalChange: boolean = false\n  ) {\n    const prevValue = this.value\n    let valueAsNumber: number | undefined\n\n    if (typeof value === \"string\") {\n      const parsedValue = parseFloat(value)\n      valueAsNumber = isNaN(parsedValue) ? undefined : parsedValue\n    } else {\n      valueAsNumber = value\n    }\n\n    // Set new value within range\n    if (valueAsNumber !== undefined && valueAsNumber > this.max) {\n      this.value = this.max\n    } else if (valueAsNumber !== undefined && valueAsNumber < this.min) {\n      this.value = this.min\n    } else {\n      this.value = valueAsNumber\n    }\n\n    // Sync input field\n    this.inputElValue = JSON.stringify(this.value)\n\n    // Update button states\n    this.increaseDisabled = this.value === undefined || this.value >= this.max\n    this.decreaseDisabled = this.value === undefined || this.value <= this.min\n\n    // Only invoke callbacks if value really changed\n    if (prevValue === this.value) {\n      return\n    }\n\n    this.invokeChangeCallback(this.value)\n\n    if (internalChange) {\n      dispatchEvent(this.el, NumericStepper.eventInput)\n    }\n  }\n\n  private focusInputField() {\n    this.sdxInputEl!.focus()\n  }\n\n  private getInputStyle() {\n    return {\n      textAlign: \"center\",\n      padding: \"0 56px\",\n    }\n  }\n\n  private getLabelClassNames() {\n    return {\n      label: true,\n      [getAppearance(this.el)]: true,\n    }\n  }\n\n  private getComponentClassNames() {\n    return {\n      component: true,\n      [getAppearance(this.el)]: true,\n    }\n  }\n\n  private getButtonClassNames(position: string) {\n    return {\n      [position]: true,\n      invalid: this.valid === false,\n    }\n  }\n\n  public render() {\n    return (\n      <div class={this.getComponentClassNames()}>\n        {this.label && (\n          <label\n            class={this.getLabelClassNames()}\n            onClick={() => this.focusInputField()}\n            aria-hidden=\"true\"\n          >\n            {this.label}\n          </label>\n        )}\n\n        <div class=\"wrapper\">\n          <sdx-input\n            srHint={this.srHintValue}\n            type=\"number\"\n            ref={(el) => (this.sdxInputEl = el)}\n            onInput={(e) => {\n              this.inputElValue = (e.target as HTMLSdxInputElement).value\n              e.stopPropagation()\n            }}\n            blurCallback={() => this.setValue(this.inputElValue, true)}\n            inputStyle={this.getInputStyle()}\n            value={this.inputElValue}\n            disabled={this.disabled}\n            valid={this.valid}\n            validationMessage={this.validationMessage}\n          />\n\n          <sdx-button\n            theme=\"transparent\"\n            class={this.getButtonClassNames(\"left\")}\n            iconName=\"icon-minus\"\n            iconSize={3}\n            disabled={this.decreaseDisabled || this.disabled}\n            onClick={() => this.decrease()}\n            tabindex=\"-1\"\n            aria-hidden=\"true\"\n            valid={this.valid && this.validationMessage !== \"\"}\n          />\n\n          <sdx-button\n            theme=\"transparent\"\n            class={this.getButtonClassNames(\"right\")}\n            iconName=\"icon-plus\"\n            iconSize={3}\n            disabled={this.increaseDisabled || this.disabled}\n            onClick={() => this.increase()}\n            tabindex=\"-1\"\n            aria-hidden=\"true\"\n            valid={this.valid && this.validationMessage !== \"\"}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n","@import \"../../globals/scss/label\";\n\n$button-width: 48px;\n\n:host {\n  display: block;\n}\n\n.component {\n  .wrapper {\n    position: relative;\n    width: $stepper-width;\n\n    .left,\n    .right {\n      // position\n      position: absolute;\n      top: 0;\n\n      // dimensions and measurements\n      display: inline-block;\n      margin: $baseline;\n    }\n\n    .left {\n      left: 0;\n    }\n\n    .right {\n      left: $stepper-width - $button-width;\n    }\n  }\n}\n"],"names":["NumericStepper","invokeChangeCallback","srHintValue","decreaseDisabled","increaseDisabled","this","min","setValue","value","setInvokeChangeCallback","label","srHint","parseFunction","changeCallback","undefined","el","blur","valueAsNumber","internalChange","prevValue","parsedValue","parseFloat","isNaN","max","inputElValue","JSON","stringify","dispatchEvent","eventInput","sdxInputEl","focus","textAlign","padding","getAppearance","component","position","valid","h","class","getComponentClassNames","getLabelClassNames","onClick","focusInputField","type","ref","onInput","e","target","stopPropagation","blurCallback","inputStyle","getInputStyle","disabled","validationMessage","theme","getButtonClassNames","iconName","iconSize","decrease","tabindex","increase"],"sourceRoot":""}