{"version":3,"file":"static/js/263.b1c625a6.chunk.js","mappings":"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","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/card/card.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/card/card.scss?tag=sdx-card&encapsulation=shadow"],"sourcesContent":["import { Component, Element, h, Prop } from \"@stencil/core\"\nimport { hasSlot } from \"../../core/helpers/webcomponent-helpers\"\nimport { NotificationType } from \"../../core/types/types\"\nimport { IconName } from \"../../core/types/icon-names\"\nimport { getAppearance } from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-card\",\n  styleUrl: \"card.scss\",\n  shadow: true,\n})\nexport class Card {\n  @Element() public el!: HTMLSdxCardElement\n\n  /**\n   * The layout type defines the appearance types of the card.\n   */\n  @Prop() public layout:\n    | \"default\"\n    | \"interaction\"\n    | \"notification\"\n    | \"inline-notification\"\n    | \"split\" = \"default\"\n\n  /**\n   * Background colors.\n   */\n  @Prop() public background?: \"grey\" | \"orchid\" | \"blue\"\n\n  /**\n   * Title that will be displayed in the card's header.\n   */\n  @Prop() public label?: string\n\n  /**\n   * What aria level the label in the header relates to for accessibility.\n   */\n  @Prop() public labelAriaLevel?: number\n\n  /**\n   * The icon which is displayed next to the label.\n   */\n  @Prop() public iconName?: IconName\n\n  /**\n   * What image to display (also supports SVG).\n   */\n  @Prop() public imageSrc?: string = \"\"\n\n  /**\n   * An alternate text for the image if it can not be displayed and for screen readers.\n   */\n  @Prop() public imageAlt?: string = \"\"\n\n  /**\n   * How the image fits inside (reflects the CSS \"object-fit\" property).\n   */\n  @Prop() public objectFit?: string\n\n  /**\n   * Gives the card a suitable color. \"confirm\" is deprecated.\n   */\n  @Prop() public notificationType: NotificationType | \"confirm\" = \"general\"\n\n  /**\n   * Renders a standalone link at the bottom of the card. Needs the `href-label` attribute.\n   * The attribute `layout=\"interaction\"` makes the whole card clickable.\n   */\n  @Prop() public href?: string\n\n  /**\n   * Renders a standalone link at the bottom of the card. Needs the `href` attribute.\n   * The attributes `layout=\"interaction\"` makes the whole card clickable.\n   */\n  @Prop() public hrefLabel?: string\n\n  /**\n   * Add a meaningful description to the link for screen readers.\n   */\n  @Prop() public hrefAriaLabel?: string\n\n  /**\n   * Disable animations for testing.\n   * @private\n   */\n  @Prop() public animated: boolean = true\n\n  /**\n   * Set the card layout to \"half-moon\" and the background color to gradient-2, no matter of \"layout\".\n   * @private\n   */\n  @Prop() public gradient?: boolean\n\n  private hasInteractionArea(): boolean {\n    return hasSlot(this.el, \"interaction\") || (!!this.href && !!this.hrefLabel)\n  }\n\n  private isNotificationishCard(): boolean {\n    const layout = this.getLayout()\n\n    return layout === \"notification\" || layout === \"inline-notification\"\n  }\n\n  private getLayout() {\n    return this.gradient ? \"gradient\" : this.layout\n  }\n\n  private getLabel() {\n    return this.getLayout() === \"interaction\"\n      ? this.label || this.hrefLabel\n      : this.label\n  }\n\n  private getDescription() {\n    return this.getLayout() === \"interaction\" && this.label\n      ? this.hrefLabel\n      : \"\"\n  }\n\n  private getIconName(): IconName | undefined {\n    // The icon can be overwritten, but if none is set, fall back to the\n    // associated default\n    if (this.iconName) {\n      return this.iconName\n    }\n\n    if (!this.isNotificationishCard()) {\n      return this.iconName\n    }\n\n    switch (this.notificationType) {\n      case \"confirm\":\n      case \"confirmation\":\n        return \"icon-check-mark-2-circle\"\n\n      case \"warning\":\n      case \"alert\":\n        return \"icon-exclamation-mark-circle\"\n\n      default:\n        return \"icon-information-circle\"\n    }\n  }\n\n  private getSrHint() {\n    const layout = this.getLayout()\n\n    if (layout !== \"notification\" && layout !== \"inline-notification\") {\n      return\n    }\n\n    switch (this.notificationType) {\n      case \"confirm\":\n      case \"confirmation\":\n        return \"This is a confirmation message.\"\n\n      case \"alert\":\n        return \"This is an alert message.\"\n\n      case \"warning\":\n        return \"This is a warning message.\"\n\n      default:\n        return \"This is an information message.\"\n    }\n  }\n\n  private isColorCard(): boolean {\n    return this.getLayout() === \"default\" && !!this.background\n  }\n\n  private createIcon(srHint?: string) {\n    const iconName = this.getIconName()\n\n    if (!iconName) {\n      return\n    }\n\n    return <sdx-icon class=\"icon\" iconName={iconName} sr-hint={srHint} />\n  }\n\n  private getComponentClassNames() {\n    return {\n      component: true,\n      \"has-label\": !!this.label,\n      \"has-description\": !!this.getDescription(),\n      \"has-image\": !!this.imageSrc,\n      [getAppearance(this.el)]: true,\n      [this.getLayout()]: true,\n      [this.notificationType]: true,\n      [this.background || \"\"]: true,\n      \"not-animated\": !this.animated,\n    }\n  }\n\n  private getLabelClassNames() {\n    const layout = this.getLayout()\n\n    return {\n      label: true,\n      [layout === \"notification\" ? \"h5\" : \"h4\"]: true,\n    }\n  }\n\n  private getLinkClassNames() {\n    return {\n      link: true,\n      \"link--white\": this.background === \"orchid\" || this.background === \"blue\",\n      \"link--standalone\": true,\n    }\n  }\n\n  public render() {\n    const layout = this.getLayout()\n    const iconName = this.getIconName()\n    const label = this.getLabel()\n\n    const Tag =\n      layout === \"interaction\" ||\n      (this.isColorCard() && this.hasInteractionArea())\n        ? \"a\"\n        : \"div\"\n\n    return (\n      <Tag class={this.getComponentClassNames()} href={this.href}>\n        <div class=\"first\">\n          {this.imageSrc && (\n            <img\n              class=\"image\"\n              src={this.imageSrc}\n              alt={this.imageAlt}\n              style={{ objectFit: this.objectFit }}\n            />\n          )}\n\n          {/* Allow the content notification-ish cards to \"glide up\" (when\n            there's no label) by displaying the icon here and hiding it in the .label) */}\n          {this.createIcon(this.getSrHint())}\n\n          <slot name=\"first\" />\n        </div>\n\n        <div class=\"second\">\n          {(label || iconName) && (\n            <div\n              class={this.getLabelClassNames()}\n              role={this.labelAriaLevel ? \"heading\" : undefined}\n              aria-level={this.labelAriaLevel}\n            >\n              {this.createIcon() ||\n                (layout === \"interaction\" && <div class=\"icon\">&nbsp;</div>)}\n              <span class=\"title\">{label}</span>\n            </div>\n          )}\n\n          {hasSlot(this.el) && (\n            <div class=\"slot\">\n              <slot />\n            </div>\n          )}\n\n          {/* note: interaction area is not exclusive to layout=interaction */}\n          {this.hasInteractionArea() && (\n            <div class=\"flex-wrapper\">\n              <div class=\"description\">{this.getDescription()}</div>\n              <div class=\"interaction-area\">\n                {layout !== \"interaction\" && <slot name=\"interaction\" />}\n\n                {this.href && this.hrefLabel && (\n                  <a\n                    href={this.href}\n                    class={this.getLinkClassNames()}\n                    aria-label={this.hrefAriaLabel}\n                  >\n                    {layout !== \"interaction\" && this.hrefLabel}\n                  </a>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </Tag>\n    )\n  }\n}\n","@import \"stylesheets/sdx/typography/typography\";\n@import \"stylesheets/sdx/link/link\";\n\n@mixin spacing {\n  padding: $baseline-2;\n  gap: $baseline-2;\n\n  @include bp-desktop {\n    padding: $baseline-3;\n    gap: $baseline-3;\n  }\n}\n\n.component {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: $color-white;\n  border: 1px solid $color-gray-tint-7;\n  border-radius: $border-radius-large;\n  overflow: hidden; // clip border-radius\n\n  &.notification,\n  &.inline-notification {\n    flex-direction: row;\n    gap: $baseline-2;\n\n    &:not(.has-label) {\n      .label {\n        display: none; // cancel gap\n      }\n    }\n\n    &.alert {\n      &::before {\n        background: $color-int-red;\n      }\n\n      .icon {\n        color: $color-int-red;\n      }\n    }\n\n    &.warning {\n      &::before {\n        background: $color-int-orange;\n      }\n\n      .icon {\n        color: $color-int-orange;\n      }\n    }\n\n    &.general {\n      &::before {\n        background: $color-int-blue;\n      }\n\n      .icon {\n        color: $color-int-blue;\n      }\n    }\n\n    &.confirm,\n    &.confirmation {\n      &::before {\n        background: $color-int-green;\n      }\n\n      .icon {\n        color: $color-int-green;\n      }\n    }\n\n    .first,\n    .second {\n      padding: unset;\n    }\n\n    .first {\n      .icon {\n        display: block;\n        position: relative;\n        left: 3px;\n      }\n    }\n\n    .label {\n      // Act like the .icon is there by setting it to \"visibility: hidden;\",\n      // but make sure to create no visible \"whole\" by reversing the order and\n      // with that placing the icon on the right side next to the text.\n      flex-direction: row-reverse;\n      justify-content: left;\n\n      .icon {\n        visibility: hidden;\n      }\n    }\n  }\n\n  &.notification {\n    padding: $baseline-2;\n    position: relative;\n\n    &::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 6px;\n      height: 100%;\n    }\n\n    .icon {\n      font-size: $icon-s2;\n    }\n  }\n\n  &.inline-notification {\n    border: unset;\n    border-radius: unset;\n    box-shadow: unset;\n    background: unset;\n\n    &:not(.has-label) {\n      .slot {\n        // When there's no label, the slot \"glides up\". Align it to the icon.\n        margin-top: 3px;\n      }\n    }\n  }\n\n  &.interaction {\n    flex-direction: row;\n\n    // override anchor defaults\n    text-decoration: none;\n    transition: box-shadow 200ms ease-in-out;\n\n    &:hover,\n    &:focus-visible {\n      border-color: $color-gray-tint-4;\n      box-shadow: 0 4px 16px 0 rgb($color-gray, 0.16);\n\n      .link--standalone {\n        @include standalone-link-hover;\n      }\n    }\n\n    &.not-animated {\n      transition: unset;\n    }\n\n    .second {\n      gap: $baseline;\n      flex-direction: column;\n      align-self: end;\n    }\n\n    .image {\n      width: 112px; // from figma\n      height: 100%;\n\n      @include bp-lg {\n        width: 128px; // from figma\n      }\n    }\n\n    .label {\n      gap: 0;\n    }\n\n    @include bp-lg {\n      &:not(.has-image) {\n        .second {\n          height: 100%;\n        }\n\n        .label {\n          display: flex;\n          flex-basis: 100%;\n          flex-direction: column;\n          justify-content: flex-start;\n        }\n\n        .flex-wrapper {\n          flex-basis: 0;\n        }\n      }\n\n      &:not(.has-description) {\n        .label {\n          justify-content: space-between;\n        }\n      }\n    }\n\n    &:not(.has-description),\n    &:not(.has-label) {\n      &:not(.has-image) {\n        @include bp-md-max {\n          // vertically center arrow\n          .second {\n            flex-direction: row;\n            justify-content: space-between;\n            align-self: auto;\n            gap: 0;\n          }\n\n          .flex-wrapper {\n            align-items: center;\n            width: auto;\n            height: auto;\n          }\n        }\n\n        @include bp-lg {\n          .label {\n            // shift down by 24px (description line height) + 8px (gap)\n            margin: 0 $baseline-4 (-1 * $baseline-4) 0;\n          }\n        }\n      }\n\n      &.has-image {\n        .label {\n          // shift down by 24px (description line height) + 8px (gap)\n          margin: 0 $baseline-4 (-1 * $baseline-4) 0;\n        }\n      }\n    }\n\n    .icon {\n      color: $color-sc-navy;\n      margin-bottom: $baseline-4;\n      font-size: $icon-s3;\n    }\n\n    .description {\n      color: $color-gray;\n      hyphens: auto;\n      padding-right: $baseline;\n    }\n\n    .flex-wrapper {\n      display: flex;\n      align-items: flex-end;\n      height: 100%;\n      width: 100%;\n      justify-content: space-between;\n    }\n\n    .first .icon {\n      display: block;\n      margin: $baseline-2 0 $baseline-2 $baseline-2;\n      font-size: $icon-s2;\n\n      @include bp-lg {\n        display: none;\n      }\n    }\n\n    .second .icon {\n      display: none;\n\n      @include bp-lg {\n        display: block;\n      }\n    }\n\n    &.has-image .second {\n      flex-basis: auto;\n\n      .icon {\n        display: none;\n      }\n\n      .label {\n        margin-top: $baseline-2;\n      }\n    }\n  }\n\n  &.grey,\n  &.orchid,\n  &.blue {\n    // override anchor defaults\n    text-decoration: none;\n    transition: box-shadow 200ms ease-in-out;\n\n    &.not-animated {\n      transition: unset;\n    }\n\n    &:hover {\n      .link--standalone {\n        @include standalone-link-hover;\n      }\n    }\n  }\n\n  &.orchid,\n  &.blue {\n    border-color: transparent;\n\n    &,\n    .label {\n      color: $color-white;\n    }\n  }\n\n  &.grey {\n    background: $color-horizon;\n    color: $color-gray;\n\n    &:is(a):hover {\n      box-shadow: 0 4px 16px 0 rgb($color-gray, 0.16);\n    }\n  }\n\n  &.orchid {\n    background: $color-orchid;\n\n    &:is(a):hover {\n      box-shadow: 0 4px 16px 0 rgb($color-orchid, 0.5);\n    }\n  }\n\n  &.blue {\n    background: $color-blue;\n\n    &:is(a):hover {\n      box-shadow: 0 4px 16px 0 rgb($color-blue, 0.5);\n    }\n  }\n\n  &.gradient {\n    .first {\n      @include gradient-2;\n      // Chrome doesn't support \"mask-image\", yet\n      -webkit-mask-image: svg-background();\n      mask-image: svg-background();\n      mask-size: 100% 100%;\n\n      display: flex;\n      height: 122px;\n      color: $color-white;\n      align-items: center;\n      justify-content: center;\n\n      .icon {\n        display: block;\n        font-size: $icon-s6;\n      }\n    }\n\n    .second {\n      align-items: center;\n    }\n\n    .label {\n      .icon {\n        display: none;\n      }\n    }\n  }\n\n  &.split {\n    flex-direction: column-reverse;\n\n    @include bp-desktop {\n      flex-direction: row;\n    }\n\n    &.gradient-1 {\n      .first {\n        @include gradient-1;\n        color: $color-white;\n      }\n    }\n\n    .first,\n    .second {\n      @include spacing;\n      flex-basis: 50%;\n    }\n  }\n\n  .first {\n    .icon {\n      display: none;\n    }\n  }\n\n  .second {\n    @include spacing;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .image {\n    width: 100%;\n    height: 180px;\n    object-position: center;\n    object-fit: cover;\n    vertical-align: bottom;\n    -webkit-user-drag: none; // Prevent conflict with dragging in Content Slider\n  }\n\n  .label {\n    @include font-semi-bold;\n    margin-bottom: 0;\n    display: flex;\n    gap: $baseline;\n    color: $color-sc-navy;\n  }\n\n  .icon {\n    font-size: $icon-s2;\n\n    @include bp-desktop {\n      font-size: $icon-s3;\n    }\n  }\n\n  .slot {\n    flex-grow: 1;\n  }\n\n  .link {\n    &::before {\n      font-family: $font-family-sdx;\n      content: \"\\e004\"; // .icon-arrow-right\n    }\n  }\n}\n\n.component.sdx--dark-theme {\n  border: 1px solid $color-gray-tint-7-dark-theme;\n  background-color: $color-dusk-tint-3-dark-theme;\n  color: $color-gray-dark-theme;\n\n  &:hover:hover {\n    box-shadow: none;\n  }\n\n  // Override background color (dusk-tint-3) of default sdx-card\n  &.inline-notification {\n    &.alert,\n    &.warning,\n    &.general,\n    &.confirm {\n      background-color: transparent;\n    }\n  }\n\n  &.notification,\n  &.inline-notification {\n    &.alert {\n      &::before {\n        background-color: $color-int-red-dark-theme;\n      }\n\n      .icon {\n        color: $color-int-red-dark-theme;\n      }\n    }\n\n    &.warning {\n      &::before {\n        background-color: $color-int-orange-dark-theme;\n      }\n\n      .icon {\n        color: $color-int-orange-dark-theme;\n      }\n    }\n\n    &.general {\n      &::before {\n        background-color: $color-int-blue-dark-theme;\n      }\n\n      .icon {\n        color: $color-int-blue-dark-theme;\n      }\n    }\n\n    &.confirm,\n    &.confirmation {\n      &::before {\n        background-color: $color-int-green-dark-theme;\n      }\n\n      .icon {\n        color: $color-int-green-dark-theme;\n      }\n    }\n  }\n\n  &:hover {\n    .link--standalone {\n      @include standalone-link-hover-dark-theme;\n    }\n  }\n\n  &.interaction {\n    transition: background-color 200ms ease-in-out,\n      border-color 200ms ease-in-out;\n\n    .description {\n      color: $color-gray-dark-theme;\n    }\n    .icon {\n      color: $color-gray-dark-theme;\n    }\n\n    &:hover,\n    &:focus-visible {\n      background-color: $color-dusk-tint-4-dark-theme;\n      border-color: $color-gray-tint-4-dark-theme;\n    }\n  }\n\n  &.grey,\n  &.orchid,\n  &.blue {\n    transition: background-color 200ms ease-in-out,\n      border-color 200ms ease-in-out;\n\n    &.not-animated {\n      transition: unset;\n    }\n  }\n\n  &.grey {\n    background-color: $color-dusk-tint-3-dark-theme;\n\n    &:is(a):hover {\n      background-color: $color-dusk-tint-4-dark-theme;\n      border-color: $color-gray-tint-4-dark-theme;\n    }\n  }\n\n  &.orchid {\n    background-color: $color-orchid-dark-theme;\n\n    &:is(a):hover {\n      background-color: $color-orchid-tint-2-dark-theme;\n      border-color: $color-gray-tint-4-dark-theme;\n    }\n  }\n\n  &.blue {\n    background-color: $color-blue-dark-theme;\n\n    &:is(a):hover {\n      background-color: $color-blue-tint-2-dark-theme;\n      border-color: $color-gray-tint-4-dark-theme;\n    }\n  }\n\n  .label {\n    transition: color 200ms ease-in-out;\n    color: $color-gray-dark-theme;\n  }\n}\n"],"names":["Card","hasSlot","this","el","href","hrefLabel","layout","getLayout","gradient","label","iconName","isNotificationishCard","notificationType","background","srHint","getIconName","h","class","component","getDescription","imageSrc","getAppearance","animated","link","getLabel","Tag","isColorCard","hasInteractionArea","getComponentClassNames","src","alt","imageAlt","style","objectFit","createIcon","getSrHint","name","getLabelClassNames","role","labelAriaLevel","undefined","getLinkClassNames","hrefAriaLabel"],"sourceRoot":""}