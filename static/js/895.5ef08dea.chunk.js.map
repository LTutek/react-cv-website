{"version":3,"file":"static/js/895.5ef08dea.chunk.js","mappings":"6TAQaA,EAAS,W,sGAAA,mDAcb,WACLC,KAAKC,aAAaD,KAAKE,iBAfL,+BAkBb,WACL,OAAOF,KAAKC,aAAaD,KAAKE,cAAe,KAnB3B,6DAuBb,WACLA,GADK,mFAELC,EAFK,+BAEMH,KAAKI,kBAFX,KAIGF,EAJH,OAKE,aALF,OAQE,cARF,OAWE,YAXF,OAcE,aAdF,+CAMMG,EAAAA,EAAAA,QAAkBL,KAAKM,GAAIH,IANjC,gCASME,EAAAA,EAAAA,SAAmBL,KAAKM,GAAIH,IATlC,gCAYME,EAAAA,EAAAA,OAAiBL,KAAKM,GAAIH,IAZhC,gCAeME,EAAAA,EAAAA,QAAkBL,KAAKM,GAAIH,IAfjC,iFAvBa,2EA6Cb,WACL,OAAOI,EAAAA,EAAAA,GAAAA,OAAAA,QA9CW,yB,uBAAA,gC,mDAAA,KCDTC,EAAI,W,6DAM2B,OAN3B,gDAQR,WACLR,KAAKM,GAAGG,MAAMC,QAAU,eACxBV,KAAKM,GAAGG,MAAME,UAAd,iBAAoCX,KAAKY,sBACvC,KADF,oBAEaZ,KAAKY,sBAAsB,KAFxC,OAVa,mCAeP,SAAsBC,GAoB5B,MAnB8D,CAC5DC,KAAM,CACJC,EAAG,EACHC,EAAG,GAELC,WAAY,CACVF,GAAI,EACJC,EAAG,GAELE,SAAU,CACRH,EAAG,EACHC,GAAI,GAENG,KAAM,CACJJ,GAAI,EACJC,GAAI,IAIGhB,KAAKoB,WAAWP,KAnCd,oBAsCR,WACL,OAAON,EAAAA,EAAAA,GAAAA,OAAAA,QAvCM,yB,wBAAA,KCIJc,EAAI,W,mFAWqB,G,2BAWC,O,aAKJ,E,YAKD,G,eAKG,EArCpB,4CAuCP,WAAa,M,EACnB,UACEC,MAAM,IADR,SAEgB,QAAb,EAAAtB,KAAKuB,gBAAQC,IAAAA,EAAAA,EAAI,IAAK,IAFzB,SAGGxB,KAAKyB,YAAa,IAHrB,0BAIazB,KAAK0B,QAAW1B,KAAK0B,OAJlC,0BAKsB1B,KAAK2B,UAL3B,IAxCa,oBAiDR,WACL,OACEpB,EAAAA,EAAAA,GAACqB,EAAAA,EAAI,CAACC,MAAO,CAAEH,OAAQ1B,KAAK0B,QAC1BnB,EAAAA,EAAAA,GAAAA,gBAAAA,CAAeL,cAAeF,KAAK8B,OAAS,YAAc,aACxDvB,EAAAA,EAAAA,GAAAA,WAAAA,CAAUa,UAAWpB,KAAK+B,KAAMF,OAAOG,EAAAA,EAAAA,GAAchC,KAAKM,MACxDC,EAAAA,EAAAA,GAAAA,OAAAA,CAAMsB,MAAO7B,KAAKiC,gBAAe,cAAc,SAC9B,KAAhBjC,KAAKkC,SAAiB3B,EAAAA,EAAAA,GAAAA,OAAAA,CAAMsB,MAAM,WAAW7B,KAAKkC,aAvD9C,yB,wBAAA,K,QCXD","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/animation/animation.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/flip/flip.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/icon/icon.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/icon/icon.scss?tag=sdx-icon&encapsulation=shadow"],"sourcesContent":["import { Component, h, Prop, Element, Watch, Method } from \"@stencil/core\"\nimport { AnimationName } from \"./types\"\nimport { animation } from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-animation\",\n  shadow: true,\n})\nexport class Animation {\n  @Element() public el!: HTMLSdxAnimationElement\n\n  /**\n   * The animation to play.\n   */\n  @Prop() public animationName?: AnimationName\n\n  /**\n   * The length of the animation.\n   */\n  @Prop() public animationDuration?: number\n\n  @Watch(\"animationName\")\n  public animationNameChanged() {\n    this.runAnimation(this.animationName)\n  }\n\n  public componentWillLoad() {\n    return this.runAnimation(this.animationName, 0)\n  }\n\n  @Method()\n  public async runAnimation(\n    animationName: AnimationName | undefined,\n    duration = this.animationDuration\n  ) {\n    switch (animationName) {\n      case \"scale-in\":\n        return animation.scaleIn(this.el, duration)\n\n      case \"scale-out\":\n        return animation.scaleOut(this.el, duration)\n\n      case \"fade-in\":\n        return animation.fadeIn(this.el, duration)\n\n      case \"fade-out\":\n        return animation.fadeOut(this.el, duration)\n\n      default:\n        return\n    }\n  }\n\n  public render() {\n    return <slot />\n  }\n}\n","import { Component, h, Prop, Element } from \"@stencil/core\"\nimport { FlipDirection } from \"../../core/types/types\"\n\n@Component({\n  tag: \"sdx-flip\",\n  shadow: true,\n})\nexport class Flip {\n  @Element() public el!: HTMLSdxFlipElement\n\n  /**\n   * Mirror the content across one or both axes (or none at all).\n   */\n  @Prop() public direction: FlipDirection = \"none\"\n\n  public componentWillLoad() {\n    this.el.style.display = \"inline-block\" // make transformable\n    this.el.style.transform = `scaleX(${this.getFlipTransformStyle(\n      \"x\"\n    )}) scaleY(${this.getFlipTransformStyle(\"y\")})`\n  }\n\n  private getFlipTransformStyle(axis: \"x\" | \"y\"): number {\n    const map: { [index: string]: { [index: string]: number } } = {\n      none: {\n        x: 1,\n        y: 1,\n      },\n      horizontal: {\n        x: -1,\n        y: 1,\n      },\n      vertical: {\n        x: 1,\n        y: -1,\n      },\n      both: {\n        x: -1,\n        y: -1,\n      },\n    }\n\n    return map[this.direction][axis]\n  }\n\n  public render() {\n    return <slot />\n  }\n}\n","import { Component, h, Prop, Element, Host } from \"@stencil/core\"\nimport { IconSize } from \"./types\"\nimport { FlipDirection } from \"../../core/types/types\"\nimport { getAppearance } from \"../../core/helpers/webcomponent-helpers\"\nimport { IconName } from \"../../core/types/icon-names\"\n\n@Component({\n  tag: \"sdx-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n})\nexport class Icon {\n  @Element() public el!: HTMLSdxSearchElement\n\n  /**\n   * Name of the SDX icon (e.g. \"icon-clear-circle\").\n   */\n  @Prop() public iconName?: IconName\n\n  /**\n   * SDX predefined color class.\n   */\n  @Prop() public colorClass: string = \"\"\n\n  /**\n   * The dimension of the icon.\n   * If omitted, the icon will adapt to the current font-size.\n   */\n  @Prop() public size: IconSize\n\n  /**\n   * Mirror the icon.\n   */\n  @Prop() public flip: FlipDirection = \"none\"\n\n  /**\n   * Hide the icon (animated).\n   */\n  @Prop() public hidden: boolean = false\n\n  /**\n   * Description text read by the screen reader.\n   */\n  @Prop() public srHint: string = \"\"\n\n  /**\n   * Apply a gradient.\n   */\n  @Prop() public gradient: boolean = false\n\n  private getClassNames() {\n    return {\n      icon: true,\n      [this.iconName ?? \"\"]: true,\n      [this.colorClass]: true,\n      [`icon--s${this.size}`]: !!this.size,\n      [`icon--gradient`]: this.gradient,\n    }\n  }\n\n  public render() {\n    return (\n      <Host class={{ size: !!this.size }}>\n        <sdx-animation animationName={this.hidden ? \"scale-out\" : \"scale-in\"}>\n          <sdx-flip direction={this.flip} class={getAppearance(this.el)}>\n            <span class={this.getClassNames()} aria-hidden=\"true\"></span>\n            {this.srHint !== \"\" && <span class=\"sr-only\">{this.srHint}</span>}\n          </sdx-flip>\n        </sdx-animation>\n      </Host>\n    )\n  }\n}\n","@import \"stylesheets/sdx/utilities/color\";\n@import \"stylesheets/sdx/utilities/screenreaders\";\n@import \"stylesheets/sdx/icons\";\n\n:host {\n  display: inline-block;\n}\n\n:host(.size) {\n  line-height: 1; // same as stylesheets/sdx/mixins/_icon.scss\n}\n"],"names":["Animation","this","runAnimation","animationName","duration","animationDuration","animation","el","h","Flip","style","display","transform","getFlipTransformStyle","axis","none","x","y","horizontal","vertical","both","direction","Icon","icon","iconName","_a","colorClass","size","gradient","Host","class","hidden","flip","getAppearance","getClassNames","srHint"],"sourceRoot":""}