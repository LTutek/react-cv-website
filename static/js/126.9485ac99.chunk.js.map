{"version":3,"file":"static/js/126.9485ac99.chunk.js","mappings":"wOAmBaA,EAAW,W,8CAGL,KAAAC,kBAAoB,IACpB,KAAAC,sBAAwB,I,cAKL,Q,WAKL,E,eAMI,E,cAEC,E,6BAtBd,gDAyBf,WACLC,KAAKC,QAAUD,KAAKE,YACpBF,KAAKG,qBA3Be,4BA+Bf,WACLH,KAAKC,QAAUD,KAAKE,cAhCA,0BAoCf,cApCe,uBAwCd,WAEN,OAAOF,KAAKI,MAAQJ,KAAKK,gCA1CL,yCA6Cd,WAEN,OAAOC,OAAOC,YAAcC,SAASC,gBAAgBC,eA/CjC,qBAmDf,WACLV,KAAKW,gBApDe,8BAwDf,WACLX,KAAKG,qBAzDe,oBA4Dd,WACNH,KAAKY,GAAGC,MAAMC,QAAU,QAEF,UAAlBd,KAAKe,WACPf,KAAKY,GAAGC,MAAME,SAAW,QACzBf,KAAKY,GAAGC,MAAMG,OAAS,OACvBhB,KAAKY,GAAGC,MAAMI,MAAQ,UAlEJ,8BAsEd,WAAgB,I,EAAA,OACD,QAArB,EAAAjB,KAAKkB,wBAAgBC,IAAAA,GAAAA,EAAEC,QAEnBpB,KAAKC,SACPD,KAAKqB,SAELrB,KAAKkB,kBAAmBI,EAAAA,EAAAA,GAAM,CAC5BC,QAASvB,KAAKY,GACdY,SAAUxB,KAAKyB,SAAWzB,KAAKF,kBAAoB,EACnD4B,QAAS,EACTC,WAAY,EACZC,OAAQ,yCAGV5B,KAAKkB,kBAAmBI,EAAAA,EAAAA,GAAM,CAC5BC,QAASvB,KAAKY,GACdY,SAAUxB,KAAKyB,SAAWzB,KAAKF,kBAAoB,EACnD4B,QAAS,EACTC,WAAY3B,KAAKD,sBACjB6B,OAAQ,sCACRC,SAAU,WACR,EAAKjB,GAAGC,MAAMC,QAAU,WAK9BgB,EAAAA,EAAAA,GAAY9B,KAAKY,MAhGG,oCAmGd,WACN,kBACGmB,EAAAA,EAAAA,GAAc/B,KAAKY,KAAM,KArGR,yBAyGf,WACLN,OAAO0B,OAAO,CAAEC,IAAK,EAAGC,SAAU,aA1Gd,oBA6Gf,WACL,OACEC,EAAAA,EAAAA,GAAAA,MAAAA,CAAKC,MAAOpC,KAAKqC,2BACfF,EAAAA,EAAAA,GAAAA,SAAAA,CAAQG,KAAK,SAASF,MAAM,gBAAe,cAAa,SACtDD,EAAAA,EAAAA,GAAAA,WAAAA,CAAA,YAAoB,gBAAgBI,KAAM,QAjH5B,yB,uBAAA,gC,yCAAA,K,QCnBD","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/scroll-to-top/scroll-to-top.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/scroll-to-top/scroll-to-top.scss?tag=sdx-scroll-to-top&encapsulation=shadow"],"sourcesContent":["import {\n  Component,\n  h,\n  Element,\n  Listen,\n  Prop,\n  State,\n  Watch,\n  forceUpdate,\n} from \"@stencil/core\"\nimport anime from \"animejs\"\nimport { Position } from \"./types\"\nimport { getAppearance } from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-scroll-to-top\",\n  styleUrl: \"scroll-to-top.scss\",\n  shadow: true,\n})\nexport class ScrollToTop {\n  @Element() public el!: HTMLSdxScrollToTopElement\n\n  private readonly animationDuration = 500\n  private readonly animationTranslationY = 112\n\n  /**\n   * @private\n   */\n  @Prop() public position: Position = \"fixed\"\n\n  /**\n   * @private\n   */\n  @Prop() public demo: boolean = false\n\n  /**\n   * @private\n   * Disable animations for testing.\n   */\n  @Prop() public animated: boolean = true\n\n  @State() private visible: boolean = false\n  @State() private currentAnimation: anime.AnimeInstance | undefined\n\n  public componentWillLoad() {\n    this.visible = this.isVisible()\n    this.updateVisibility()\n  }\n\n  @Listen(\"scroll\", { target: \"window\" })\n  public onWindowScroll() {\n    this.visible = this.isVisible()\n  }\n\n  @Listen(\"touchstart\")\n  public onTouchStart() {\n    // NOP - make sure touchstart is noticed. touchstart event needed for the animations (note: tracking on prod)\n  }\n\n  private isVisible(): boolean {\n    // should always be visible when \"demo\"; only used for demo on SDX documentation site\n    return this.demo || this.hasScrolledOverWindowHeight()\n  }\n\n  private hasScrolledOverWindowHeight(): boolean {\n    // do not use window.innerHeight because of iOS\n    return window.pageYOffset > document.documentElement.clientHeight\n  }\n\n  @Listen(\"click\")\n  public onClick() {\n    this.scrollToTop()\n  }\n\n  @Watch(\"visible\")\n  public onVisibleChanged() {\n    this.updateVisibility()\n  }\n\n  private showEl() {\n    this.el.style.display = \"block\"\n\n    if (this.position === \"fixed\") {\n      this.el.style.position = \"fixed\"\n      this.el.style.bottom = \"32px\" // $baseline-4\n      this.el.style.right = \"32px\" // $baseline-4\n    }\n  }\n\n  private updateVisibility() {\n    this.currentAnimation?.pause() // if animation is running slower than new one\n\n    if (this.visible) {\n      this.showEl()\n\n      this.currentAnimation = anime({\n        targets: this.el,\n        duration: this.animated ? this.animationDuration : 0,\n        opacity: 1,\n        translateY: 0,\n        easing: \"cubicBezier(0.550, 0.085, 0.320, 1)\",\n      })\n    } else {\n      this.currentAnimation = anime({\n        targets: this.el,\n        duration: this.animated ? this.animationDuration : 0,\n        opacity: 0,\n        translateY: this.animationTranslationY,\n        easing: \"cubicBezier(0.550, 0.085, 0.320, 1)\",\n        complete: () => {\n          this.el.style.display = \"none\"\n        },\n      })\n    }\n\n    forceUpdate(this.el)\n  }\n\n  private getComponentClassNames() {\n    return {\n      [getAppearance(this.el)]: true,\n    }\n  }\n\n  public scrollToTop() {\n    window.scroll({ top: 0, behavior: \"smooth\" })\n  }\n\n  public render() {\n    return (\n      <div class={this.getComponentClassNames()}>\n        <button type=\"button\" class=\"scroll-to-top\" aria-hidden=\"true\">\n          <sdx-icon icon-name=\"icon-arrow-up\" size={3} />\n        </button>\n      </div>\n    )\n  }\n}\n","$scroll-to-top-border-width: 2px;\n\n:host {\n  z-index: $zindex-scroll-to-top;\n  display: none;\n}\n\n.scroll-to-top {\n  border: $scroll-to-top-border-width solid $color-int-blue;\n  border-radius: 50%;\n  background-color: rgba($color-white, 0.8);\n  color: $color-int-blue;\n  height: $baseline-6;\n  width: $baseline-6;\n  padding: $baseline - $scroll-to-top-border-width;\n  outline: none;\n  cursor: pointer;\n\n  @include focus-active-hover {\n    border-color: $color-int-blue--active;\n    color: $color-int-blue--active;\n  }\n\n  &:active {\n    transform: scale(0.98);\n  }\n}\n\n.sdx--dark-theme {\n  .scroll-to-top {\n    background-color: rgba($color-dusk-tint-2-dark-theme, 0.8);\n    color: $color-int-blue-dark-theme;\n\n    @include focus-active-hover {\n      border-color: $color-int-blue-dark-theme--active;\n      color: $color-int-blue-dark-theme--active;\n    }\n  }\n}\n"],"names":["ScrollToTop","animationDuration","animationTranslationY","this","visible","isVisible","updateVisibility","demo","hasScrolledOverWindowHeight","window","pageYOffset","document","documentElement","clientHeight","scrollToTop","el","style","display","position","bottom","right","currentAnimation","_a","pause","showEl","anime","targets","duration","animated","opacity","translateY","easing","complete","forceUpdate","getAppearance","scroll","top","behavior","h","class","getComponentClassNames","type","size"],"sourceRoot":""}