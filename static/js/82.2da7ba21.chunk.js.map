{"version":3,"file":"static/js/82.2da7ba21.chunk.js","mappings":"4NAYaA,EAAW,WA2DtB,+B,eA1DQ,KAAAC,qBAAiC,kBAAM,M,YAeL,G,0CAcP,E,4BAYY,GAkB7CC,KAAKC,0BAELD,KAAKE,cAAeC,EAAAA,EAAAA,GAAUH,KAAKI,SAAW,GA9D1B,4CA6Cf,WACLJ,KAAKE,cAAeC,EAAAA,EAAAA,GAAUH,KAAKI,SAAW,KA9C1B,0BAkDf,WACLJ,KAAKD,qBAAqBC,KAAKK,SAnDX,mCAuDf,WACLL,KAAKC,4BAxDe,qCAiEd,WACND,KAAKD,sBAAuBO,EAAAA,EAAAA,GAAcN,KAAKO,kBAlE3B,2BAqEd,SAAcC,GACpB,MAAO,CACLC,OAAQ,OACRC,MAAO,OACPC,aAAc,MACdC,WAAYJ,EAAMK,QA1EA,oBA8Ef,WAAM,WACX,OACEC,EAAAA,EAAAA,GAAAA,kBAAAA,CACEC,QAAM,EACNC,MAAM,YACNC,KAAMjB,KAAKiB,KACXC,KAAMlB,KAAKmB,SAAW,WAAa,QACnCd,MAAOL,KAAKK,MACZE,eAAgB,SAACF,GAAD,OAAY,EAAKA,MAAQA,IAExCL,KAAKE,aAAakB,KAAI,SAACZ,GAAD,OACrBM,EAAAA,EAAAA,GAAAA,iBAAAA,CACET,MAAOG,EAAMS,KACbI,iBAAe,EACfC,WAAY,CAAEC,QAAS,OACvBC,QAAShB,EAAMgB,QACfC,OAAQjB,EAAMS,OAEdH,EAAAA,EAAAA,GAAAA,MAAAA,CAAKY,MAAO,EAAKC,cAAcnB,YAhGnB,yB,uBAAA,gC,qGAAA,KASPV,EAAAA,WAAa,Q,QCrBP","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/color-picker/color-picker.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/color-picker/color-picker.scss?tag=sdx-color-picker"],"sourcesContent":["import { Component, h, Element, Prop, Watch } from \"@stencil/core\"\nimport { Color } from \"./types\"\nimport {\n  parseFunction,\n  parseJson,\n} from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-color-picker\",\n  styleUrl: \"color-picker.scss\",\n  shadow: false, // needed for form submit (sdx-input-group)\n})\nexport class ColorPicker {\n  private invokeChangeCallback: Function = () => null\n  private colorsParsed: Color[]\n\n  /**\n   * Emitted whenever user is checking/unchecking an item.\n   * @event\n   */\n  // @ts-ignore just for documentation purposes\n  private static eventInput = \"input\"\n\n  @Element() public el!: HTMLSdxOptionPickerElement\n\n  /**\n   * List of selectable colors.\n   */\n  @Prop() public colors: Color[] | string = []\n\n  /**\n   * Callback when checking a color.\n   * @deprecated use input event instead.\n   */\n  @Prop() public changeCallback:\n    | ((selection: string[]) => void)\n    | string\n    | undefined\n\n  /**\n   * Enable multi select.\n   */\n  @Prop() public multiple: boolean = false\n\n  /**\n   * Name parameter (useful when the component is used in a traditional HTML\n   * form submit).\n   */\n  @Prop() public name?: string\n\n  /**\n   * The value(s) of the currently checked items(s). Can be used for both\n   * getting and setting, like `myPicker.value = [ \"value1\" ]`.\n   */\n  @Prop({ mutable: true }) public value: any[] = []\n\n  @Watch(\"colors\")\n  public colorsChanged() {\n    this.colorsParsed = parseJson(this.colors) || []\n  }\n\n  @Watch(\"value\")\n  public valueChanged() {\n    this.invokeChangeCallback(this.value)\n  }\n\n  @Watch(\"changeCallback\")\n  public changeCallbackChanged() {\n    this.setInvokeChangeCallback()\n  }\n\n  constructor() {\n    this.setInvokeChangeCallback()\n\n    this.colorsParsed = parseJson(this.colors) || []\n  }\n\n  private setInvokeChangeCallback() {\n    this.invokeChangeCallback = parseFunction(this.changeCallback)\n  }\n\n  private getColorStyle(color: Color): Record<string, string | undefined> {\n    return {\n      height: \"40px\",\n      width: \"40px\",\n      borderRadius: \"5px\", // $border-radius\n      background: color.code,\n    }\n  }\n\n  public render() {\n    return (\n      <sdx-input-group\n        inline\n        theme=\"container\"\n        name={this.name}\n        type={this.multiple ? \"checkbox\" : \"radio\"}\n        value={this.value}\n        changeCallback={(value) => (this.value = value)}\n      >\n        {this.colorsParsed.map((color) => (\n          <sdx-input-item\n            value={color.name}\n            hideCheckedIcon\n            labelStyle={{ padding: \"3px\" }}\n            checked={color.checked}\n            srHint={color.name}\n          >\n            <div style={this.getColorStyle(color)}></div>\n          </sdx-input-item>\n        ))}\n      </sdx-input-group>\n    )\n  }\n}\n","// Careful: this component has no shadow root\n// and therefore shouldn't be styled here!\n"],"names":["ColorPicker","invokeChangeCallback","this","setInvokeChangeCallback","colorsParsed","parseJson","colors","value","parseFunction","changeCallback","color","height","width","borderRadius","background","code","h","inline","theme","name","type","multiple","map","hideCheckedIcon","labelStyle","padding","checked","srHint","style","getColorStyle"],"sourceRoot":""}