{"version":3,"file":"static/js/355.be764018.chunk.js","mappings":"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","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/core/helpers/breakpoint-helpers.ts","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/dialog/dialog-store.ts","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/dialog/dialog.scss?tag=sdx-dialog&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/dialog/dialog.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/dialog/dialog-content/dialog-content.scss?tag=sdx-dialog-content&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/dialog/dialog-content/dialog-content.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/dialog/dialog-toggle/dialog-toggle.scss?tag=sdx-dialog-toggle&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/dialog/dialog-toggle/dialog-toggle.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["type Breakpoints = {\n  xs: 0\n  sm: 480\n  md: 768\n  lg: 1024\n  xl: 1280\n  ul: 1440\n}\n\nexport const breakpoints: Breakpoints = {\n  xs: 0,\n  sm: 480,\n  md: 768,\n  lg: 1024,\n  xl: 1280,\n  ul: 1440,\n}\n\nexport function bp(breakpoint: keyof Breakpoints) {\n  return window.innerWidth >= breakpoints[breakpoint]\n}\n","import { Action, Reducer } from \"redux\"\nimport { DialogType } from \"./types\"\nimport { IconName } from \"../../core/types/icon-names\"\nimport { Display, NotificationType } from \"../../core/types/types\"\n\nexport interface DialogState {\n  label: string\n  type: DialogType\n  iconName?: IconName\n  iconColorClass: string\n  display: Display\n  toggle: () => Promise<void>\n  contentEl?: HTMLSdxDialogContentElement\n  toggleEl?: HTMLSdxDialogToggleElement\n  notificationType?: NotificationType | \"gradient\"\n  userInteractionInProgress: boolean\n}\n\nexport type DialogActions = Action<string>\n\nexport const dialogReducer: Reducer<DialogState, DialogActions> = (\n  state = {} as DialogState,\n  action\n): DialogState => {\n  switch (action.type) {\n    default:\n      return state\n  }\n}\n\nexport function getInitialState(): DialogState {\n  return {\n    label: \"\",\n    type: \"modal\",\n    iconColorClass: \"\",\n    display: \"closed\",\n    toggle: () => Promise.resolve(),\n    contentEl: undefined,\n    toggleEl: undefined,\n    notificationType: undefined,\n    userInteractionInProgress: false,\n  }\n}\n",":host {\n  display: inline-block;\n}\n\n:host(.no-toggle) {\n  display: none;\n}\n","import {\n  Component,\n  h,\n  Element,\n  Prop,\n  State,\n  Method,\n  Event,\n  EventEmitter,\n  Watch,\n  Host,\n} from \"@stencil/core\"\nimport anime from \"animejs\"\nimport { DialogType } from \"./types\"\nimport {\n  dialogReducer,\n  getInitialState,\n  DialogState,\n  DialogActions,\n} from \"./dialog-store\"\nimport {\n  StoreConnection,\n  StateHandle,\n  parseFunction,\n  getOverlayOutletEl,\n  appendToOverlayOutlet,\n} from \"../../core/helpers/webcomponent-helpers\"\nimport { Display, NotificationType } from \"../../core/types/types\"\nimport { bp } from \"../../core/helpers/breakpoint-helpers\"\nimport { IconName } from \"../../core/types/icon-names\"\n\n@Component({\n  tag: \"sdx-dialog\",\n  styleUrl: \"dialog.scss\",\n  shadow: true,\n})\nexport class Dialog {\n  private store: StoreConnection<this, DialogState, DialogActions>\n  private componentEl?: HTMLElement\n  private sdxBackdropEl?: HTMLSdxBackdropElement\n  private animationDuration = 300\n  private animationDurationMobile = 300\n  private invokeDisplayChangeCallback: Function = () => null\n\n  @Element() public el!: HTMLSdxDialogElement\n\n  @State() public state!: StateHandle<DialogState>\n\n  /**\n   * Title that will be displayed in the modals header.\n   */\n  @Prop() public label: string = \"\"\n\n  /**\n   * Defines how \"persistent\" the Modal is:\n   * \"modal\" blocks the whole screen and forces the user to make a decision.\n   * \"closable-modal\" is closable, does not block the screen and is therefore ignorable.\n   * See Designers section for more details.\n   */\n  @Prop() public type: DialogType = \"modal\"\n\n  /**\n   * Callback that will fire after the modals display status has changed.\n   * @deprecated use sdxdisplaychange event instead.\n   */\n  @Prop() public displayChangeCallback?: ((display: Display) => void) | string\n\n  /**\n   * Which icon to display on the title.\n   */\n  @Prop() public iconName?: IconName\n\n  /**\n   * Color of the icon on the title (SDX predefined color class). \"white\" if attribute \"notification-type\" is used.\n   */\n  @Prop() public iconColorClass: string = \"\"\n\n  /**\n   * The header is centered and displays a color matching the type of notification.\n   */\n  @Prop() public notificationType?: NotificationType\n\n  /**\n   * Set the background color of the header to gradient-2, not matter of \"notificationType\".\n   * @private\n   */\n  @Prop() public gradient?: boolean\n\n  /**\n   * Disable animations for testing.\n   * @private\n   */\n  @Prop() public animated: boolean = true\n\n  /**\n   * Emitted when the component's visibility updates.\n   */\n  @Event() public sdxdisplaychange!: EventEmitter<{ display: Display }>\n\n  @Watch(\"state\")\n  public stateChanged({}, prev: StateHandle<DialogState>) {\n    const state = this.state.get()\n    const prevState = prev.get()\n\n    if (state.display !== prevState.display) {\n      this.displayChanged(state)\n    }\n  }\n\n  @Watch(\"gradient\")\n  @Watch(\"notificationType\")\n  public notificationTypeChanged() {\n    this.store.set(\"notificationType\", this.getNotificationType())\n  }\n\n  @Watch(\"label\")\n  public labelChanged() {\n    this.store.set(\"label\", this.label)\n  }\n\n  @Watch(\"type\")\n  public typeChanged() {\n    this.store.set(\"type\", this.type)\n  }\n\n  @Watch(\"displayChangeCallback\")\n  public displayChangeCallbackChanged() {\n    this.setInvokeDisplayChangeCallback()\n  }\n\n  @Watch(\"iconName\")\n  public iconNameChanged() {\n    this.store.set(\"iconName\", this.iconName)\n  }\n\n  @Watch(\"iconColorClass\")\n  public iconColorClassChanged() {\n    this.store.set(\"iconColorClass\", this.iconColorClass)\n  }\n\n  /**\n   * Toggles the modal.\n   */\n  @Method()\n  public toggle(): Promise<void> {\n    const { display } = this.state.get()\n\n    if (display === \"open\") {\n      return this.close()\n    } else if (display === \"closed\") {\n      return this.open()\n    } else {\n      // Ignore \"opening\" and \"closing\"\n    }\n\n    return Promise.resolve()\n  }\n\n  /**\n   * Opens the modal.\n   */\n  @Method()\n  public open(): Promise<void> {\n    return new Promise((resolve) => {\n      const { display, contentEl, userInteractionInProgress } = this.state.get()\n\n      // Only a closed modal can be opened\n      if (!(display === \"closed\" || display === \"closing\")) {\n        resolve()\n        return\n      }\n\n      this.setDisplay(\"opening\", userInteractionInProgress)\n\n      // Move modal to the top of all other elements,\n      // note that the modal is appended to the backdrop for positioning\n      appendToOverlayOutlet(this.sdxBackdropEl!, getOverlayOutletEl(), this.el)\n      this.sdxBackdropEl!.append(contentEl!)\n\n      anime.set(this.sdxBackdropEl!, { display: \"block\" })\n\n      anime.set(contentEl!, {\n        display: \"block\",\n        opacity: bp(\"sm\") ? 0 : 1,\n        scale: bp(\"sm\") ? 0.92 : 1,\n        maxHeight: bp(\"sm\") ? \"none\" : 0, // \"auto\" cannot be animated\n      })\n\n      anime\n        .timeline({\n          duration: this.getAnimationDuration(),\n          easing: \"cubicBezier(0.550, 0.085, 0.320, 1)\",\n          complete: () => {\n            this.setDisplay(\"open\", userInteractionInProgress)\n            resolve()\n          },\n        })\n        .add({\n          targets: this.sdxBackdropEl,\n          backdropFilter: [\n            \"blur(0px) brightness(100%)\",\n            \"blur(4px) brightness(50%)\",\n          ],\n        })\n        .add(\n          {\n            targets: contentEl,\n            ...(bp(\"sm\")\n              ? {\n                  opacity: 1,\n                  scale: 1,\n                }\n              : {\n                  maxHeight: `${window.innerHeight}px`,\n                  easing: \"cubicBezier(0, 0, 0.58, 1.0)\", // ease-out\n                }),\n          },\n          0\n        )\n    })\n  }\n\n  /**\n   * Closes the modal.\n   */\n  @Method()\n  public close(): Promise<void> {\n    return new Promise((resolve) => {\n      const { display, contentEl, userInteractionInProgress } = this.state.get()\n\n      if (display !== \"open\") {\n        resolve()\n        return\n      }\n\n      this.setDisplay(\"closing\", userInteractionInProgress)\n\n      anime\n        .timeline({\n          duration: this.getAnimationDuration(),\n          easing: \"cubicBezier(0.550, 0.085, 0.320, 1)\",\n          complete: () => {\n            anime.set([this.sdxBackdropEl, contentEl], { display: \"none\" })\n\n            // Move modal back\n            appendToOverlayOutlet(contentEl!, this.el, this.el)\n            this.componentEl!.append(this.sdxBackdropEl!)\n\n            this.setDisplay(\"closed\", userInteractionInProgress)\n\n            resolve()\n          },\n        })\n        .add({\n          targets: this.sdxBackdropEl,\n          backdropFilter: \"blur(0px) brightness(100%)\",\n        })\n        .add(\n          {\n            targets: contentEl,\n            ...(bp(\"sm\")\n              ? {\n                  opacity: 0,\n                  scale: 0.92,\n                }\n              : {\n                  maxHeight: 0,\n                  easing: \"cubicBezier(0, 0, 0.58, 1.0)\", // ease-out\n                }),\n          },\n          0\n        )\n    })\n  }\n\n  /**\n   * Calls close(), but only when the component is allowed to be closed.\n   * @private\n   */\n  @Method()\n  public async requestToClose(\n    e: KeyboardEvent | MouseEvent | TouchEvent\n  ): Promise<void> {\n    const { contentEl } = this.state.get()\n\n    if (!contentEl) {\n      return\n    }\n\n    if (this.type !== \"closable-modal\") {\n      return\n    }\n\n    if (e instanceof KeyboardEvent) {\n      if (e.key === \"Escape\") {\n        this.store.set(\"userInteractionInProgress\", true)\n        this.close()\n        this.store.set(\"userInteractionInProgress\", false)\n      }\n\n      return\n    }\n\n    const didClickOnContentEl = e.composedPath().includes(contentEl)\n\n    if (didClickOnContentEl) {\n      return\n    }\n\n    // Clicked somewhere else on window\n    this.store.set(\"userInteractionInProgress\", true)\n    this.close()\n    this.store.set(\"userInteractionInProgress\", false)\n  }\n\n  /**\n   * Get the current display state.\n   * @private\n   */\n  @Method()\n  public async getDisplay(): Promise<string> {\n    return this.state.get().display\n  }\n\n  constructor() {\n    this.setInvokeDisplayChangeCallback()\n\n    this.store = new StoreConnection(this, dialogReducer, getInitialState(), [\n      \"display\",\n      \"contentEl\",\n      \"toggleEl\",\n    ])\n\n    this.store.set(\"label\", this.label)\n    this.store.set(\"type\", this.type)\n    this.store.set(\"iconName\", this.iconName)\n    this.store.set(\"iconColorClass\", this.iconColorClass)\n    this.store.set(\"toggle\", this.toggle.bind(this))\n    this.store.set(\"notificationType\", this.getNotificationType())\n\n    this.store.flush()\n  }\n\n  public disconnectedCallback() {\n    // Make sure the dialog is closed when removed from the DOM\n    this.close()\n  }\n\n  public componentDidLoad() {\n    this.store.subscribe()\n  }\n\n  private displayChanged(state: DialogState) {\n    this.invokeDisplayChangeCallback(state.display)\n  }\n\n  private setDisplay(\n    display: Display,\n    userInteractionInProgress: boolean\n  ): void {\n    this.store.set(\"display\", display)\n\n    // Only fire events on end user interaction\n    if (!userInteractionInProgress) {\n      return\n    }\n\n    this.sdxdisplaychange.emit({ display })\n  }\n\n  private setInvokeDisplayChangeCallback(): void {\n    this.invokeDisplayChangeCallback = parseFunction(this.displayChangeCallback)\n  }\n\n  private getAnimationDuration(): number {\n    if (!this.animated) {\n      return 0\n    }\n\n    return bp(\"sm\") ? this.animationDuration : this.animationDurationMobile\n  }\n\n  private getNotificationType() {\n    return this.gradient ? \"gradient\" : this.notificationType\n  }\n\n  public render() {\n    const { toggleEl } = this.state.get()\n\n    return (\n      <Host class={{ \"no-toggle\": !toggleEl }}>\n        <div class=\"component\" ref={(el) => (this.componentEl = el)}>\n          <slot />\n\n          <sdx-backdrop ref={(el) => (this.sdxBackdropEl = el)} />\n        </div>\n      </Host>\n    )\n  }\n}\n","@import \"stylesheets/sdx/typography/typography\";\n@import \"stylesheets/sdx/utilities/bg-color\";\n\n$spacing-to-window-mobile: 0px;\n$spacing-to-window-desktop: $baseline * 8;\n$spacing-close-button: 10px; // fine adjustment to get exactly 16px spacing to inner \"X\"\n$spacing-to-top-mobile: $baseline-6;\n$header-height: $baseline * 10;\n$header-height-notification: 122px + 56px; // .notification.gradient + .notification-headline\n\n// returns SVG that looks like a half moon and is colored\n@function svg-background($color: #000000) {\n  // because it is not possible to set a hash value to fill svg attribute convert it\n  $color: \"rgb(\" + red($color) + \", \" + green($color) + \", \" + blue($color) +\n    \")\";\n  @return url('data:image/svg+xml;charset=UTF-8,<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" viewBox=\"0 0 360 122\" fill=\"' + $color + '\"><path d=\"M0,83.9V0h360v84.5C319,107.3,253.9,122,180.5,122C106.5,122,40.9,107,0,83.9z\"/></svg>');\n}\n\n@mixin max-height($header-height) {\n  max-height: calc(\n    var(--sdx-dialog-window-inner-height, 100vh) - #{$spacing-to-window-mobile} -\n      #{$header-height} - #{$spacing-to-top-mobile}\n  );\n\n  @include bp-sm {\n    max-height: calc(\n      var(--sdx-dialog-window-inner-height, 100vh) - #{$spacing-to-window-desktop} -\n        #{$header-height}\n    );\n  }\n}\n\n// just set width in case no col-* class is set\n:host(:not([class*=\"col-\"])) {\n  .component {\n    // on mobiles always stretch to full width\n    width: calc(100vw - #{$spacing-to-window-mobile});\n\n    @include bp-sm {\n      width: auto;\n    }\n  }\n}\n\n:host {\n  display: none;\n\n  // \"!important\" needed to overwrite col-* styles\n  padding-left: $spacing-to-window-mobile * 0.5 !important;\n  padding-right: $spacing-to-window-mobile * 0.5 !important;\n\n  @include bp-sm {\n    padding-left: $spacing-to-window-desktop * 0.5 !important;\n    padding-right: $spacing-to-window-desktop * 0.5 !important;\n  }\n}\n\n.component {\n  background: white;\n  box-shadow: 0 0 4px rgba($color-black, 0.2);\n  min-height: max(300px, 60vh);\n  border-radius: $border-radius-large $border-radius-large 0 0;\n\n  &.fixed-height {\n    // workaround to avoid soft keyboards to overlap, see SDX-1461\n    min-height: 70vh; // measured with an iPad Air in landscape\n  }\n\n  @include bp-sm {\n    border-radius: $border-radius-large;\n    min-height: unset;\n  }\n\n  &.notification {\n    .notification-header {\n      position: relative; // for sdx-button\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      height: 122px;\n      color: $color-white;\n      border-radius: $border-radius-large;\n      background-size: 100% 100%; // for firefox\n\n      @include bp-xs-max {\n        border-radius: $border-radius-large $border-radius-large 0 0;\n      }\n\n      &.alert {\n        background-image: svg-background($color-int-red);\n      }\n\n      &.warning {\n        background-image: svg-background($color-int-orange);\n      }\n\n      &.general {\n        background-image: svg-background($color-int-blue);\n      }\n\n      &.confirmation {\n        background-image: svg-background($color-int-green);\n      }\n\n      &.gradient {\n        @extend .bg-gradient-2;\n        // Chrome does not support \"mask-image\" yet\n        -webkit-mask-image: svg-background();\n        // Chrome workaround for a render bug because of \"border-radius\"\n        -webkit-mask-size: 100.1%;\n        mask-image: svg-background();\n        mask-size: 100% 100%;\n\n        @include media-breakpoint-down(xs) {\n          -webkit-mask-size: 450px 100%;\n          mask-size: 450px 100%;\n          -webkit-mask-position: center center;\n          mask-position: center center;\n        }\n      }\n\n      sdx-button {\n        position: absolute;\n        right: $spacing-close-button;\n        top: $spacing-close-button;\n      }\n\n      sdx-icon {\n        font-size: 80px; // from figma\n      }\n    }\n\n    .headline {\n      display: flex;\n      justify-content: center;\n      padding: $baseline-3 $baseline-2 0;\n\n      .h2 {\n        @include line-clamp(2);\n        margin-bottom: 0; // because .slot has it's own padding\n        color: $color-sc-navy;\n        text-align: center;\n      }\n\n      @include bp-sm {\n        padding: $baseline-5 $baseline-4 0;\n      }\n    }\n\n    .slot {\n      @include max-height($header-height-notification);\n\n      padding: $baseline-3 $baseline-2;\n\n      @include bp-sm {\n        padding: $baseline-3 $baseline-4;\n      }\n    }\n  }\n\n  .header {\n    display: flex;\n    height: $header-height;\n    padding-left: $baseline-3;\n    justify-content: space-between;\n\n    .label-wrapper {\n      display: flex;\n      align-items: center;\n      color: $color-navy;\n      padding-right: $baseline-3;\n\n      .h4 {\n        @include line-clamp(2);\n        margin-bottom: 0;\n        color: $color-sc-navy;\n      }\n\n      sdx-icon {\n        margin-left: -3px; // -3px fine adjustment\n        margin-right: $baseline;\n      }\n    }\n\n    sdx-button {\n      padding: $spacing-close-button $spacing-close-button 0 0;\n      height: fit-content; // otherwise it gets height of flex row\n    }\n  }\n\n  .slot {\n    @include scroll-y;\n    @include max-height($header-height);\n    position: relative; // position outlets correctly (if any)\n    padding: $baseline-3;\n  }\n}\n\n.component.sdx--dark-theme {\n  background: $color-dusk-tint-4-dark-theme;\n\n  &.notification {\n    .notification-header {\n      color: $color-gray-dark-theme;\n\n      &.alert {\n        background-image: svg-background($color-int-red-dark-theme);\n      }\n\n      &.warning {\n        background-image: svg-background($color-int-orange-dark-theme);\n      }\n\n      &.general {\n        background-image: svg-background($color-int-blue-dark-theme);\n      }\n\n      &.confirmation {\n        background-image: svg-background($color-int-green-dark-theme);\n      }\n    }\n\n    .headline {\n      .h2 {\n        color: $color-gray-dark-theme;\n      }\n    }\n  }\n\n  .header {\n    .label-wrapper {\n      color: $color-gray-dark-theme;\n\n      .h4 {\n        color: $color-gray-dark-theme;\n      }\n    }\n  }\n}\n","import {\n  Component,\n  h,\n  Element,\n  State,\n  Watch,\n  Fragment,\n  Listen,\n  Prop,\n} from \"@stencil/core\"\nimport {\n  dialogReducer,\n  getInitialState,\n  DialogState,\n  DialogActions,\n} from \"../dialog-store\"\nimport {\n  StoreConnection,\n  StateHandle,\n  disableBodyScroll,\n  enableBodyScroll,\n  setCssVariableWindowInnerHeight,\n  getAppearance,\n} from \"../../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-dialog-content\",\n  styleUrl: \"dialog-content.scss\",\n  shadow: true,\n})\nexport class DialogContent {\n  private store: StoreConnection<this, DialogState, DialogActions>\n  private closeButtonEl?: HTMLSdxButtonElement\n  private contentEl?: HTMLDivElement\n  private fixedHeightAfterFirstOpen = 0\n\n  @Element() public el!: HTMLSdxDialogContentElement\n\n  @State() public state!: StateHandle<DialogState>\n\n  /**\n   * If sdx-select opens a dialog the height should be fixed. A filterable\n   * select changes dialog height if user filters.\n   * @private\n   */\n  @Prop() public fixedHeight: boolean = false\n\n  @Watch(\"state\")\n  public stateChanged({}, prev: StateHandle<DialogState>) {\n    const state = this.state.get()\n    const prevState = prev.get()\n\n    if (state.display !== prevState.display) {\n      this.displayChanged(state)\n    }\n  }\n\n  @Listen(\"resize\", { target: \"window\" })\n  public onWindowResize() {\n    const { display } = this.state.get()\n\n    this.fixedHeightAfterFirstOpen = 0\n\n    if (display === \"open\") {\n      setCssVariableWindowInnerHeight()\n    }\n  }\n\n  constructor() {\n    this.store = new StoreConnection(this, dialogReducer, getInitialState(), [\n      \"label\",\n      \"type\",\n      \"iconName\",\n      \"iconColorClass\",\n      \"display\",\n      \"toggle\",\n      \"notificationType\",\n    ])\n  }\n\n  public connectedCallback() {\n    // Register self\n    this.store.set(\"contentEl\", this.el)\n  }\n\n  public disconnectedCallback() {\n    // Unregister self\n    this.store.set(\"contentEl\", undefined)\n  }\n\n  public componentDidLoad() {\n    this.store.subscribe()\n  }\n\n  private displayChanged(state: DialogState) {\n    switch (state.display) {\n      case \"opening\":\n        setCssVariableWindowInnerHeight()\n        disableBodyScroll()\n        break\n\n      case \"open\":\n        const {\n          fixedHeight,\n          fixedHeightAfterFirstOpen,\n          contentEl,\n          el,\n          closeButtonEl,\n        } = this\n\n        if (fixedHeight && contentEl && !fixedHeightAfterFirstOpen) {\n          const contentElHeight = contentEl.getBoundingClientRect().height\n\n          contentEl.style.height = `${contentElHeight}px`\n          this.fixedHeightAfterFirstOpen = contentElHeight\n        }\n\n        // do not steal focus from child elements (e.g. select filter input field)\n        if (!el.contains(document.activeElement)) {\n          closeButtonEl?.doFocus()\n        }\n\n        break\n\n      case \"closed\":\n        enableBodyScroll()\n        break\n\n      default:\n        break\n    }\n  }\n\n  private getComponentClassNames() {\n    const { notificationType } = this.state.get()\n\n    return {\n      component: true,\n      [getAppearance(this.el)]: true,\n      notification: !!notificationType,\n      \"fixed-height\": this.fixedHeight,\n    }\n  }\n\n  private getNotificationHeaderClass() {\n    const { notificationType } = this.state.get()\n\n    return {\n      \"notification-header\": true,\n      [`${notificationType}`]: true,\n    }\n  }\n\n  private toggle() {\n    this.store.set(\"userInteractionInProgress\", true)\n    this.state.get().toggle()\n    this.store.set(\"userInteractionInProgress\", false)\n  }\n\n  private createClosebutton(dark: boolean) {\n    return (\n      <sdx-button\n        theme=\"transparent\"\n        iconName=\"icon-close\"\n        iconSize={2}\n        srHint=\"close dialog\"\n        background={dark ? \"dark\" : undefined}\n        onClick={() => this.toggle()}\n        ref={(el) => (this.closeButtonEl = el)}\n      />\n    )\n  }\n\n  public render() {\n    const {\n      label,\n      type: typeState,\n      notificationType,\n      iconName,\n      iconColorClass,\n    } = this.state.get()\n\n    return (\n      <div\n        ref={(el) => (this.contentEl = el)}\n        class={this.getComponentClassNames()}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"sdx-dialog-content-label\"\n        aria-describedby=\"sdx-dialog-content-description\"\n      >\n        <sdx-trap-focus\n          firstFocusableElement={this.closeButtonEl}\n          lang={this.el.lang}\n        >\n          {\n            // modal with default header\n            !notificationType && (\n              <div class=\"header\">\n                <div class=\"label-wrapper\">\n                  {iconName && (\n                    <sdx-icon\n                      iconName={iconName}\n                      colorClass={iconColorClass}\n                      size={2}\n                    />\n                  )}\n\n                  <h1 class=\"h4\" id=\"sdx-dialog-content-label\">\n                    {label}\n                  </h1>\n                </div>\n\n                {typeState === \"closable-modal\" &&\n                  this.createClosebutton(false)}\n              </div>\n            )\n          }\n\n          {\n            // modal with \"notification-type\"\n            notificationType && (\n              <Fragment>\n                <div class={this.getNotificationHeaderClass()}>\n                  {iconName && <sdx-icon iconName={iconName} />}\n                  {typeState === \"closable-modal\" &&\n                    this.createClosebutton(true)}\n                </div>\n\n                {label && (\n                  <div class=\"headline\">\n                    <h1 class=\"h2\" id=\"sdx-dialog-content-label\">\n                      {label}\n                    </h1>\n                  </div>\n                )}\n              </Fragment>\n            )\n          }\n\n          {/* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */}\n          <div class=\"slot\" id=\"sdx-dialog-content-description\" tabindex={0}>\n            <slot />\n          </div>\n        </sdx-trap-focus>\n      </div>\n    )\n  }\n}\n",null,"import { Component, h, Element, Listen, State } from \"@stencil/core\"\nimport {\n  dialogReducer,\n  getInitialState,\n  DialogActions,\n  DialogState,\n} from \"../dialog-store\"\nimport {\n  StoreConnection,\n  StateHandle,\n} from \"../../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-dialog-toggle\",\n  styleUrl: \"dialog-toggle.scss\",\n  shadow: true,\n})\nexport class DialogToggle {\n  private store: StoreConnection<this, DialogState, DialogActions>\n\n  @Element() public el!: HTMLSdxDialogToggleElement\n\n  @State() public state!: StateHandle<DialogState>\n\n  @Listen(\"click\")\n  public onClick() {\n    this.store.set(\"userInteractionInProgress\", true)\n    this.state.get().toggle()\n    this.store.set(\"userInteractionInProgress\", false)\n  }\n\n  constructor() {\n    this.store = new StoreConnection(this, dialogReducer, getInitialState(), [\n      \"toggle\",\n    ])\n  }\n\n  public connectedCallback() {\n    // Register self\n    this.store.set(\"toggleEl\", this.el)\n  }\n\n  public disconnectedCallback() {\n    // Unregister self\n    this.store.set(\"toggleEl\", undefined)\n  }\n\n  public componentDidLoad() {\n    this.store.subscribe()\n  }\n\n  public render() {\n    return <slot />\n  }\n}\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["breakpoints","xs","sm","md","lg","xl","ul","bp","breakpoint","window","innerWidth","dialogReducer","state","action","type","getInitialState","label","iconColorClass","display","toggle","Promise","resolve","contentEl","undefined","toggleEl","notificationType","userInteractionInProgress","Dialog","animationDuration","animationDurationMobile","invokeDisplayChangeCallback","this","setInvokeDisplayChangeCallback","store","StoreConnection","set","iconName","bind","getNotificationType","flush","prev","get","prevState","displayChanged","close","open","setDisplay","appendToOverlayOutlet","sdxBackdropEl","getOverlayOutletEl","el","append","anime","opacity","scale","maxHeight","duration","getAnimationDuration","easing","complete","add","targets","backdropFilter","innerHeight","componentEl","e","KeyboardEvent","key","composedPath","includes","subscribe","sdxdisplaychange","emit","parseFunction","displayChangeCallback","animated","gradient","h","Host","class","ref","DialogContent","fixedHeightAfterFirstOpen","setCssVariableWindowInnerHeight","disableBodyScroll","fixedHeight","closeButtonEl","contentElHeight","getBoundingClientRect","height","style","contains","document","activeElement","doFocus","enableBodyScroll","component","getAppearance","dark","theme","iconSize","srHint","background","onClick","typeState","getComponentClassNames","role","firstFocusableElement","lang","colorClass","size","id","createClosebutton","Fragment","getNotificationHeaderClass","tabindex","DialogToggle","_objectDestructuringEmpty","obj","TypeError"],"sourceRoot":""}