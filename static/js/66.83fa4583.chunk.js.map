{"version":3,"file":"static/js/66.83fa4583.chunk.js","mappings":"0JASO,IAAMA,EAA2B,CACtCC,GAAI,EACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KACJC,GAAI,KACJC,GAAI,M,SAGUC,EAAGC,GACjB,OAAOC,OAAOC,YAAcV,EAAYQ,K,2JCd1BG,EAAOC,EAAWC,GAChC,OAAKD,EAAKE,SAASD,GAIZD,EAHL,kBAAWA,GAAX,CAAiBC,I,SAWLE,EAAUH,EAAWC,GACnC,OAAID,EAAKE,SAASD,GACTD,EAAKI,QAAO,SAACC,GAAD,OAAiBA,IAAgBJ,KAG/CD,E,SASOM,EAAUN,EAAWC,GACnC,OAAKD,EAAKE,SAASD,GAIZE,EAAOH,EAAMC,GAHXF,EAAIC,EAAMC,G,SAYLM,EACdC,EACAC,GAEA,IAAIC,EAAkC,GAEtC,IAAK,IAAMC,KAAOH,EAChBE,GAAS,kBAAKA,GAAWD,EAAGE,EAAKH,EAAIG,KAGvC,OAAOD,I,6PCnCIE,EAGT,WAAwC,IAAvCC,EAAuC,uDAA/B,GAAyBC,EAAM,uCAC1C,OAAQA,EAAOC,MACb,IAAK,cACH,yBACKF,GADL,IAEEG,SAASjB,EAAAA,EAAAA,GAAIc,EAAMG,QAASF,EAAOG,QAAQC,KACzCC,EAAAA,KAIN,IAAK,iBACH,yBACKN,GADL,IAEEG,SAASb,EAAAA,EAAAA,GAAOU,EAAMG,QAASF,EAAOG,QAAQC,KAC5CC,EAAAA,KAIN,IAAK,YACH,IAAQC,EAAUN,EAAVM,MACJC,EAAWD,EAQf,OANIE,MAAMF,IAAUA,EAAQ,EAC1BC,EAAW,EACFD,EAAQP,EAAMG,QAAQO,SAC/BF,EAAWR,EAAMG,QAAQO,SAG3B,kBAAYV,GAAZ,IAAmBO,MAAOC,IAE5B,QACE,OAAOR,ICvDb,IC+BaW,EAAY,WAmJvB,+B,eAhJQ,KAAAC,iBAAqD,GAErD,KAAAC,yBAAqC,kBAAM,MAC3C,KAAAC,eAAiB7B,W,6BAiBuB,E,yCAclB,E,YAKE,G,WAOiC,aAmG/D8B,KAAKC,MAAQ,IAAIC,EAAAA,EACfF,KACAhB,EFzHG,CACLI,QAAS,GACTI,MAAO,EACPW,2BAA2B,EAC3BC,KAAM,aACNC,MAAO,YEsHL,CAAC,UAAW,QAAS,UAGvBL,KAAKC,MAAMK,IAAI,QAASN,KAAKR,OAC7BQ,KAAKO,8BACLP,KAAKC,MAAMO,QA7JU,2CAoDhB,WACLR,KAAKR,MAAQQ,KAAKf,MAAMwB,MAAMjB,QArDT,6DAyDhB,aAAuBkB,GAAvB,wFACiCV,KAAKf,MAAMwB,MAAzCN,EADH,EACGA,0BAERH,KAAKC,MAAMU,SAAS,CAAExB,KAAM,YAAaK,MAAOQ,KAAKR,QAEjC,QAApB,EAAAQ,KAAKY,uBAAeC,IAAAA,GAAAA,EAAEC,cACpBd,KAAKe,GACLf,KAAKgB,aAAahB,KAAKR,MAAQ,IAG7BW,IACFc,EAAAA,EAAAA,GAAcjB,KAAKe,GAAInB,EAAasB,YAGtClB,KAAKF,yBAAyBE,KAAKR,MAAOkB,GAdrC,gDAzDgB,gGA2EhB,WACLV,KAAKO,gCA5EgB,yBAgFhB,WACLP,KAAKC,MAAMU,SAAS,CAAExB,KAAM,YAAaK,MAAOQ,KAAKmB,SAjFhC,qCAqFhB,WAAuB,WACxBnB,KAAKoB,aACPC,aAAarB,KAAKoB,aAGpBpB,KAAKoB,YAAcE,YAAW,WAC5B,EAAKC,YACLC,EAAAA,EAAAA,GAAY,EAAKT,MAChB,MA7FkB,uDAqGhB,8EACLf,KAAKuB,WACLvB,KAAKyB,uBAFA,gDArGgB,+GA8GhB,wFACezB,KAAKf,MAAMwB,MAAvBrB,EADH,EACGA,QAEJY,KAAKR,MAAQJ,EAAQO,QACvBK,KAAKC,MAAMU,SAAS,CAAExB,KAAM,YAAaK,MAAOQ,KAAKR,MAAQ,IAJ1D,gDA9GgB,mHA0HhB,8EACDQ,KAAKR,MAAQ,GACfQ,KAAKC,MAAMU,SAAS,CAAExB,KAAM,YAAaK,MAAOQ,KAAKR,MAAQ,IAF1D,gDA1HgB,oHAqIhB,uGACEQ,KAAKR,OADP,gDArIgB,oHA+IhB,WAAoBkC,GAApB,iEACL1B,KAAKC,MAAMU,SAAS,CAAExB,KAAM,YAAaK,MAAOkC,IAD3C,gDA/IgB,yHAgKhB,0GAECC,EAAAA,EAAAA,IAAQ,kBAAM,EAAK1C,MAAMwB,MAAMrB,QAAQO,OAAS,KAFjD,OAqBDK,KAAKf,MAAMwB,MAAMrB,QAAQwC,MAAK,SAACb,GAAD,OAAQA,EAAGc,UAC3C7B,KAAKC,MAAMK,IAAI,OAAQ,YAIzBN,KAAKuB,WA1BA,gDAhKgB,oFA6LhB,WACLvB,KAAKyB,uBACLzB,KAAKC,MAAM6B,cA/LU,gCAkMhB,WACD5D,aAAe8B,KAAKD,iBAGtBC,KAAKyB,uBAELzB,KAAKD,eAAiB7B,cAxMH,yCA4Mf,WACN8B,KAAKF,0BAA2BiC,EAAAA,EAAAA,GAAc/B,KAAKgC,sBA7M9B,sBAgNf,WACN,IAAI3B,EAAQL,KAAKK,MAEH,eAAVA,IACFA,GAAQtC,EAAAA,EAAAA,GAAG,MAAQ,aAAe,YAIN,eAA1BiC,KAAKf,MAAMwB,MAAML,OACnBC,EAAQ,cAGVL,KAAKC,MAAMK,IAAI,QAASD,KA5NH,wBAkOf,WACN,MAAiCL,KAAKf,MAAMwB,MAApCrB,EAAR,EAAQA,QAASgB,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,MAEvB,MAAa,aAATD,GAAiC,eAAVC,EAClBL,KAAKH,iBAGPT,IAzOc,kCA4Of,W,MAIAA,EAAUY,KAAKgB,aAErB,GAAK5B,EAAQO,OAAb,CAKAP,EAAQ6C,SAAQ,SAAClB,GAAD,OAASA,EAAGmB,MAAMC,MAAQ,UAE1C,IAAIC,EAAqBpC,KAAKoC,mBAKzBA,IACHA,EAAqBC,KAAKC,IAAL,MAAAD,MAAI,OAAQjD,EAAQmD,KAAI,SAACxB,GAAD,OAAQA,EAAGyB,iBACxDxC,KAAKoC,mBAAqBA,GAIxBA,EAvBiB,IAwBnBA,EAxBmB,IAyBVA,EAxBU,MAyBnBA,EAzBmB,KA4BrBhD,EAAQ6C,SAAQ,SAAClB,GAAD,OAASA,EAAGmB,MAAMC,MAAT,UAAoBC,EAApB,SAEL,QAApB,EAAApC,KAAKY,uBAAeC,IAAAA,GAAAA,EAAE4B,YA5QD,oCA+Qf,WAAsB,MAC5B,EAAwBzC,KAAKf,MAAMwB,MAA3BL,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,UACEqC,WAAW,IADb,SAEGtC,GAAO,IAFV,SAGGC,GAAQ,GAHX,IAlRqB,oBAyRhB,WAAM,WACX,EAAiCL,KAAKf,MAAMwB,MAApCrB,EAAR,EAAQA,QAASgB,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,MAKvB,OAFAL,KAAKH,iBAAmB,IAGtB8C,EAAAA,EAAAA,GAAAA,MAAAA,CACEC,MAAO5C,KAAK6C,yBACZC,KAAK,QAAO,aACA9C,KAAK+C,QAEN,eAAV1C,IACCsC,EAAAA,EAAAA,GAAAA,kBAAAA,CACEK,iBAAkB,EAClBC,IAAK,SAAClC,GAAD,OAAS,EAAKH,gBAAkBG,KAErC4B,EAAAA,EAAAA,GAAAA,MAAAA,CAAKC,MAAM,eAAeE,KAAK,QACnB,aAAT1C,EACChB,EAAQmD,KAAI,SAACxB,GAAD,OACV4B,EAAAA,EAAAA,GAAAA,yBAAAA,CACEO,WAAYnC,EACZkC,IAAK,SAAClC,GACAA,GACF,EAAKlB,iBAAiBsD,KAAKpC,UAMnC4B,EAAAA,EAAAA,GAAAA,OAAAA,SAMRA,EAAAA,EAAAA,GAAAA,OAAAA,SA7TiB,yB,uBAAA,gC,gIAAA,KAcR/C,EAAAA,WAAa,Q,QD7CN,gJEAxB,IC6BawD,EAAgB,WA+C3B,+B,eA7CQ,KAAAC,wBAAoC,kBAAM,M,kIA8ChDrD,KAAKC,MAAQ,IAAIC,EAAAA,EACfF,KACAhB,EJnBG,CACLI,QAAS,GACTI,MAAO,EACPW,2BAA2B,EAC3BC,KAAM,aACNC,MAAO,YIgBL,CAAC,UAAW,QAAS,OAAQ,UAG/BL,KAAKsD,6BAvDoB,uDA2CpB,WACLtD,KAAKsD,+BA5CoB,+BA0DpB,WACAtD,KAAKkD,YACRlD,KAAKC,MAAMU,SAAS,CAAExB,KAAM,cAAeE,OAAQW,KAAKe,OA5DjC,kCAgEpB,WACAf,KAAKkD,YACRlD,KAAKC,MAAMU,SAAS,CAAExB,KAAM,iBAAkBE,OAAQW,KAAKe,OAlEpC,8BAsEpB,WACLf,KAAKC,MAAM6B,cAvEc,wCA0EnB,WACN9B,KAAKqD,yBAA0BtB,EAAAA,EAAAA,GAAc/B,KAAKuD,qBA3EzB,qBA8EnB,WACNvD,KAAKC,MAAMK,IAAI,6BAA6B,GAE5CN,KAAKC,MAAMU,SAAS,CAClBxB,KAAM,YACNK,MAAOQ,KAAKwD,gBAGdxD,KAAKC,MAAMK,IAAI,6BAA6B,GAE5CN,KAAKqD,4BAxFoB,yBA2FnB,WACN,IAAMtC,EAAKf,KAAKkD,YAAclD,KAAKe,GAEnC,OAAOf,KAAKf,MAAMwB,MAAMrB,QAAQqE,QAAQ1C,GAAM,IA9FrB,sBAiGnB,W,QACN,OAA6B,QAAtB,EAAe,QAAf,EAAAf,KAAKkD,kBAAUrC,IAAAA,OAAA,EAAAA,EAAEgB,aAAK6B,IAAAA,EAAAA,EAAI1D,KAAK6B,QAlGb,wBAqGnB,W,QACN,OAA+B,QAAxB,EAAe,QAAf,EAAA7B,KAAKkD,kBAAUrC,IAAAA,OAAA,EAAAA,EAAE8C,eAAOD,IAAAA,EAAAA,EAAI1D,KAAK2D,UAtGf,yBAyGnB,WACN,OAAO3D,KAAKf,MAAMwB,MAAMjB,MAAQQ,KAAKwD,gBA1GZ,sBA6GnB,WACN,OAAOxD,KAAKf,MAAMwB,MAAMjB,QAAUQ,KAAKwD,gBA9Gd,yBAiHnB,WACN,OAAOxD,KAAKf,MAAMwB,MAAMjB,MAAQQ,KAAKwD,gBAlHZ,yBAqHnB,WACN,MAAwBxD,KAAKf,MAAMwB,MAA3BL,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,MAAgB,aAATD,GAAiC,eAAVC,IAA2BL,KAAKkD,aAxHrC,oCA2HnB,WAAsB,MAC5B,EAAwBlD,KAAKf,MAAMwB,MAA3BL,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,UACEqC,WAAW,EACXkB,UAAW5D,KAAK6D,cAChBC,OAAQ9D,KAAK+D,WACbC,UAAWhE,KAAKiE,cAChB,0BAAqC,aAAV5D,IAL7B,SAMGD,GAAO,IANV,SAOGC,GAAQ,IAPX,UAQG6D,EAAAA,EAAAA,GAAclE,KAAKe,KAAM,GAR5B,IA9HyB,oBA0IpB,WAAM,WACLoD,EAAWnE,KAAKwD,cAEtB,OACEb,EAAAA,EAAAA,GAACyB,EAAAA,EAAI,CAACtB,KAAK,aACTH,EAAAA,EAAAA,GAAAA,MAAAA,CAAKC,MAAO5C,KAAK6C,2BACb7C,KAAKqE,gBACL1B,EAAAA,EAAAA,GAAC2B,EAAAA,EAAQ,MACP3B,EAAAA,EAAAA,GAAAA,MAAAA,CAAKC,MAAM,mBAEXD,EAAAA,EAAAA,GAAAA,SAAAA,CACEC,MAAM,sBACN2B,QAAS,kBAAM,EAAKA,WACpBC,UAAWxE,KAAKiE,cAAa,wBACdQ,EAAAA,EAAAA,GACb,WACAzE,KAAKe,GAAG2D,MAHmB,YAIxBP,KAELxB,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,MAAM,YACT5C,KAAKiE,eACJtB,EAAAA,EAAAA,GAAAA,WAAAA,CACEC,MAAM,kBACN+B,SAAS,oBAGX3E,KAAKwD,gBAITb,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,MAAM,SACiB,aAA1B5C,KAAKf,MAAMwB,MAAML,KAChBJ,KAAK4E,YAGLjC,EAAAA,EAAAA,GAAAA,OAAAA,MAGD3C,KAAKiE,eAAiBjE,KAAK6E,eAC1BlC,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,MAAM,WACT5C,KAAK6E,aAAc,KACpBlC,EAAAA,EAAAA,GAAAA,WAAAA,CAAUC,MAAM,YAAY+B,SAAS,mBAQ/C3E,KAAKkD,aACLP,EAAAA,EAAAA,GAAAA,MAAAA,CAAKC,MAAM,SACTD,EAAAA,EAAAA,GAAAA,OAAAA,WA7Le,yB,uBAAA,gC,2DAAA,K,QD7BD,m2H,qBEAb,SAASmC,EAA0BlG,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAImG,UAAU,gC","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/core/helpers/breakpoint-helpers.ts","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/core/helpers/immutability-helpers.ts","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/progress-full/progress-full-store.ts","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/progress-full/progress-full.scss?tag=sdx-progress-full&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/progress-full/progress-full.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/progress-full/progress-full-step/progress-full-step.scss?tag=sdx-progress-full-step&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/progress-full/progress-full-step/progress-full-step.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["type Breakpoints = {\n  xs: 0\n  sm: 480\n  md: 768\n  lg: 1024\n  xl: 1280\n  ul: 1440\n}\n\nexport const breakpoints: Breakpoints = {\n  xs: 0,\n  sm: 480,\n  md: 768,\n  lg: 1024,\n  xl: 1280,\n  ul: 1440,\n}\n\nexport function bp(breakpoint: keyof Breakpoints) {\n  return window.innerWidth >= breakpoints[breakpoint]\n}\n","/**\n * Adds an item to a list, if it does not exist, yet.\n * @param list The array that might contain the given item.\n * @param item The element that should be added.\n */\nexport function add<I>(list: I[], item: I): I[] {\n  if (!list.includes(item)) {\n    return [...list, item]\n  }\n\n  return list\n}\n\n/**\n * Removes an item from a list, if it exists.\n * @param list The array that might contain the given item.\n * @param item The element that should be removed.\n */\nexport function remove<I>(list: I[], item: I): I[] {\n  if (list.includes(item)) {\n    return list.filter((currentItem) => currentItem !== item)\n  }\n\n  return list\n}\n\n/**\n * Adds an item to a list, if it does not exist, yet.\n * If it does exist, however, it removes it.\n * @param list The array that might contain the given item.\n * @param item The element that should be added or removed.\n */\nexport function toggle<I>(list: I[], item: I): I[] {\n  if (!list.includes(item)) {\n    return add(list, item)\n  }\n\n  return remove(list, item)\n}\n\n/**\n * Like Array map() but for objects.\n * Example: { foo: \"bar\" } => { foo1: \"bar1\" }\n * @param obj Object to iterate.\n * @param cb Callback that transforms key and value.\n */\nexport function objectMap(\n  obj: Record<string, unknown> | undefined,\n  cb: (key: string, value: unknown) => Record<string, unknown>\n): Record<string, unknown> {\n  let newObj: Record<string, unknown> = {}\n\n  for (const key in obj) {\n    newObj = { ...newObj, ...cb(key, obj[key]) }\n  }\n\n  return newObj\n}\n","import { Reducer } from \"redux\"\nimport { sortByAppearanceInDomTree } from \"../../core/helpers/webcomponent-helpers\"\nimport { add, remove } from \"../../core/helpers/immutability-helpers\"\nimport { Mode, Theme } from \"./types\"\n\nexport interface ProgressFullState {\n  stepEls: HTMLSdxProgressFullStepElement[]\n  value: number // the active step\n  userInteractionInProgress: boolean\n  mode: Mode\n  theme: Theme\n}\n\nexport type ProgressFullActions =\n  | { type: \"ADD_STEP_EL\"; stepEl: HTMLSdxProgressFullStepElement }\n  | { type: \"REMOVE_STEP_EL\"; stepEl: HTMLSdxProgressFullStepElement }\n  | {\n      type: \"SET_VALUE\"\n      value: ProgressFullState[\"value\"]\n    }\n\nexport const progressFullReducer: Reducer<\n  ProgressFullState,\n  ProgressFullActions\n> = (state = {} as ProgressFullState, action): ProgressFullState => {\n  switch (action.type) {\n    case \"ADD_STEP_EL\":\n      return {\n        ...state,\n        stepEls: add(state.stepEls, action.stepEl).sort(\n          sortByAppearanceInDomTree\n        ),\n      }\n\n    case \"REMOVE_STEP_EL\":\n      return {\n        ...state,\n        stepEls: remove(state.stepEls, action.stepEl).sort(\n          sortByAppearanceInDomTree\n        ),\n      }\n\n    case \"SET_VALUE\":\n      const { value } = action\n      let newValue = value\n\n      if (isNaN(value) || value < 1) {\n        newValue = 1\n      } else if (value > state.stepEls.length) {\n        newValue = state.stepEls.length\n      }\n\n      return { ...state, value: newValue }\n\n    default:\n      return state\n  }\n}\n\nexport function getInitialState(): ProgressFullState {\n  return {\n    stepEls: [],\n    value: 1,\n    userInteractionInProgress: false,\n    mode: \"standalone\",\n    theme: \"vertical\",\n  }\n}\n",".component {\n  &.standalone,\n  &.holistic.horizontal {\n    .step-wrapper {\n      display: flex;\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  h,\n  Method,\n  Prop,\n  State,\n  Watch,\n  Listen,\n  forceUpdate,\n} from \"@stencil/core\"\nimport {\n  dispatchEvent,\n  parseFunction,\n  StateHandle,\n  StoreConnection,\n  waitFor,\n} from \"../../core/helpers/webcomponent-helpers\"\nimport {\n  ProgressFullActions,\n  ProgressFullState,\n  getInitialState,\n  progressFullReducer,\n} from \"./progress-full-store\"\nimport { bp } from \"../../core/helpers/breakpoint-helpers\"\n\n@Component({\n  tag: \"sdx-progress-full\",\n  styleUrl: \"progress-full.scss\",\n  shadow: true,\n})\nexport class ProgressFull {\n  private store: StoreConnection<this, ProgressFullState, ProgressFullActions>\n  private sdxScrollViewEl?: HTMLSdxScrollViewElement\n  private generatedStepEls: HTMLSdxProgressFullStepElement[] = []\n  private widestStepsElWidth?: number\n  private invokeStepChangeCallback: Function = () => null\n  private lastInnerWidth = innerWidth\n  private resizeTimer?: NodeJS.Timer\n\n  /**\n   * Emitted when a user clicks on the button or description of a completed\n   * step.\n   * @event\n   */\n  private static eventInput = \"input\"\n\n  @Element() public el!: HTMLSdxProgressFullElement\n\n  @State() public state!: StateHandle<ProgressFullState>\n\n  /**\n   * Can be used for both reading and setting the value.\n   */\n  @Prop({ mutable: true }) public value: number = 1\n\n  /**\n   * Triggered when the active step was changed.\n   * @deprecated use input event instead.\n   */\n  @Prop() public stepChangeCallback?:\n    | ((value: number, previousActiveStep?: number) => void)\n    | string\n\n  /**\n   * Initially active step.\n   * @deprecated Use `value` property instead.\n   */\n  @Prop() public step: number = 1\n\n  /**\n   * Text for screen readers which describes the progress bar.\n   */\n  @Prop() public srHint: string = \"\"\n\n  /**\n   * When `responsive`, the layout automatically switches from horizontal to\n   * vertical on mobile screens. This only works if the steps have the `label`\n   * property set.\n   */\n  @Prop() public theme: \"responsive\" | \"horizontal\" | \"vertical\" = \"responsive\"\n\n  @Watch(\"state\")\n  public stateChanged() {\n    this.value = this.state.get().value\n  }\n\n  @Watch(\"value\")\n  public async valueChanged({}, prev: ProgressFullState[\"value\"]) {\n    const { userInteractionInProgress } = this.state.get()\n\n    this.store.dispatch({ type: \"SET_VALUE\", value: this.value })\n\n    this.sdxScrollViewEl?.centerElement(\n      this.el,\n      this.getStepEls()[this.value - 1]\n    )\n\n    if (userInteractionInProgress) {\n      dispatchEvent(this.el, ProgressFull.eventInput)\n    }\n\n    this.invokeStepChangeCallback(this.value, prev)\n  }\n\n  @Watch(\"stepChangeCallback\")\n  public stepChangeCallbackChanged() {\n    this.setInvokeStepChangeCallback()\n  }\n\n  @Watch(\"step\")\n  public stepChanged() {\n    this.store.dispatch({ type: \"SET_VALUE\", value: this.step })\n  }\n\n  @Listen(\"resize\", { target: \"window\" })\n  public onWindowResizeDebounced() {\n    if (this.resizeTimer) {\n      clearTimeout(this.resizeTimer)\n    }\n\n    this.resizeTimer = setTimeout(() => {\n      this.setTheme()\n      forceUpdate(this.el)\n    }, 10)\n  }\n\n  /**\n   * Draws the layout. Useful to redraw the component when initially\n   * rendered on a hidden parent (e.g. a tabs item).\n   */\n  @Method()\n  public async layout() {\n    this.setTheme()\n    this.setWidestStepElWidth()\n  }\n\n  /**\n   * Move to the next step (if possible).\n   */\n  @Method()\n  public async nextStep() {\n    const { stepEls } = this.state.get()\n\n    if (this.value < stepEls.length) {\n      this.store.dispatch({ type: \"SET_VALUE\", value: this.value + 1 })\n    }\n  }\n\n  /**\n   * Move to the previous step (if possible).\n   */\n  @Method()\n  public async previousStep() {\n    if (this.value > 1) {\n      this.store.dispatch({ type: \"SET_VALUE\", value: this.value - 1 })\n    }\n  }\n\n  /**\n   * Get the current active step.\n   * @deprecated Use `value` property instead.\n   */\n  @Method()\n  public async getActiveStep(): Promise<number> {\n    return this.value\n  }\n\n  /**\n   * Jump to step.\n   * @param index Index of the new active step.\n   * @deprecated Use `value` property instead.\n   */\n  @Method()\n  public async setActiveStep(index: number) {\n    this.store.dispatch({ type: \"SET_VALUE\", value: index })\n  }\n\n  constructor() {\n    this.store = new StoreConnection(\n      this,\n      progressFullReducer,\n      getInitialState(),\n      [\"stepEls\", \"value\", \"theme\"]\n    )\n\n    this.store.set(\"value\", this.value)\n    this.setInvokeStepChangeCallback()\n    this.store.flush()\n  }\n\n  public async componentWillLoad() {\n    // wait for all children to fix flaky test\n    await waitFor(() => this.state.get().stepEls.length > 0)\n\n    // The sdx-progress-full comes in two modes:\n    //\n    // \"standalone\": renders *only* the progress bar itself, but neither the\n    // individual step's content nor the transition between them.\n    // This is to be handled fully by the consumer.\n    // This mode is deprecated, but default, to be backwards compatible with the\n    // past where the step's slot content was solely used for passing the label's\n    // text content.\n    //\n    // \"holistic\": renders the progress bar itself, but also treats the\n    // individual step's slot content as pages and transitions between them (just\n    // like the sdx-tabs). For setting the label, the `label` property has to be\n    // used, which was added at the same time as `mode`. Furthermore, the layout\n    // automatically switches vertically if there's not enough space.\n    //\n    // The mode is automatically detected by the presence of the `label` property\n    // on at least one of the steps:\n    if (this.state.get().stepEls.some((el) => el.label)) {\n      this.store.set(\"mode\", \"holistic\")\n    }\n\n    // Now that the \"mode\" is set, calculate the theme\n    this.setTheme()\n  }\n\n  public componentDidLoad() {\n    this.setWidestStepElWidth()\n    this.store.subscribe()\n  }\n\n  public componentDidRender() {\n    if (innerWidth !== this.lastInnerWidth) {\n      // Calling setWidestStepElWidth() in componentDidRender() because it\n      // reads values from the rendered elements\n      this.setWidestStepElWidth()\n\n      this.lastInnerWidth = innerWidth\n    }\n  }\n\n  private setInvokeStepChangeCallback(): void {\n    this.invokeStepChangeCallback = parseFunction(this.stepChangeCallback)\n  }\n\n  private setTheme(): void {\n    let theme = this.theme\n\n    if (theme === \"responsive\") {\n      theme = bp(\"sm\") ? \"horizontal\" : \"vertical\"\n    }\n\n    // \"standalone\" always has the horizontal layout\n    if (this.state.get().mode === \"standalone\") {\n      theme = \"horizontal\"\n    }\n\n    this.store.set(\"theme\", theme)\n  }\n\n  // Get the step elements.\n  // Either the \"original\" ones (= generated by consumers) or the generated\n  // ones (= generated by render()).\n  private getStepEls(): HTMLSdxProgressFullStepElement[] {\n    const { stepEls, mode, theme } = this.state.get()\n\n    if (mode === \"holistic\" && theme === \"horizontal\") {\n      return this.generatedStepEls\n    }\n\n    return stepEls\n  }\n\n  private setWidestStepElWidth(): void {\n    const minStepWidth = 100\n    const maxStepWidth = 200 + 64 // $baseline * 8 added by CSS\n\n    const stepEls = this.getStepEls()\n\n    if (!stepEls.length) {\n      return\n    }\n\n    // Remove potential previous width to update measurements\n    stepEls.forEach((el) => (el.style.width = \"auto\"))\n\n    let widestStepsElWidth = this.widestStepsElWidth\n\n    // Only read the with when it hasn't done before, to prevent the width from\n    // changing during runtime. The layout should act stable. Otherwise just\n    // reapply the width that has already been read before.\n    if (!widestStepsElWidth) {\n      widestStepsElWidth = Math.max(...stepEls.map((el) => el.clientWidth))\n      this.widestStepsElWidth = widestStepsElWidth\n    }\n\n    // Clamp\n    if (widestStepsElWidth < minStepWidth) {\n      widestStepsElWidth = minStepWidth\n    } else if (widestStepsElWidth > maxStepWidth) {\n      widestStepsElWidth = maxStepWidth\n    }\n\n    stepEls.forEach((el) => (el.style.width = `${widestStepsElWidth}px`))\n\n    this.sdxScrollViewEl?.layout()\n  }\n\n  private getComponentClassNames() {\n    const { mode, theme } = this.state.get()\n\n    return {\n      component: true,\n      [mode]: true,\n      [theme]: true,\n    }\n  }\n\n  public render() {\n    const { stepEls, mode, theme } = this.state.get()\n\n    // Clear previous entries\n    this.generatedStepEls = []\n\n    return (\n      <div\n        class={this.getComponentClassNames()}\n        role=\"group\"\n        aria-label={this.srHint}\n      >\n        {theme === \"horizontal\" && (\n          <sdx-scroll-view\n            arrowPositionTop={8 /* align to progress-line */}\n            ref={(el) => (this.sdxScrollViewEl = el)}\n          >\n            <div class=\"step-wrapper\" role=\"list\">\n              {mode === \"holistic\" ? (\n                stepEls.map((el) => (\n                  <sdx-progress-full-step\n                    originalEl={el}\n                    ref={(el) => {\n                      if (el) {\n                        this.generatedStepEls.push(el)\n                      }\n                    }}\n                  />\n                ))\n              ) : (\n                <slot />\n              )}\n            </div>\n          </sdx-scroll-view>\n        )}\n\n        <slot />\n      </div>\n    )\n  }\n}\n","@import \"stylesheets/sdx/utilities/layout\";\n@import \"../../../globals/scss/button\";\n\n$button-size: 24px;\n\n:host {\n  // A step is a flex child of the parent.\n  // Ensure that all steps get the calculated width even if it exceeds 100%.\n  flex-shrink: 0;\n}\n\n:host(:last-of-type) {\n  .component {\n    .progress-line {\n      display: none;\n    }\n  }\n}\n\n.component {\n  position: relative; // .progress-line positioning\n\n  &.standalone,\n  &.holistic.horizontal {\n    &.remaining {\n      .button .position {\n        background: $color-white;\n        border-color: $color-gray;\n        color: $color-gray;\n      }\n    }\n\n    .progress-line {\n      width: 100%;\n      height: 1px;\n    }\n\n    .button {\n      flex-flow: column;\n\n      .label {\n        // Prevent .labels from touching each other\n        margin: $baseline $baseline * 8 0 0;\n      }\n    }\n  }\n\n  &.holistic {\n    .slot {\n      margin-top: $baseline-3;\n    }\n  }\n\n  &.holistic.vertical {\n    padding: $baseline-3 $baseline-3;\n\n    &.completed,\n    &.remaining {\n      background: $color-horizon;\n      border-radius: $border-radius-large;\n    }\n\n    &.completed {\n      margin-bottom: $baseline;\n    }\n\n    &.remaining {\n      margin-top: $baseline;\n\n      .button .position {\n        background: $color-gray-tint-4;\n        color: $color-white;\n      }\n    }\n\n    .button {\n      .label {\n        margin-left: $baseline-2;\n      }\n    }\n  }\n\n  &.completed {\n    .progress-line {\n      background: $color-int-green;\n    }\n  }\n\n  &.active {\n    .button .position {\n      background: $color-gray;\n      border-color: $color-gray;\n      color: $color-white;\n    }\n\n    .slot {\n      display: block;\n    }\n  }\n\n  &.completed {\n    .button {\n      &:hover {\n        .position {\n          background: $color-int-green--active;\n          border-color: $color-int-green--active;\n        }\n\n        .icon-edit {\n          color: $color-int-blue--active;\n        }\n      }\n\n      .position {\n        background: $color-int-green;\n        border-color: $color-int-green;\n        color: $color-white;\n      }\n\n      .icon-edit {\n        color: $color-int-blue;\n      }\n    }\n  }\n\n  .progress-line {\n    background: $color-gray-tint-7;\n    position: absolute;\n    top: $button-size * 0.5;\n    transition: background 150ms $standard-easing;\n    z-index: -1;\n  }\n\n  .button {\n    display: flex;\n    text-align: left;\n\n    .position {\n      border-radius: 50%;\n      height: $button-size;\n      width: $button-size;\n      flex-shrink: 0; // don't go below width\n      border: 1px solid transparent;\n\n      // Center number both horizontally and vertically\n      display: flex;\n      justify-content: center;\n      align-items: center;\n\n      // Apply transition from .button-reset\n      transition: inherit;\n    }\n\n    .position {\n      .icon-check-mark {\n        margin-top: 1px; // fine adjustment\n      }\n    }\n\n    .label {\n      @include typo-headline-5;\n      @include font-semi-bold;\n      display: flex;\n      flex-flow: column;\n\n      .summary {\n        @include text-small;\n        @include font-semi-light;\n      }\n    }\n  }\n\n  .slot {\n    display: none;\n  }\n}\n\n.component.sdx--dark-theme {\n  &.remaining {\n    .button .position {\n      background: $color-dusk-dark-theme;\n      border-color: $color-gray-dark-theme;\n      color: $color-gray-dark-theme;\n    }\n  }\n\n  &.completed {\n    .progress-line {\n      background: $color-int-green-dark-theme;\n    }\n  }\n\n  &.active {\n    .button .position {\n      background: $color-gray-dark-theme;\n      border-color: $color-gray-dark-theme;\n      color: $color-dusk-dark-theme;\n    }\n  }\n\n  &.completed {\n    .button {\n      &:hover {\n        .position {\n          border-color: $color-int-green-dark-theme--active;\n          background: $color-int-green-dark-theme--active;\n        }\n\n        .icon-edit {\n          color: $color-int-blue-dark-theme--active;\n        }\n      }\n\n      .position {\n        border-color: $color-int-green-dark-theme;\n        background: $color-int-green-dark-theme;\n      }\n\n      .icon-edit {\n        color: $color-int-blue-dark-theme;\n      }\n    }\n  }\n\n  .progress-line {\n    background: $color-gray-tint-8-dark-theme;\n  }\n}\n","import {\n  Component,\n  Element,\n  h,\n  State,\n  Prop,\n  Host,\n  Watch,\n  Fragment,\n} from \"@stencil/core\"\nimport {\n  getAppearance,\n  parseFunction,\n  StateHandle,\n  StoreConnection,\n  translate,\n} from \"../../../core/helpers/webcomponent-helpers\"\nimport {\n  ProgressFullActions,\n  ProgressFullState,\n  getInitialState,\n  progressFullReducer,\n} from \"../progress-full-store\"\n\n@Component({\n  tag: \"sdx-progress-full-step\",\n  styleUrl: \"progress-full-step.scss\",\n  shadow: true,\n})\nexport class ProgressFullStep {\n  private store: StoreConnection<this, ProgressFullState, ProgressFullActions>\n  private invokeStepClickCallback: Function = () => null\n\n  @Element() public el!: HTMLSdxProgressFullStepElement\n\n  @State() public state!: StateHandle<ProgressFullState>\n\n  /**\n   * A little description text displayed next to the step number.\n   * Preferably one word only, describing the step as accurately as possible.\n   */\n  @Prop() public label?: string\n\n  /**\n   * A brief text describing what's been done by the end user during proceeding\n   * through this step. An icon will be displayed highlighting that changes can\n   * be made afterwards.\n   */\n  @Prop() public summary?: string\n\n  /**\n   * Triggered when a user clicks on the button or description of a completed\n   * step.\n   * @deprecated use input event of sdx-progress-full instead.\n   */\n  @Prop() public stepClickCallback?: (() => void) | string\n\n  /**\n   * If this is set, it means that the current step element was rendered\n   * internally (by the parent rather than by the consumer) to act as a\n   * delegate. To still have access to all data added by the consumer (such as\n   * the `label`), a reference to the consumer's element is passed hereby.\n   * @private\n   */\n  @Prop() public originalEl?: HTMLSdxProgressFullStepElement\n\n  /**\n   * @private\n   */\n  @Prop() public position?: number\n\n  @Watch(\"stepClickCallback\")\n  public stepClickCallbackChanged() {\n    this.setInvokeStepClickCallback()\n  }\n\n  constructor() {\n    this.store = new StoreConnection(\n      this,\n      progressFullReducer,\n      getInitialState(),\n      [\"stepEls\", \"value\", \"mode\", \"theme\"]\n    )\n\n    this.setInvokeStepClickCallback()\n  }\n\n  public connectedCallback() {\n    if (!this.originalEl) {\n      this.store.dispatch({ type: \"ADD_STEP_EL\", stepEl: this.el })\n    }\n  }\n\n  public disconnectedCallback() {\n    if (!this.originalEl) {\n      this.store.dispatch({ type: \"REMOVE_STEP_EL\", stepEl: this.el })\n    }\n  }\n\n  public componentDidLoad() {\n    this.store.subscribe()\n  }\n\n  private setInvokeStepClickCallback(): void {\n    this.invokeStepClickCallback = parseFunction(this.stepClickCallback)\n  }\n\n  private onClick(): void {\n    this.store.set(\"userInteractionInProgress\", true)\n\n    this.store.dispatch({\n      type: \"SET_VALUE\",\n      value: this.getPosition(),\n    })\n\n    this.store.set(\"userInteractionInProgress\", false)\n\n    this.invokeStepClickCallback()\n  }\n\n  private getPosition(): number {\n    const el = this.originalEl || this.el\n\n    return this.state.get().stepEls.indexOf(el) + 1\n  }\n\n  private getLabel(): string | undefined {\n    return this.originalEl?.label ?? this.label\n  }\n\n  private getSummary(): string | undefined {\n    return this.originalEl?.summary ?? this.summary\n  }\n\n  private isRemaining(): boolean {\n    return this.state.get().value < this.getPosition()\n  }\n\n  private isActive(): boolean {\n    return this.state.get().value === this.getPosition()\n  }\n\n  private isCompleted(): boolean {\n    return this.state.get().value > this.getPosition()\n  }\n\n  private hasSlotOnly(): boolean {\n    const { mode, theme } = this.state.get()\n\n    return mode === \"holistic\" && theme === \"horizontal\" && !this.originalEl\n  }\n\n  private getComponentClassNames() {\n    const { mode, theme } = this.state.get()\n\n    return {\n      component: true,\n      remaining: this.isRemaining(),\n      active: this.isActive(),\n      completed: this.isCompleted(),\n      \"full-width--mobile-only\": theme === \"vertical\",\n      [mode]: true,\n      [theme]: true,\n      [getAppearance(this.el)]: true,\n    }\n  }\n\n  public render() {\n    const position = this.getPosition()\n\n    return (\n      <Host role=\"listitem\">\n        <div class={this.getComponentClassNames()}>\n          {!this.hasSlotOnly() && (\n            <Fragment>\n              <div class=\"progress-line\"></div>\n\n              <button\n                class=\"button button-reset\"\n                onClick={() => this.onClick()}\n                disabled={!this.isCompleted()}\n                aria-label={`${translate(\n                  \"Position\",\n                  this.el.lang\n                )} ${position}`}\n              >\n                <span class=\"position\">\n                  {this.isCompleted() ? (\n                    <sdx-icon\n                      class=\"icon-check-mark\"\n                      iconName=\"icon-check-mark\"\n                    />\n                  ) : (\n                    this.getPosition()\n                  )}\n                </span>\n\n                <span class=\"label\">\n                  {this.state.get().mode === \"holistic\" ? (\n                    this.getLabel()\n                  ) : (\n                    // Backwards compatibility: use slot content as label\n                    <slot />\n                  )}\n\n                  {this.isCompleted() && this.getSummary() && (\n                    <span class=\"summary\">\n                      {this.getSummary()}{\" \"}\n                      <sdx-icon class=\"icon-edit\" iconName=\"icon-edit\" />\n                    </span>\n                  )}\n                </span>\n              </button>\n            </Fragment>\n          )}\n\n          {!this.originalEl && (\n            <div class=\"slot\">\n              <slot />\n            </div>\n          )}\n        </div>\n      </Host>\n    )\n  }\n}\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["breakpoints","xs","sm","md","lg","xl","ul","bp","breakpoint","window","innerWidth","add","list","item","includes","remove","filter","currentItem","toggle","objectMap","obj","cb","newObj","key","progressFullReducer","state","action","type","stepEls","stepEl","sort","sortByAppearanceInDomTree","value","newValue","isNaN","length","ProgressFull","generatedStepEls","invokeStepChangeCallback","lastInnerWidth","this","store","StoreConnection","userInteractionInProgress","mode","theme","set","setInvokeStepChangeCallback","flush","get","prev","dispatch","sdxScrollViewEl","_a","centerElement","el","getStepEls","dispatchEvent","eventInput","step","resizeTimer","clearTimeout","setTimeout","setTheme","forceUpdate","setWidestStepElWidth","index","waitFor","some","label","subscribe","parseFunction","stepChangeCallback","forEach","style","width","widestStepsElWidth","Math","max","map","clientWidth","layout","component","h","class","getComponentClassNames","role","srHint","arrowPositionTop","ref","originalEl","push","ProgressFullStep","invokeStepClickCallback","setInvokeStepClickCallback","stepClickCallback","getPosition","indexOf","_b","summary","remaining","isRemaining","active","isActive","completed","isCompleted","getAppearance","position","Host","hasSlotOnly","Fragment","onClick","disabled","translate","lang","iconName","getLabel","getSummary","_objectDestructuringEmpty","TypeError"],"sourceRoot":""}