{"version":3,"file":"static/js/227.302cf593.chunk.js","mappings":"8NAYaA,EAAY,WA2DvB,+B,eAzDQ,KAAAC,qBAAiC,kBAAM,M,aAcH,G,0CAcT,E,4BAYY,GAkB7CC,KAAKC,0BAELD,KAAKE,eAAgBC,EAAAA,EAAAA,GAAUH,KAAKI,UAAY,GA9D3B,6CA6ChB,WACLJ,KAAKE,eAAgBC,EAAAA,EAAAA,GAAUH,KAAKI,UAAY,KA9C3B,0BAkDhB,WACLJ,KAAKD,qBAAqBC,KAAKK,SAnDV,mCAuDhB,WACLL,KAAKC,4BAxDgB,qCAiEf,WACND,KAAKD,sBAAuBO,EAAAA,EAAAA,GAAcN,KAAKO,kBAlE1B,oBAqEhB,WAAM,WACX,OACEC,EAAAA,EAAAA,GAAAA,kBAAAA,CACEC,QAAM,EACNC,MAAM,YACNC,KAAMX,KAAKW,KACXC,KAAMZ,KAAKa,SAAW,WAAa,QACnCN,eAAgB,SAACF,GAAD,OAAY,EAAKA,MAAQA,GACzCA,MAAOL,KAAKK,OAEXL,KAAKE,cAAcY,KAAI,SAACC,GAAD,OACtBP,EAAAA,EAAAA,GAAAA,iBAAAA,CACEQ,iBAAe,EACfX,MAAOU,EAAOV,MACdY,QAASF,EAAOE,QAChBC,OAAQH,EAAOG,QAEdH,EAAOJ,YAtFK,yB,uBAAA,gC,uGAAA,KASRb,EAAAA,WAAa,Q,QCrBN","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/option-picker/option-picker.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/option-picker/option-picker.scss?tag=sdx-option-picker"],"sourcesContent":["import { Component, h, Element, Prop, Watch } from \"@stencil/core\"\nimport { Option } from \"./types\"\nimport {\n  parseFunction,\n  parseJson,\n} from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-option-picker\",\n  styleUrl: \"option-picker.scss\",\n  shadow: false, // needed for form submit (sdx-input-group)\n})\nexport class OptionPicker {\n  private optionsParsed: Option[]\n  private invokeChangeCallback: Function = () => null\n\n  /**\n   * Emitted whenever user is checking/unchecking an item.\n   * @event\n   */\n  // @ts-ignore just for documentation purposes\n  private static eventInput = \"input\"\n\n  @Element() public el!: HTMLSdxOptionPickerElement\n\n  /**\n   * List of selectable options.\n   */\n  @Prop() public options: Option[] | string = []\n\n  /**\n   * Callback when checking an option.\n   * @deprecated use input event instead.\n   */\n  @Prop() public changeCallback:\n    | ((selection: any[]) => void)\n    | string\n    | undefined\n\n  /**\n   * Enable multi select.\n   */\n  @Prop() public multiple: boolean = false\n\n  /**\n   * Name parameter (useful when the component is used in a traditional HTML\n   * form submit).\n   */\n  @Prop() public name?: string\n\n  /**\n   * The value(s) of the currently checked items(s). Can be used for both\n   * getting and setting, like `myPicker.value = [ \"value1\" ]`.\n   */\n  @Prop({ mutable: true }) public value: any[] = []\n\n  @Watch(\"options\")\n  public optionsChanged() {\n    this.optionsParsed = parseJson(this.options) || []\n  }\n\n  @Watch(\"value\")\n  public valueChanged() {\n    this.invokeChangeCallback(this.value)\n  }\n\n  @Watch(\"changeCallback\")\n  public changeCallbackChanged() {\n    this.setInvokeChangeCallback()\n  }\n\n  constructor() {\n    this.setInvokeChangeCallback()\n\n    this.optionsParsed = parseJson(this.options) || []\n  }\n\n  private setInvokeChangeCallback() {\n    this.invokeChangeCallback = parseFunction(this.changeCallback)\n  }\n\n  public render() {\n    return (\n      <sdx-input-group\n        inline\n        theme=\"container\"\n        name={this.name}\n        type={this.multiple ? \"checkbox\" : \"radio\"}\n        changeCallback={(value) => (this.value = value)}\n        value={this.value}\n      >\n        {this.optionsParsed.map((option) => (\n          <sdx-input-item\n            hideCheckedIcon\n            value={option.value}\n            checked={option.checked}\n            srHint={option.srHint}\n          >\n            {option.name}\n          </sdx-input-item>\n        ))}\n      </sdx-input-group>\n    )\n  }\n}\n","// Careful: this component has no shadow root\n// and therefore shouldn't be styled here!\n"],"names":["OptionPicker","invokeChangeCallback","this","setInvokeChangeCallback","optionsParsed","parseJson","options","value","parseFunction","changeCallback","h","inline","theme","name","type","multiple","map","option","hideCheckedIcon","checked","srHint"],"sourceRoot":""}