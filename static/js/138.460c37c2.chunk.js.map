{"version":3,"file":"static/js/138.460c37c2.chunk.js","mappings":"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","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/examples/filter/filter-example-large.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/examples/filter/filter-example-large.scss?tag=sdx-filter-example-large"],"sourcesContent":["import { Component, h, Host, State } from \"@stencil/core\"\n\ntype FilterOption = {\n  value: string\n  label: string\n  name?: string // for input fields\n}\n\n@Component({\n  tag: \"sdx-filter-example-large\",\n  styleUrl: \"filter-example-large.scss\",\n})\nexport class FilterExampleLarge {\n  // all selected options of all the filters\n  @State() private selection: string[] = [\"SAP\", \"DOCP\"]\n\n  @State() private maxResults: number = 10\n\n  @State() private service: FilterOption[] = [\n    { value: \"sap\", label: \"SAP\" },\n    { value: \"docp\", label: \"DOCP\" },\n    { value: \"network\", label: \"Network\" },\n    { value: \"security\", label: \"Security\" },\n    { value: \"twint\", label: \"TWINT\" },\n    { value: \"mastercard\", label: \"Mastercard\" },\n    { value: \"postfinance\", label: \"Postfinance\" },\n    { value: \"allegro\", label: \"Allegro\" },\n    { value: \"bancomat\", label: \"Bancomat\" },\n  ]\n\n  @State() private incident: FilterOption[] = [\n    { value: \"resolved\", label: \"Resolved\" },\n    { value: \"unresolved\", label: \"Unresolved\" },\n  ]\n\n  @State() private priority: FilterOption[] = [\n    { value: \"total\", label: \"Total\" },\n    { value: \"critical\", label: \"Critical\" },\n    { value: \"high\", label: \"High\" },\n    { value: \"medium\", label: \"Medium\" },\n    { value: \"low\", label: \"Low\" },\n  ]\n\n  @State() private connection: FilterOption[] = [\n    { value: \"lightning\", label: \"Lightning\" },\n    { value: \"usb-c\", label: \"USB-C\" },\n  ]\n\n  @State() private os: FilterOption[] = [\n    { value: \"android\", label: \"Android\" },\n    { value: \"ios\", label: \"Apple iOS\" },\n  ]\n\n  @State() private breach: FilterOption = {\n    value: \"breach\",\n    label: \"Display only with breaches\",\n  }\n\n  @State() private unresolved: FilterOption = {\n    value: \"unresolved\",\n    label: \"Display unresolved\",\n  }\n\n  @State() private dateFrom: FilterOption = {\n    value: \"\",\n    name: \"dateFrom\",\n    label: \"From\",\n  }\n\n  @State() private dateTo: FilterOption = {\n    value: \"\",\n    name: \"dateTo\",\n    label: \"To\",\n  }\n\n  private removeFromSelection(label: string) {\n    this.selection = this.selection.filter((item) => item !== label)\n  }\n\n  private updateSelectionSingle(label: string, add: boolean) {\n    if (add && !this.selection.includes(label)) {\n      this.selection = [...this.selection, label]\n    } else if (!add) {\n      this.removeFromSelection(label)\n    }\n  }\n\n  private updateSelectionMultiple(\n    model: FilterOption[],\n    selectedOptions: FilterOption[]\n  ) {\n    model.forEach((option) => {\n      const shouldBeSelected = selectedOptions.find(\n        (s) => s.label === option.label\n      )\n      const isAlreadySelected = this.selection.includes(option.label)\n\n      if (!shouldBeSelected) {\n        this.removeFromSelection(option.label)\n      } else if (!isAlreadySelected) {\n        this.selection = [...this.selection, option.label]\n      }\n    })\n  }\n\n  private createDateValue(filterOption: FilterOption) {\n    const selectionLabel = this.createDateSelectionLabel(\n      filterOption.label,\n      filterOption.value\n    )\n    return this.selection.includes(selectionLabel) ? filterOption.value : \"\"\n  }\n\n  private createDateSelectionLabel(label: string, value: string) {\n    return value ? `${label} ${value}` : \"\"\n  }\n\n  private createDateElement(model: FilterOption) {\n    return (\n      <sdx-input\n        value={this.createDateValue(model)}\n        label={model.label}\n        name={model.name}\n        type=\"date\"\n        placeholder=\"01.01.2023\"\n        onInput={(e) => {\n          const target = e.target as HTMLSdxInputItemElement\n\n          const oldLabel = this.createDateSelectionLabel(\n            model.label,\n            model.value\n          )\n\n          const label = this.createDateSelectionLabel(model.label, target.value)\n\n          model.value = target.value // update model\n          this.updateSelectionSingle(oldLabel, false) // remove old label from selection\n          this.updateSelectionSingle(label, !!target.value.length) // add new label to selection if needed\n        }}\n      />\n    )\n  }\n\n  public render() {\n    const results = this.maxResults - this.selection.length\n\n    return (\n      <Host>\n        <sdx-filter\n          resultLabel={results > 0 ? `${results} results found` : \"\"}\n          selection={this.selection}\n          onSdxdeselectrequest={(e) => {\n            if (e.detail?.label === e.target.resetAllFiltersLabel) {\n              this.selection = []\n            } else {\n              this.removeFromSelection(e.detail.label)\n            }\n          }}\n        >\n          <div class=\"row row--gutters\">\n            <div class=\"col-sm-auto\">\n              <sdx-select\n                multiple\n                label=\"Services\"\n                onInput={(e) => {\n                  this.updateSelectionMultiple(\n                    this.service,\n                    (e.target as HTMLSdxSelectElement).value\n                  )\n                }}\n              >\n                {this.service.map((item) => (\n                  <sdx-select-option\n                    value={item}\n                    selected={this.selection.includes(item.label)}\n                  >\n                    {item.label}\n                  </sdx-select-option>\n                ))}\n              </sdx-select>\n            </div>\n            <div class=\"col-sm-auto\">\n              <sdx-select\n                multiple\n                label=\"Incident type\"\n                onInput={(e) => {\n                  this.updateSelectionMultiple(\n                    this.incident,\n                    (e.target as HTMLSdxSelectElement).value\n                  )\n                }}\n              >\n                {this.incident.map((item) => (\n                  <sdx-select-option\n                    value={item}\n                    selected={this.selection.includes(item.label)}\n                  >\n                    {item.label}\n                  </sdx-select-option>\n                ))}\n              </sdx-select>\n            </div>\n            <div class=\"col-sm-auto\">\n              <sdx-select\n                multiple\n                label=\"Priority Level\"\n                onInput={(e) => {\n                  this.updateSelectionMultiple(\n                    this.priority,\n                    (e.target as HTMLSdxSelectElement).value\n                  )\n                }}\n              >\n                {this.priority.map((item) => (\n                  <sdx-select-option\n                    value={item}\n                    selected={this.selection.includes(item.label)}\n                  >\n                    {item.label}\n                  </sdx-select-option>\n                ))}\n              </sdx-select>\n            </div>\n          </div>\n\n          <div class=\"row row--gutters\">\n            <div class=\"col-sm-auto\">\n              {this.createDateElement(this.dateFrom)}\n            </div>\n            <div class=\"col-sm-auto\">{this.createDateElement(this.dateTo)}</div>\n          </div>\n\n          <div class=\"row row--gutters\">\n            <div class=\"col-sm-auto\">\n              <sdx-input-item\n                value={this.breach}\n                type=\"checkbox\"\n                checked={this.selection.includes(this.breach.label)}\n                onInput={(e) => {\n                  const target = e.target as HTMLSdxInputItemElement\n                  this.updateSelectionSingle(target.value.label, target.checked)\n                }}\n              >\n                {this.breach.label}\n              </sdx-input-item>\n            </div>\n\n            <div class=\"col-sm-auto\">\n              <sdx-input-item\n                value={this.unresolved}\n                type=\"checkbox\"\n                checked={this.selection.includes(this.unresolved.label)}\n                onInput={(e) => {\n                  const target = e.target as HTMLSdxInputItemElement\n                  this.updateSelectionSingle(target.value.label, target.checked)\n                }}\n              >\n                {this.unresolved.label}\n              </sdx-input-item>\n            </div>\n          </div>\n\n          <div slot=\"filter-more\">\n            <div class=\"row\">\n              <div class=\"col-sm-auto\">\n                <sdx-select\n                  multiple\n                  label=\"Connections\"\n                  onInput={(e) => {\n                    this.updateSelectionMultiple(\n                      this.connection,\n                      (e.target as HTMLSdxSelectElement).value\n                    )\n                  }}\n                >\n                  {this.connection.map((item) => (\n                    <sdx-select-option\n                      value={item}\n                      selected={this.selection.includes(item.label)}\n                    >\n                      {item.label}\n                    </sdx-select-option>\n                  ))}\n                </sdx-select>\n              </div>\n\n              <div class=\"col-sm-auto\">\n                <sdx-select\n                  multiple\n                  label=\"Operating system\"\n                  onInput={(e) => {\n                    this.updateSelectionMultiple(\n                      this.os,\n                      (e.target as HTMLSdxSelectElement).value\n                    )\n                  }}\n                >\n                  {this.os.map((item) => (\n                    <sdx-select-option\n                      value={item}\n                      selected={this.selection.includes(item.label)}\n                    >\n                      {item.label}\n                    </sdx-select-option>\n                  ))}\n                </sdx-select>\n              </div>\n            </div>\n          </div>\n        </sdx-filter>\n\n        {results > 0 && (\n          <div class=\"results\">\n            {[...Array(results)].map(() => (\n              <div>&nbsp;</div>\n            ))}\n          </div>\n        )}\n      </Host>\n    )\n  }\n}\n",".results {\n  display: flex;\n  flex-direction: column;\n  gap: $baseline-2;\n  margin-top: $baseline-6;\n\n  div {\n    background: $color-horizon;\n    border-radius: 6px;\n    height: $interaction-element-height;\n  }\n}\n"],"names":["FilterExampleLarge","value","label","name","this","selection","filter","item","add","includes","removeFromSelection","model","selectedOptions","forEach","option","shouldBeSelected","find","s","isAlreadySelected","filterOption","selectionLabel","createDateSelectionLabel","h","createDateValue","type","placeholder","onInput","e","target","oldLabel","updateSelectionSingle","length","results","maxResults","Host","resultLabel","onSdxdeselectrequest","detail","_a","resetAllFiltersLabel","class","multiple","updateSelectionMultiple","service","map","selected","incident","priority","createDateElement","dateFrom","dateTo","breach","checked","unresolved","slot","connection","os","Array"],"sourceRoot":""}