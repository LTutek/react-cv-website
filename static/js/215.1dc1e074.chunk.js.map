{"version":3,"file":"static/js/215.1dc1e074.chunk.js","mappings":"2JASO,IAAMA,EAA2B,CACtCC,GAAI,EACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KACJC,GAAI,KACJC,GAAI,M,SAGUC,EAAGC,GACjB,OAAOC,OAAOC,YAAcV,EAAYQ,K,iKCF7BG,EAAK,W,8CAER,KAAAC,WAAY,E,2BAI6B,E,aACd,I,SAKN,G,YAKG,I,4BAjBhB,wCAyBT,SAAUC,G,MAETC,EAAoC,OAAzBC,KAAKC,GAAGC,aAGR,kBAAfJ,EAAMK,MACNL,EAAMM,OAAOC,SAAS,cACtBP,EAAMQ,UAAwB,QAAb,EAAAN,KAAKO,gBAAQC,IAAAA,OAAA,EAAAA,EAAEC,iBAC/BV,IAEDC,KAAKU,sBAAuB,EAC5BV,KAAKH,WAAY,KApCL,qDA4CT,qFACAG,KAAKH,WAAaG,KAAKO,WAC1BP,KAAKW,QAAUX,KAAKC,GAAGW,wBAAwBC,MACpB,QAA3B,EAAAb,KAAKO,SAASE,qBAAaD,IAAAA,GAAAA,EAAEM,SAASC,QAAX,2DAC2Bf,KAAKgB,OAJxD,gDA5CS,qFAqDT,YAEAxB,EAAAA,EAAAA,GAAG,QACNQ,KAAKiB,OAAuB,GAAdjB,KAAKiB,UAxDP,8BA4DT,WAEDjB,KAAKC,GAAGC,cACVF,KAAKkB,SA/DO,mCAmER,WACN,MAAO,CACLC,OAAQnB,KAAKU,wBArED,oCAyER,WACN,eACEU,WAAW,IACVC,EAAAA,EAAAA,GAAcrB,KAAKC,KAAM,KA5Ed,oBAgFT,WAAM,WACX,OACEqB,EAAAA,EAAAA,GAAAA,MAAAA,CACEC,MAAOvB,KAAKwB,yBACZC,MAAO,CAAER,OAAQ,GAAF,OAAKjB,KAAKiB,OAAV,SAEfK,EAAAA,EAAAA,GAAAA,sBAAAA,CACEC,MAAOvB,KAAK0B,wBACZC,KAAK,WAEPL,EAAAA,EAAAA,GAAAA,SAAAA,CACEM,MAAM,eACNC,IAAK,SAAC5B,GAAD,OAAS,EAAKM,SAAWN,GAC9BsB,MAAOvB,KAAK0B,wBACZD,MAAO,CACLR,OAAQ,GAAF,OAAKjB,KAAKiB,OAAV,MACNJ,MAAO,GAAF,OAAKb,KAAKW,QAAV,OAEPmB,gBAAiB9B,KAAK8B,qBAlGd,yB,wBAAA,K,QCjBD","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/core/helpers/breakpoint-helpers.ts","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/figma/figma.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/figma/figma.scss?tag=sdx-figma&encapsulation=shadow"],"sourcesContent":["type Breakpoints = {\n  xs: 0\n  sm: 480\n  md: 768\n  lg: 1024\n  xl: 1280\n  ul: 1440\n}\n\nexport const breakpoints: Breakpoints = {\n  xs: 0,\n  sm: 480,\n  md: 768,\n  lg: 1024,\n  xl: 1280,\n  ul: 1440,\n}\n\nexport function bp(breakpoint: keyof Breakpoints) {\n  return window.innerWidth >= breakpoints[breakpoint]\n}\n","import {\n  Component,\n  Element,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n} from \"@stencil/core\"\nimport { getAppearance } from \"../../core/helpers/webcomponent-helpers\"\nimport { bp } from \"../../core/helpers/breakpoint-helpers\"\n\n@Component({\n  tag: \"sdx-figma\",\n  styleUrl: \"figma.scss\",\n  shadow: true,\n})\nexport class Figma {\n  private iframeEl?: HTMLIFrameElement\n  private hasLoaded = false\n\n  @Element() public el!: HTMLSdxFigmaElement\n\n  @State() private showLoadingIndicator: boolean = true\n  @State() private elWidth: number = 999\n\n  /**\n   * The figma url to load.\n   */\n  @Prop() public url: string = \"\"\n\n  /**\n   * The height in px for bp-lg. For bp-md it is 60% of it.\n   */\n  @Prop() public height: number = 450\n\n  /**\n   * Show figma fullscreen button.\n   */\n  @Prop() public allowFullScreen?: boolean\n\n  @Listen(\"message\", { target: \"window\" })\n  public onMessage(event: any) {\n    // needed because figma just shows a black page while loading\n    const elHidden = this.el.offsetParent === null\n\n    if (\n      event.data === \"LOAD_FINISHED\" &&\n      event.origin.includes(\"figma.com\") &&\n      event.source === this.iframeEl?.contentWindow &&\n      !elHidden\n    ) {\n      this.showLoadingIndicator = false\n      this.hasLoaded = true\n    }\n  }\n\n  /**\n   * Loads the url from the iFrame if needed.\n   */\n  @Method()\n  public async load() {\n    if (!this.hasLoaded && this.iframeEl) {\n      this.elWidth = this.el.getBoundingClientRect().width // get width when el is visible\n      this.iframeEl.contentWindow?.location.replace(\n        `https://www.figma.com/embed?embed_host=share&url=${this.url}`\n      )\n    }\n  }\n\n  public componentWillLoad() {\n    // shrink height on mobiles\n    if (!bp(\"md\")) {\n      this.height = this.height * 0.6\n    }\n  }\n\n  public componentDidLoad() {\n    // start loading if element is visible initially\n    if (this.el.offsetParent) {\n      this.load()\n    }\n  }\n\n  private getElementsClassNames() {\n    return {\n      hidden: this.showLoadingIndicator,\n    }\n  }\n\n  private getComponentClassNames() {\n    return {\n      component: true,\n      [getAppearance(this.el)]: true,\n    }\n  }\n\n  public render() {\n    return (\n      <div\n        class={this.getComponentClassNames()}\n        style={{ height: `${this.height}px` }}\n      >\n        <sdx-loading-spinner\n          class={this.getElementsClassNames()}\n          size=\"large\"\n        ></sdx-loading-spinner>\n        <iframe\n          title=\"Figma design\"\n          ref={(el) => (this.iframeEl = el)}\n          class={this.getElementsClassNames()}\n          style={{\n            height: `${this.height}px`,\n            width: `${this.elWidth}px`,\n          }}\n          allowFullScreen={this.allowFullScreen}\n        />\n      </div>\n    )\n  }\n}\n",".component {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: $color-horizon;\n  border-radius: $border-radius-large;\n\n  sdx-loading-spinner {\n    position: absolute;\n    visibility: hidden;\n\n    &.hidden {\n      visibility: visible;\n    }\n  }\n\n  iframe {\n    border: 1px solid $color-gray-tint-8;\n    border-radius: $border-radius-large;\n\n    &.hidden {\n      position: fixed; // prevent jumping when iframe is loaded with chrome\n      visibility: hidden;\n    }\n  }\n}\n\n.component.sdx--dark-theme {\n  background-color: $color-dusk-tint-2-dark-theme;\n\n  iframe {\n    border-color: $color-gray-tint-8-dark-theme;\n  }\n}\n"],"names":["breakpoints","xs","sm","md","lg","xl","ul","bp","breakpoint","window","innerWidth","Figma","hasLoaded","event","elHidden","this","el","offsetParent","data","origin","includes","source","iframeEl","_a","contentWindow","showLoadingIndicator","elWidth","getBoundingClientRect","width","location","replace","url","height","load","hidden","component","getAppearance","h","class","getComponentClassNames","style","getElementsClassNames","size","title","ref","allowFullScreen"],"sourceRoot":""}