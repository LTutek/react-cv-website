{"version":3,"file":"static/js/583.2e64b603.chunk.js","mappings":"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","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/content-slider/content-slider.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/content-slider/content-slider.scss?tag=sdx-content-slider&encapsulation=shadow"],"sourcesContent":["import {\n  Component,\n  Element,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n} from \"@stencil/core\"\nimport {\n  getAppearance,\n  translate,\n} from \"../../core/helpers/webcomponent-helpers\"\nimport { BackgroundTheme } from \"../../core/types/types\"\n\n@Component({\n  tag: \"sdx-content-slider\",\n  styleUrl: \"content-slider.scss\",\n  shadow: true,\n})\nexport class ContentSlider {\n  @Element() public el!: HTMLSdxContentSliderElement\n  private slotEl?: HTMLSlotElement\n  private slidesEl?: HTMLElement\n  private rangeSliderEl?: HTMLInputElement\n  private resizeTimer?: NodeJS.Timer\n  private scrollTimer?: NodeJS.Timer\n  private dragTimer?: NodeJS.Timer\n  private drag?: { mouseStart: number; sliderStart: number }\n  @State() private showLeftArrow = false\n  @State() private showRightArrow = false\n\n  /**\n   * Number of visible slides for browser width < 480px.\n   */\n  @Prop() public xs: 1 | 1.11 = 1.11\n\n  /**\n   * Number of visible slides for browser width < 768px.\n   */\n  @Prop() public sm: 1 | 1.11 | 2 | 3 | 4 = 1.11\n\n  /**\n   * Number of visible slides for browser width < 1024px.\n   */\n  @Prop() public md: 1 | 2 | 3 | 4 = 2\n\n  /**\n   * Number of visible slides for browser width < 1280px.\n   */\n  @Prop() public lg: 1 | 2 | 3 | 4 = 3\n\n  /**\n   * Number of visible slides for browser width < 1440px.\n   */\n  @Prop() public xl: 1 | 2 | 3 | 4 = 4\n\n  /**\n   * Number of visible slides for browser width >= 1440px.\n   */\n  @Prop() public ul: 1 | 2 | 3 | 4 | 5 | 6 = 5\n\n  /**\n   * Description text read by the screen reader.\n   */\n  @Prop() public srHint: string = translate(\"Content Slider\", this.el.lang)\n\n  /**\n   * Background theme. Use \"dark\" when placed on a gradient background.\n   */\n  @Prop() public background: BackgroundTheme | \"auto\" = \"auto\"\n\n  /**\n   * Disable animations for testing.\n   * @private\n   */\n  @Prop() public animated: boolean = true\n\n  /**\n   * Draws the layout. Useful to redraw the component when initially\n   * rendered on a hidden parent (e.g. a tabs item).\n   */\n  @Method()\n  public async layout() {\n    this.updateControls()\n  }\n\n  @Listen(\"resize\", { target: \"window\" })\n  public onWindowResize() {\n    clearTimeout(this.resizeTimer)\n    this.resizeTimer = setTimeout(() => this.updateControls(), 50)\n  }\n\n  public componentDidLoad() {\n    this.updateControls()\n  }\n\n  private updateControls() {\n    this.updateArrows()\n    this.updateRangeSlider()\n  }\n\n  // Hide arrow if scrolling not possible in that direction\n  private updateArrows() {\n    const slides = this.slotEl?.assignedElements()\n    const slide = slides && slides[0]\n    const threshold = 0.75 * (slide?.clientWidth || 0)\n    this.showLeftArrow = this.getScrolled() > threshold\n    this.showRightArrow = this.getScrolled() < this.getMaxScrolled() - threshold\n  }\n\n  // Calculate the max number of possible steps, step size, and if overlayed\n  private updateRangeSlider() {\n    const slides = this.slotEl?.assignedElements()\n    const slidesTotal = slides?.length\n    if (!slidesTotal) {\n      this.rangeSliderEl!.max = \"0\"\n      return\n    }\n    const slideWidth = slides[0]?.clientWidth\n    const slidesVisible = Math.floor(this.slidesEl!.clientWidth / slideWidth)\n    this.rangeSliderEl!.max = `${slidesTotal - slidesVisible}`\n\n    const width = this.rangeSliderEl!.clientWidth\n    this.rangeSliderEl!.step = `${slidesVisible / width}`\n\n    this.rangeSliderEl!.classList.toggle(\n      \"overlayed\",\n      this.isFullWidth() && slidesVisible === 1\n    )\n  }\n\n  private onScrollOrSwipe() {\n    clearTimeout(this.scrollTimer)\n    this.scrollTimer = setTimeout(() => {\n      this.updateArrows()\n      this.updateRangeSliderPosition()\n    }, 5)\n  }\n\n  private onMouseDragStart(event: MouseEvent) {\n    clearTimeout(this.dragTimer)\n    this.drag = {\n      mouseStart: event.clientX,\n      sliderStart: this.slidesEl!.scrollLeft,\n    }\n    this.slidesEl!.setAttribute(\"aria-grabbed\", \"true\")\n    this.slidesEl!.classList.remove(\"smooth\")\n    this.slidesEl!.classList.remove(\"snap\")\n  }\n\n  private onMouseDrag(event: MouseEvent) {\n    if (!this.drag) {\n      return\n    }\n    const offset = event.clientX - this.drag.mouseStart\n    if (offset < this.drag.sliderStart) {\n      this.slidesEl!.scrollLeft = this.drag.sliderStart - offset\n    }\n  }\n\n  private onMouseDragEnd() {\n    const timeToSnapStart = 200\n    const timeToSnapEnd = 500\n    clearTimeout(this.dragTimer)\n    this.drag = undefined\n    this.slidesEl!.setAttribute(\"aria-grabbed\", \"false\")\n    this.dragTimer = setTimeout(() => {\n      this.slidesEl!.classList.add(\"smooth\")\n      this.updateScrolledPosition(true)\n      setTimeout(() => {\n        this.slidesEl!.classList.add(\"snap\")\n      }, timeToSnapEnd)\n    }, timeToSnapStart)\n  }\n\n  private onArrowClick(increment: number) {\n    clearTimeout(this.dragTimer)\n    const value = this.getRangeSliderValue() + increment\n    const ratio = value / this.getRangeSliderMax()\n    this.slidesEl!.scrollLeft = this.getMaxScrolled() * ratio\n  }\n\n  private onRangeSliderInput() {\n    this.slidesEl!.classList.remove(\"smooth\")\n    this.updateScrolledPosition()\n    this.rangeSliderEl!.step = \"1\"\n  }\n\n  private onRangeSliderInputEnd() {\n    this.slidesEl!.classList.add(\"smooth\")\n    this.updateRangeSlider()\n  }\n\n  private updateRangeSliderPosition() {\n    const ratio = this.getScrolled() / this.getMaxScrolled()\n    this.rangeSliderEl!.value = `${this.getRangeSliderMax() * ratio}`\n  }\n\n  private updateScrolledPosition(snap?: boolean) {\n    let value = this.getRangeSliderValue()\n    if (snap) {\n      value = Math.round(value)\n    }\n    const ratio = value / this.getRangeSliderMax()\n    this.slidesEl!.scrollLeft = this.getMaxScrolled() * ratio\n  }\n\n  private getRangeSliderValue(): number {\n    return Number(this.rangeSliderEl!.value)\n  }\n\n  private getRangeSliderMax(): number {\n    return Number(this.rangeSliderEl!.max)\n  }\n\n  private getScrolled(): number {\n    return this.slidesEl!.scrollLeft\n  }\n\n  private getMaxScrolled(): number {\n    return this.slidesEl!.scrollWidth - this.slidesEl!.clientWidth\n  }\n\n  private isFullWidth(): boolean {\n    const width = this.slidesEl?.clientWidth || 0\n    return window.innerWidth <= width\n  }\n\n  private getComponentClassNames() {\n    return {\n      component: true,\n      [this.background]: true,\n      [getAppearance(this.el)]: true,\n      \"full-width\": this.isFullWidth(),\n      \"not-animated\": !this.animated,\n    }\n  }\n\n  public render() {\n    return (\n      <div class={this.getComponentClassNames()}>\n        <div class=\"slides-wrapper\">\n          <div class=\"arrow left\">\n            <sdx-button\n              class=\"arrow-icon\"\n              theme=\"transparent\"\n              icon-name=\"icon-chevron-flat-left\"\n              icon-size=\"2\"\n              sr-hint={translate(\"To the left\", this.el.lang)}\n              disabled={!this.showLeftArrow}\n              aria-hidden={this.showLeftArrow ? undefined : \"true\"}\n              onClick={() => this.onArrowClick(-1)}\n            />\n          </div>\n\n          <div role=\"grid\">\n            <div role=\"row\">\n              <div\n                role=\"gridcell\"\n                class=\"slides smooth snap\"\n                ref={(el) => (this.slidesEl = el)}\n                onScroll={() => this.onScrollOrSwipe()}\n                onMouseDown={(e) => this.onMouseDragStart(e)}\n                onMouseMove={(e) => this.onMouseDrag(e)}\n                onMouseUp={() => this.onMouseDragEnd()}\n                onMouseLeave={() => this.onMouseDragEnd()}\n                aria-label={this.srHint}\n                tabindex=\"0\"\n              >\n                <slot\n                  onSlotchange={() => this.updateControls()}\n                  ref={(el) => (this.slotEl = el as HTMLSlotElement)}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div class=\"arrow right\">\n            <sdx-button\n              class=\"arrow-icon\"\n              theme=\"transparent\"\n              icon-name=\"icon-chevron-flat-right\"\n              icon-size=\"2\"\n              sr-hint={translate(\"To the right\", this.el.lang)}\n              disabled={!this.showRightArrow}\n              aria-hidden={this.showRightArrow ? undefined : \"true\"}\n              onClick={() => this.onArrowClick(1)}\n            />\n          </div>\n        </div>\n\n        <input\n          aria-label=\"Slider\"\n          class=\"range-slider\"\n          type=\"range\"\n          id=\"input\"\n          min=\"0\"\n          value=\"0\"\n          ref={(el) => (this.rangeSliderEl = el)}\n          onInput={() => this.onRangeSliderInput()}\n          onMouseDown={() => this.onRangeSliderInput()}\n          onTouchStart={() => this.onRangeSliderInput()}\n          onMouseUp={() => this.onRangeSliderInputEnd()}\n          onTouchEnd={() => this.onRangeSliderInputEnd()}\n        />\n      </div>\n    )\n  }\n}\n","@import \"stylesheets/sdx/variables/grid\";\n@import \"arrows\";\n@import \"range-slider\";\n\n$defaultColumns: (\n  xs: 1.11,\n  sm: 1.11,\n  md: 2,\n  lg: 3,\n  xl: 4,\n  ul: 5,\n);\n$maxConfigurableColumns: (\n  xs: 1,\n  sm: 4,\n  md: 4,\n  lg: 4,\n  xl: 4,\n  ul: 6,\n);\n$bps: map-keys($grid-breakpoints);\n\n:host {\n  @each $bp in $bps {\n    --columns-#{$bp}: #{map-get($defaultColumns, $bp)};\n  }\n}\n\n@each $bp in $bps {\n  @for $i from 1 through map-get($maxConfigurableColumns, $bp) {\n    :host([#{$bp}=\"#{$i}\"]) {\n      --columns-#{$bp}: #{$i};\n    }\n  }\n}\n\n.component {\n  position: relative; // For range slider positioning\n\n  &.not-animated {\n    .arrow-icon {\n      transition: unset;\n    }\n  }\n}\n\n.slides-wrapper {\n  position: relative; // For arrow positioning\n  margin: 0 auto $baseline-3;\n}\n\n.slides {\n  overflow-x: auto;\n  scrollbar-width: none;\n  display: flex;\n  cursor: grab;\n\n  @each $bp in $bps {\n    @include media-breakpoint-up($bp) {\n      $gutter: map-get($grid-gutters, $bp);\n      gap: $gutter;\n    }\n  }\n\n  // Make slide shadows/borders visible\n  @each $bp in $bps {\n    @include media-breakpoint-up($bp) {\n      padding: 3 * $baseline 1px;\n      margin: -3 * $baseline -1px;\n    }\n  }\n\n  &.smooth {\n    scroll-behavior: smooth;\n  }\n\n  &.snap {\n    scroll-snap-type: x mandatory;\n  }\n\n  &[aria-grabbed=\"true\"] {\n    cursor: grabbing;\n    user-select: none; // Disable text selection as it conflicts with dragging\n  }\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n}\n\n// Slide\n::slotted(*) {\n  scroll-snap-align: start;\n\n  @each $bp in $bps {\n    @include media-breakpoint-up($bp) {\n      $gutter: map-get($grid-gutters, $bp);\n      $columns: var(--columns-#{$bp});\n      width: calc(1 / $columns * (100% - ($columns - 1) * $gutter));\n      flex-shrink: 0; // ensure it's never below width\n    }\n  }\n}\n"],"names":["ContentSlider","translate","this","el","lang","updateControls","clearTimeout","resizeTimer","setTimeout","updateArrows","updateRangeSlider","slides","slotEl","_a","assignedElements","slide","threshold","clientWidth","showLeftArrow","getScrolled","showRightArrow","getMaxScrolled","slidesTotal","length","slideWidth","_b","slidesVisible","Math","floor","slidesEl","rangeSliderEl","max","width","step","classList","toggle","isFullWidth","scrollTimer","updateRangeSliderPosition","event","dragTimer","drag","mouseStart","clientX","sliderStart","scrollLeft","setAttribute","remove","offset","undefined","add","updateScrolledPosition","increment","ratio","getRangeSliderValue","getRangeSliderMax","value","snap","round","Number","scrollWidth","window","innerWidth","component","background","getAppearance","animated","h","class","getComponentClassNames","theme","disabled","onClick","onArrowClick","role","ref","onScroll","onScrollOrSwipe","onMouseDown","e","onMouseDragStart","onMouseMove","onMouseDrag","onMouseUp","onMouseDragEnd","onMouseLeave","srHint","tabindex","onSlotchange","type","id","min","onInput","onRangeSliderInput","onTouchStart","onRangeSliderInputEnd","onTouchEnd"],"sourceRoot":""}