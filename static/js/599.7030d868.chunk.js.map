{"version":3,"file":"static/js/599.7030d868.chunk.js","mappings":"sQAkBaA,EAAa,W,wDAUM,I,yCAUM,W,kBAKE,S,kFAyBN,GAlDR,sDAwDjB,WAAuB,WACxBC,KAAKC,aACPC,aAAaF,KAAKC,aAGpBD,KAAKC,YAAcE,YAAW,WAC5B,EAAKC,WACJ,MA/DmB,uDAuEjB,8EACDJ,KAAKK,WAAaL,KAAKM,WAAaN,KAAKO,eAC3CP,KAAKM,UAAUE,MAAMC,UAArB,gBACET,KAAKK,UAAUK,YAAcV,KAAKO,aADpC,MAFG,gDAvEiB,oFA+EjB,WAAgB,WACrBP,KAAKI,SACL,IAAMO,EAAMX,KAAKY,GAAGC,cAAc,OAC9BF,GACFA,EAAIG,iBAAiB,QAAQ,kBAAM,EAAKV,cAnFpB,2BAuFhB,SAAcW,GAAe,MAC7BC,GAAgBC,EAAAA,EAAAA,GAAQjB,KAAKY,GAAI,eAEvC,UACEM,SAAS,EACT,iBAAkBF,IAAkBD,EACpC,eAAgBC,GAAiBD,EACjCI,QAASH,GAAiBD,EAC1BA,OAAAA,IALF,SAMGf,KAAKoB,YAAa,IANrB,sBAOSpB,KAAKqB,eAAiB,IAP/B,UAQGC,EAAAA,EAAAA,GAActB,KAAKY,KAAM,GAR5B,IA1FsB,oCAsGhB,WACN,eACEW,WAAW,IACVD,EAAAA,EAAAA,GAActB,KAAKY,KAAM,KAzGN,uBA6GhB,WACN,IAAMY,OAAyCC,IAAtBzB,KAAKO,aAE9B,MAAO,CACLW,QAAS,CACPQ,MAAO,GAAF,OAAK1B,KAAK2B,KAAV,MACLC,OAAQ,GAAF,OAAK5B,KAAK2B,KAAV,MACNE,IAAK,GAAF,OAAK7B,KAAK6B,IAAV,KACHC,OAAQ,GAAF,OAAK9B,KAAK8B,OAAV,KACNC,KAAM,GAAF,OAAK/B,KAAK+B,KAAV,KACJC,MAAO,GAAF,OAAKhC,KAAKgC,MAAV,KACLC,gBAAiB,GAAF,YAAkBR,IAAbzB,KAAK6B,IAAoB,MAAQ,SAAtC,iBACCJ,IAAdzB,KAAK+B,KAAqB,OAAS,UAGvCG,MAAO,CACLC,SAAU,GAAF,OAAKnC,KAAK2B,KAAO,GAAjB,MACRS,UAAW,GAAF,OAAKpC,KAAK2B,KAAO,GAAjB,OAEXU,KAAM,CACJC,SAAU,GAAF,OAAKd,EAAmB,EAAIxB,KAAK2B,KAAjC,MACRY,UAAW,GAAF,OAAKf,EAAmB,EAAIxB,KAAK2B,KAAjC,UAlIS,oBAuIjB,WAAM,WACX,OACEa,EAAAA,EAAAA,GAACC,EAAAA,EAAI,MACHD,EAAAA,EAAAA,GAAAA,MAAAA,CACEE,MAAO1C,KAAK2C,yBACZC,IAAK,SAAChC,GAAD,OAAS,EAAKP,UAAYO,KAE/B4B,EAAAA,EAAAA,GAAAA,MAAAA,CACEI,IAAK,SAAChC,GAAD,OAAS,EAAKN,UAAYM,GAC/B8B,MAAO1C,KAAK6C,eAAc,GAC1BrC,MAAOR,KAAK8C,YAAY5B,UAExBsB,EAAAA,EAAAA,GAAAA,MAAAA,CACEE,MAAM,QACNlC,MAAOR,KAAK8C,YAAYZ,MAAK,cACjB,SAEZM,EAAAA,EAAAA,GAAAA,OAAAA,CAAMO,KAAK,YAIfP,EAAAA,EAAAA,GAAAA,MAAAA,CAAKE,MAAO1C,KAAK6C,eAAc,KAC7BL,EAAAA,EAAAA,GAAAA,OAAAA,CAAMO,KAAK,kBAGbP,EAAAA,EAAAA,GAAAA,MAAAA,CAAKE,MAAM,OAAOlC,MAAOR,KAAK8C,YAAYT,OACxCG,EAAAA,EAAAA,GAAAA,OAAAA,SAIJA,EAAAA,EAAAA,GAAAA,OAAAA,CAAME,MAAM,WAAW1C,KAAKgD,WArKV,yB,wBAAA,K,QClBD","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/sticker-circle/sticker-circle.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/sticker-circle/sticker-circle.scss?tag=sdx-sticker-circle&encapsulation=shadow"],"sourcesContent":["import {\n  Component,\n  h,\n  Element,\n  Method,\n  Listen,\n  Prop,\n  Host,\n} from \"@stencil/core\"\nimport { hasSlot, getAppearance } from \"../../core/helpers/webcomponent-helpers\"\n\nconst padding = 16\n\n@Component({\n  tag: \"sdx-sticker-circle\",\n  styleUrl: \"sticker-circle.scss\",\n  shadow: true,\n})\nexport class StickerCircle {\n  private wrapperEl?: HTMLDivElement\n  private stickerEl?: HTMLDivElement\n  private resizeTimer?: NodeJS.Timer\n\n  @Element() public el!: HTMLSdxStickerCircleElement\n\n  /**\n   * The size (diameter) in px.\n   */\n  @Prop() public size: number = 112\n\n  /**\n   * The content width at which the sticker should be normal size (nonscaled).\n   */\n  @Prop() public contentWidth?: number\n\n  /**\n   * SDX predefined color class for the text and border.\n   */\n  @Prop() public colorClass: string = \"sc-white\"\n\n  /**\n   * SDX predefined color class (or transparent) for the sticker background.\n   */\n  @Prop() public bgColorClass: string = \"orchid\"\n\n  /**\n   * Offset from the top edge, in % of the content's height.\n   */\n  @Prop() public top?: number\n\n  /**\n   * Offset from the bottom edge, in % of the content's height.\n   */\n  @Prop() public bottom?: number\n\n  /**\n   * Offset from the left edge, in % of the content's width.\n   */\n  @Prop() public left?: number\n\n  /**\n   * Offset from the right edge, in % of the content's width.\n   */\n  @Prop() public right?: number\n\n  /**\n   * Description text read by the screen reader.\n   */\n  @Prop() public srHint: string = \"\"\n\n  /**\n   * Listen to window resize events, and resize sticker accordingly\n   */\n  @Listen(\"resize\", { target: \"window\" })\n  public onWindowResizeDebounced() {\n    if (this.resizeTimer) {\n      clearTimeout(this.resizeTimer)\n    }\n\n    this.resizeTimer = setTimeout(() => {\n      this.layout()\n    }, 10)\n  }\n\n  /**\n   * Draws the layout. Useful to redraw the component\n   * when initially rendered on a hidden background.\n   */\n  @Method()\n  public async layout() {\n    if (this.wrapperEl && this.stickerEl && this.contentWidth) {\n      this.stickerEl.style.transform = `scale(${\n        this.wrapperEl.clientWidth / this.contentWidth\n      })`\n    }\n  }\n\n  public componentDidLoad() {\n    this.layout()\n    const img = this.el.querySelector(\"img\")\n    if (img) {\n      img.addEventListener(\"load\", () => this.layout())\n    }\n  }\n\n  private getClassNames(mobile: boolean) {\n    const hasMobileText = hasSlot(this.el, \"text-mobile\")\n\n    return {\n      sticker: true,\n      \"hidden-sm-down\": hasMobileText && !mobile,\n      \"hidden-md-up\": hasMobileText && mobile,\n      hidden: !hasMobileText && mobile,\n      mobile,\n      [this.colorClass]: true,\n      [`bg-${this.bgColorClass}`]: true,\n      [getAppearance(this.el)]: true,\n    }\n  }\n\n  private getComponentClassNames() {\n    return {\n      component: true,\n      [getAppearance(this.el)]: true,\n    }\n  }\n\n  private getStyles(): Record<string, Record<string, string | undefined>> {\n    const isScalingEnabled = this.contentWidth !== undefined\n\n    return {\n      sticker: {\n        width: `${this.size}px`,\n        height: `${this.size}px`,\n        top: `${this.top}%`,\n        bottom: `${this.bottom}%`,\n        left: `${this.left}%`,\n        right: `${this.right}%`,\n        transformOrigin: `${this.top !== undefined ? \"top\" : \"bottom\"} ${\n          this.left !== undefined ? \"left\" : \"right\"\n        }`,\n      },\n      inner: {\n        maxWidth: `${this.size - 2 * padding}px`,\n        maxHeight: `${this.size - 2 * padding}px`,\n      },\n      slot: {\n        minWidth: `${isScalingEnabled ? 0 : this.size}px`,\n        minHeight: `${isScalingEnabled ? 0 : this.size}px`,\n      },\n    }\n  }\n\n  public render() {\n    return (\n      <Host>\n        <div\n          class={this.getComponentClassNames()}\n          ref={(el) => (this.wrapperEl = el)}\n        >\n          <div\n            ref={(el) => (this.stickerEl = el)}\n            class={this.getClassNames(false)}\n            style={this.getStyles().sticker}\n          >\n            <div\n              class=\"inner\"\n              style={this.getStyles().inner}\n              aria-hidden=\"true\"\n            >\n              <slot name=\"text\" />\n            </div>\n          </div>\n\n          <div class={this.getClassNames(true)}>\n            <slot name=\"text-mobile\" />\n          </div>\n\n          <div class=\"slot\" style={this.getStyles().slot}>\n            <slot />\n          </div>\n        </div>\n\n        <span class=\"sr-only\">{this.srHint}</span>\n      </Host>\n    )\n  }\n}\n","@import \"stylesheets/sdx/utilities/color\";\n@import \"stylesheets/sdx/utilities/bg-color\";\n@import \"stylesheets/sdx/utilities/screenreaders\";\n@import \"stylesheets/sdx/utilities/visibility\";\n\n:host {\n  display: block;\n}\n\n.component {\n  position: relative;\n\n  .sticker {\n    position: absolute;\n    overflow: hidden;\n    border: 1px solid;\n    border-radius: 50%;\n    white-space: nowrap;\n    pointer-events: none;\n\n    &.white,\n    &.sc-white {\n      border: 0;\n    }\n\n    .inner {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      text-align: center;\n      overflow: hidden;\n      padding-bottom: 1px; // for Firefox\n    }\n\n    &.mobile {\n      border-radius: 0;\n      width: 100%;\n      height: 40px;\n      padding-top: 8px;\n    }\n  }\n\n  .slot ::slotted(img) {\n    display: block;\n  }\n}\n"],"names":["StickerCircle","this","resizeTimer","clearTimeout","setTimeout","layout","wrapperEl","stickerEl","contentWidth","style","transform","clientWidth","img","el","querySelector","addEventListener","mobile","hasMobileText","hasSlot","sticker","hidden","colorClass","bgColorClass","getAppearance","component","isScalingEnabled","undefined","width","size","height","top","bottom","left","right","transformOrigin","inner","maxWidth","maxHeight","slot","minWidth","minHeight","h","Host","class","getComponentClassNames","ref","getClassNames","getStyles","name","srHint"],"sourceRoot":""}