{"version":3,"file":"static/js/553.688f84b5.chunk.js","mappings":"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","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/core/helpers/immutability-helpers.ts","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion-store.ts","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion.scss?tag=sdx-accordion&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion-item/accordion-item.scss?tag=sdx-accordion-item&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion-item/accordion-item.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion-item/accordion-item-body/accordion-item-body.scss?tag=sdx-accordion-item-body&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion-item/accordion-item-body/accordion-item-body.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion-item/accordion-item-header/accordion-item-header.scss?tag=sdx-accordion-item-header&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion-item/accordion-item-header/accordion-item-header.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion-item/accordion-item-section/accordion-item-section.scss?tag=sdx-accordion-item-section&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/accordion/accordion-item/accordion-item-section/accordion-item-section.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["/**\n * Adds an item to a list, if it does not exist, yet.\n * @param list The array that might contain the given item.\n * @param item The element that should be added.\n */\nexport function add<I>(list: I[], item: I): I[] {\n  if (!list.includes(item)) {\n    return [...list, item]\n  }\n\n  return list\n}\n\n/**\n * Removes an item from a list, if it exists.\n * @param list The array that might contain the given item.\n * @param item The element that should be removed.\n */\nexport function remove<I>(list: I[], item: I): I[] {\n  if (list.includes(item)) {\n    return list.filter((currentItem) => currentItem !== item)\n  }\n\n  return list\n}\n\n/**\n * Adds an item to a list, if it does not exist, yet.\n * If it does exist, however, it removes it.\n * @param list The array that might contain the given item.\n * @param item The element that should be added or removed.\n */\nexport function toggle<I>(list: I[], item: I): I[] {\n  if (!list.includes(item)) {\n    return add(list, item)\n  }\n\n  return remove(list, item)\n}\n\n/**\n * Like Array map() but for objects.\n * Example: { foo: \"bar\" } => { foo1: \"bar1\" }\n * @param obj Object to iterate.\n * @param cb Callback that transforms key and value.\n */\nexport function objectMap(\n  obj: Record<string, unknown> | undefined,\n  cb: (key: string, value: unknown) => Record<string, unknown>\n): Record<string, unknown> {\n  let newObj: Record<string, unknown> = {}\n\n  for (const key in obj) {\n    newObj = { ...newObj, ...cb(key, obj[key]) }\n  }\n\n  return newObj\n}\n","import { Reducer } from \"redux\"\nimport { ArrowPosition } from \"./types\"\nimport { sortByAppearanceInDomTree } from \"../../core/helpers/webcomponent-helpers\"\nimport { add, remove } from \"../../core/helpers/immutability-helpers\"\n\nexport interface AccordionState {\n  accordionItemEls: HTMLSdxAccordionItemElement[]\n  openAccordionItemEls: HTMLSdxAccordionItemElement[]\n  arrowPosition: ArrowPosition\n  theme: \"borderless\" | \"\"\n  keepOpen: boolean\n  reappending: boolean\n  reappendedItems: number\n  userInteractionInProgress: boolean\n}\n\nexport type AccordionActions =\n  | {\n      type: \"ADD_ACCORDION_ITEM_EL\"\n      accordionItemEl: HTMLSdxAccordionItemElement\n    }\n  | {\n      type: \"REMOVE_ACCORDION_ITEM_EL\"\n      accordionItemEl: HTMLSdxAccordionItemElement\n    }\n  | { type: \"UPDATE_REAPPENDING\" }\n  | {\n      type: \"OPEN_ACCORDION_ITEM_EL\"\n      accordionItemEl: HTMLSdxAccordionItemElement\n    }\n  | { type: \"OPEN_ALL_ACCORDION_ITEM_ELS\" }\n  | {\n      type: \"CLOSE_ACCORDION_ITEM_EL\"\n      accordionItemEl: HTMLSdxAccordionItemElement\n    }\n  | { type: \"CLOSE_ALL_ACCORDION_ITEM_ELS\" }\n  | {\n      type: \"TOGGLE_ACCORDION_ITEM_EL\"\n      accordionItemEl: HTMLSdxAccordionItemElement\n    }\n\nfunction open(\n  state: AccordionState,\n  accordionItemEl: HTMLSdxAccordionItemElement\n): AccordionState {\n  // Do nothing if it's already open\n  if (state.openAccordionItemEls.includes(accordionItemEl)) {\n    return state\n  }\n\n  return {\n    ...state,\n    openAccordionItemEls: state.keepOpen\n      ? [...state.openAccordionItemEls, accordionItemEl]\n      : [accordionItemEl],\n  }\n}\n\nfunction close(\n  state: AccordionState,\n  accordionItemEl: HTMLSdxAccordionItemElement\n): AccordionState {\n  // Do nothing if it's already closed\n  if (!state.openAccordionItemEls.includes(accordionItemEl)) {\n    return state\n  }\n\n  return {\n    ...state,\n    openAccordionItemEls: state.openAccordionItemEls.filter(\n      (el) => el !== accordionItemEl\n    ),\n  }\n}\n\nexport const accordionReducer: Reducer<AccordionState, AccordionActions> = (\n  state = {} as AccordionState,\n  action\n): AccordionState => {\n  switch (action.type) {\n    case \"ADD_ACCORDION_ITEM_EL\":\n      return {\n        ...state,\n        accordionItemEls: add(\n          state.accordionItemEls,\n          action.accordionItemEl\n        ).sort(sortByAppearanceInDomTree),\n      }\n\n    case \"REMOVE_ACCORDION_ITEM_EL\":\n      return {\n        ...state,\n        accordionItemEls: remove(\n          state.accordionItemEls,\n          action.accordionItemEl\n        ).sort(sortByAppearanceInDomTree),\n      }\n\n    case \"UPDATE_REAPPENDING\":\n      const reappendedItems = state.reappendedItems + 1\n      const reappending = reappendedItems !== state.accordionItemEls.length\n\n      return {\n        ...state,\n        reappending,\n        reappendedItems: reappending ? reappendedItems : 0,\n      }\n\n    case \"OPEN_ACCORDION_ITEM_EL\":\n      return open(state, action.accordionItemEl)\n\n    case \"OPEN_ALL_ACCORDION_ITEM_ELS\":\n      return { ...state, openAccordionItemEls: state.accordionItemEls }\n\n    case \"CLOSE_ACCORDION_ITEM_EL\":\n      return close(state, action.accordionItemEl)\n\n    case \"CLOSE_ALL_ACCORDION_ITEM_ELS\":\n      return { ...state, openAccordionItemEls: [] }\n\n    case \"TOGGLE_ACCORDION_ITEM_EL\":\n      const isOpen = state.openAccordionItemEls.includes(action.accordionItemEl)\n\n      return isOpen\n        ? close(state, action.accordionItemEl)\n        : open(state, action.accordionItemEl)\n\n    default:\n      return state\n  }\n}\n\nexport function getInitialState(): AccordionState {\n  return {\n    accordionItemEls: [],\n    openAccordionItemEls: [],\n    arrowPosition: \"right\",\n    theme: \"\",\n    keepOpen: false,\n    reappending: false,\n    reappendedItems: 0,\n    userInteractionInProgress: false,\n  }\n}\n",":host {\n  display: block;\n}\n\n.component {\n  background: transparent;\n  border: 1px solid $color-accordion-border;\n  border-radius: $border-radius-large;\n  overflow: hidden; // clip border-radius\n\n  &.borderless {\n    border: 0;\n  }\n}\n\n.component.sdx--dark-theme {\n  border-color: $color-gray-tint-7-dark-theme;\n}\n","import {\n  Component,\n  h,\n  Element,\n  State,\n  Prop,\n  Watch,\n  Method,\n} from \"@stencil/core\"\nimport { ArrowPosition } from \"./types\"\nimport {\n  AccordionState,\n  AccordionActions,\n  accordionReducer,\n  getInitialState,\n} from \"./accordion-store\"\nimport {\n  StoreConnection,\n  StateHandle,\n  closest,\n  getAppearance,\n} from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-accordion\",\n  styleUrl: \"accordion.scss\",\n  shadow: true,\n})\nexport class Accordion {\n  private store: StoreConnection<this, AccordionState, AccordionActions>\n  private isReappending = false\n\n  @Element() public el!: HTMLSdxAccordionElement\n\n  @State() public state!: StateHandle<AccordionState>\n\n  /**\n   * Whether multiple accordion items can be open at the same time.\n   */\n  @Prop() public keepOpen: boolean = false\n\n  /**\n   * Position of the arrow (chevron).\n   * @private\n   */\n  @Prop() public arrowPosition: ArrowPosition = \"right\"\n\n  /**\n   * @private\n   */\n  @Prop() public componentStyle: Record<string, string | undefined> = {}\n\n  /**\n   * Accordion theme.\n   * Borderless accordions are meant to be used for more spacious layouts or inside a Card component.\n   * See [examples](/samples/accordion.html).\n   */\n  @Prop() public theme: \"borderless\" | \"\" = \"\"\n\n  @Watch(\"arrowPosition\")\n  public arrowPositionChanged() {\n    this.store.set(\"arrowPosition\", this.arrowPosition)\n  }\n\n  @Watch(\"keepOpen\")\n  public keepOpenChanged() {\n    this.store.set(\"keepOpen\", this.keepOpen)\n  }\n\n  /**\n   * Opens a specific accordion item.\n   * @param index Index of the accordion item to be opened.\n   */\n  @Method()\n  public async open(index: number) {\n    const accordionItemEl = this.state.get().accordionItemEls[index]\n    this.store.dispatch({ type: \"OPEN_ACCORDION_ITEM_EL\", accordionItemEl })\n  }\n\n  /**\n   * Opens all accordion items.\n   */\n  @Method()\n  public async openAll() {\n    this.store.dispatch({ type: \"OPEN_ALL_ACCORDION_ITEM_ELS\" })\n  }\n\n  /**\n   * Closes a specific accordion item.\n   * @param index Index of the accordion item to be closed.\n   */\n  @Method()\n  public async close(index: number) {\n    const accordionItemEl = this.state.get().accordionItemEls[index]\n    this.store.dispatch({ type: \"CLOSE_ACCORDION_ITEM_EL\", accordionItemEl })\n  }\n\n  /**\n   * Closes all accordion items.\n   */\n  @Method()\n  public async closeAll() {\n    this.store.dispatch({ type: \"CLOSE_ALL_ACCORDION_ITEM_ELS\" })\n  }\n\n  /**\n   * Toggles a specific accordion item.\n   * @param index Index of the accordion item to be toggled.\n   */\n  @Method()\n  public async toggle(index: number) {\n    const accordionItemEl = this.state.get().accordionItemEls[index]\n    this.store.dispatch({ type: \"TOGGLE_ACCORDION_ITEM_EL\", accordionItemEl })\n  }\n\n  constructor() {\n    this.store = new StoreConnection(\n      this,\n      accordionReducer,\n      getInitialState(),\n      [\"accordionItemEls\"]\n    )\n\n    this.store.set(\"arrowPosition\", this.arrowPosition)\n    this.store.set(\"theme\", this.theme)\n    this.store.set(\"keepOpen\", this.keepOpen)\n\n    this.store.flush()\n  }\n\n  public connectedCallback() {\n    // The component is being reappended\n    if (this.isReappending) {\n      this.store.set(\"reappending\", true)\n\n      this.isReappending = false\n    }\n  }\n\n  public disconnectedCallback() {\n    // Know that a disconnection happened, maybe because the component was\n    // removed, cached or it's being appended to document.body\n    const isStillInDocument = closest(this.el, document.documentElement)\n\n    if (isStillInDocument) {\n      this.isReappending = true\n    }\n  }\n\n  public componentDidLoad() {\n    this.store.subscribe()\n  }\n\n  private getComponentClassNames() {\n    return {\n      component: true,\n      [getAppearance(this.el)]: true,\n      [this.theme]: true,\n    }\n  }\n\n  public render() {\n    return (\n      <div class={this.getComponentClassNames()} style={this.componentStyle}>\n        <slot />\n      </div>\n    )\n  }\n}\n",":host {\n  display: block;\n\n  p {\n    padding: 12px $baseline-2;\n  }\n}\n\n:host(.center) {\n  padding: 0;\n}\n\n:host(:not(:last-of-type)) {\n  .component {\n    border-bottom: 1px solid $color-accordion-border;\n  }\n}\n\n.component {\n  position: relative;\n}\n\n:host(:not(:last-of-type).sdx--dark-theme) {\n  .component {\n    border-color: $color-gray-tint-7-dark-theme;\n  }\n}\n","import { Component, h, Element, State, Prop, Watch, Host } from \"@stencil/core\"\nimport {\n  AccordionState,\n  AccordionActions,\n  accordionReducer,\n  getInitialState,\n} from \"../accordion-store\"\nimport {\n  StoreConnection,\n  StateHandle,\n  getAppearance,\n} from \"../../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-accordion-item\",\n  styleUrl: \"accordion-item.scss\",\n  shadow: true,\n})\nexport class AccordionItem {\n  private store: StoreConnection<this, AccordionState, AccordionActions>\n\n  @Element() public el!: HTMLSdxAccordionItemElement\n\n  @State() public state!: StateHandle<AccordionState>\n\n  /**\n   * If the accordion item is open.\n   */\n  @Prop() public open: boolean = false\n\n  @Watch(\"open\")\n  public openChanged() {\n    this.open\n      ? this.store.dispatch({\n          type: \"OPEN_ACCORDION_ITEM_EL\",\n          accordionItemEl: this.el,\n        })\n      : this.store.dispatch({\n          type: \"CLOSE_ACCORDION_ITEM_EL\",\n          accordionItemEl: this.el,\n        })\n  }\n\n  constructor() {\n    this.store = new StoreConnection(\n      this,\n      accordionReducer,\n      getInitialState(),\n      [\"openAccordionItemEls\", \"arrowPosition\", \"reappending\"]\n    )\n  }\n\n  public connectedCallback() {\n    // Don't do anything while the component is being reappended (maybe\n    // because it's being appended to document.body), but send a \"ping\" for\n    // each child (sdx-accordion-item).\n    // After each child is has finished, \"reappending\" will be marked \"done\" by\n    // the store.\n    if (this.state.get().reappending) {\n      this.store?.dispatch({ type: \"UPDATE_REAPPENDING\" })\n      return\n    }\n\n    // Register self\n    this.store.dispatch({\n      type: \"ADD_ACCORDION_ITEM_EL\",\n      accordionItemEl: this.el,\n    })\n\n    if (this.open) {\n      this.store.dispatch({\n        type: \"OPEN_ACCORDION_ITEM_EL\",\n        accordionItemEl: this.el,\n      })\n    }\n  }\n\n  public disconnectedCallback() {\n    // See connectedCallback() for explanation\n    if (this.state.get().reappending) {\n      return\n    }\n\n    // Unregister self\n    this.store.dispatch({\n      type: \"REMOVE_ACCORDION_ITEM_EL\",\n      accordionItemEl: this.el,\n    })\n\n    if (this.open) {\n      this.store.dispatch({\n        type: \"CLOSE_ACCORDION_ITEM_EL\",\n        accordionItemEl: this.el,\n      })\n    }\n  }\n\n  public componentDidLoad() {\n    this.store.subscribe()\n  }\n\n  private getHostClassNames() {\n    const { arrowPosition } = this.state.get()\n\n    return {\n      [getAppearance(this.el)]: true,\n      [arrowPosition]: true,\n    }\n  }\n\n  public render() {\n    return (\n      <Host class={this.getHostClassNames()}>\n        <div class=\"component\">\n          <slot />\n        </div>\n      </Host>\n    )\n  }\n}\n",":host {\n  display: none; // initially closed\n  overflow: hidden;\n}\n\n.component {\n  margin: 0 $baseline-4 $baseline-2 $baseline-2;\n\n  &.borderless {\n    margin: 0 $baseline-2 $baseline-2 0;\n  }\n}\n","import {\n  Component,\n  h,\n  Element,\n  State,\n  Prop,\n  Watch,\n  Event,\n  EventEmitter,\n  Method,\n  Host,\n} from \"@stencil/core\"\nimport anime from \"animejs\"\nimport {\n  AccordionState,\n  AccordionActions,\n  accordionReducer,\n  getInitialState,\n} from \"../../accordion-store\"\nimport { Display } from \"../../../../core/types/types\"\nimport {\n  StoreConnection,\n  StateHandle,\n  closest,\n} from \"../../../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-accordion-item-body\",\n  styleUrl: \"accordion-item-body.scss\",\n  shadow: true,\n})\nexport class AccordionItemBody {\n  private store: StoreConnection<this, AccordionState, AccordionActions>\n  private animationDuration = 300\n  private componentDidLoadComplete = false\n\n  @Element() public el!: HTMLSdxAccordionItemBodyElement\n\n  /**\n   * @private\n   * Disable animations for testing.\n   */\n  @Prop() public animated: boolean = true\n\n  @State() public state!: StateHandle<AccordionState>\n\n  @State() private display!: Display // will be set in the constructor\n\n  /**\n   * @private\n   */\n  @Prop() public componentStyle: Record<string, string | undefined> = {}\n\n  @Watch(\"state\")\n  public stateChanged({}, prev: StateHandle<AccordionState>) {\n    const state = this.state.get()\n    const prevState = prev.get()\n\n    if (state.openAccordionItemEls !== prevState.openAccordionItemEls) {\n      this.openAccordionItemElsChanged(state, prevState)\n    }\n  }\n\n  /**\n   * Emitted when the menu becomes visible.\n   */\n  @Event() public sdxdisplaychange!: EventEmitter<{ display: Display }>\n\n  /**\n   * Toggles body directly when initial load or with an animation.\n   * @param isOpen Open state of the accordion item.\n   * @private\n   */\n  @Method()\n  public async toggle(isOpen: boolean) {\n    if (isOpen) {\n      this.store.dispatch({\n        type: \"OPEN_ACCORDION_ITEM_EL\",\n        accordionItemEl: this.getParent(),\n      })\n    } else {\n      this.store.dispatch({\n        type: \"CLOSE_ACCORDION_ITEM_EL\",\n        accordionItemEl: this.getParent(),\n      })\n    }\n  }\n\n  private getAnimationDuration(): number {\n    if (!this.componentDidLoadComplete) {\n      return 0\n    }\n\n    return this.animated ? this.animationDuration : 0\n  }\n\n  constructor() {\n    this.store = new StoreConnection(\n      this,\n      accordionReducer,\n      getInitialState(),\n      [\"accordionItemEls\", \"openAccordionItemEls\", \"arrowPosition\", \"theme\"]\n    )\n  }\n\n  public componentWillLoad() {\n    if (this.isOpen()) {\n      this.open()\n    } else {\n      this.close()\n    }\n  }\n\n  public componentDidLoad() {\n    this.store.subscribe()\n\n    this.componentDidLoadComplete = true\n  }\n\n  private setDisplay(\n    display: Display,\n    userInteractionInProgress: boolean\n  ): void {\n    this.display = display\n\n    // Only fire events on end user interaction\n    if (!userInteractionInProgress) {\n      return\n    }\n\n    this.sdxdisplaychange.emit({ display })\n  }\n\n  private openAccordionItemElsChanged({}, prevState: AccordionState) {\n    const isOpen = this.isOpen()\n    const wasOpen = this.isOpen(prevState.openAccordionItemEls)\n\n    if (isOpen && !wasOpen) {\n      this.open()\n    } else if (!isOpen && wasOpen) {\n      this.close()\n    }\n  }\n\n  /**\n   * Opens item with an animation.\n   */\n  private open(): void {\n    const { userInteractionInProgress } = this.state.get()\n\n    this.setDisplay(\"opening\", userInteractionInProgress)\n\n    anime.set(this.el, {\n      display: \"block\",\n    })\n\n    // Shortly set the height to take measurements.\n    // \"auto\" can't be set using anime.set(), see:\n    // https://github.com/juliangarnier/anime/issues/758\n    this.el.style.height = \"auto\"\n\n    const clientHeight = this.el.clientHeight\n\n    anime.set(this.el, {\n      height: 0,\n    })\n\n    anime({\n      targets: this.el,\n      duration: this.getAnimationDuration(),\n      height: clientHeight,\n      opacity: 1,\n      easing: \"cubicBezier(0.550, 0.085, 0.320, 1)\",\n      complete: () => {\n        // \"auto\" can't be set, overridden or removed using anime.set(), see:\n        // https://github.com/juliangarnier/anime/issues/758\n        this.el.style.height = \"auto\"\n\n        this.setDisplay(\"open\", userInteractionInProgress)\n      },\n    })\n  }\n\n  /**\n   * Closes item with an animation.\n   */\n  private close() {\n    const { userInteractionInProgress } = this.state.get()\n\n    this.setDisplay(\"closing\", userInteractionInProgress)\n\n    // Can't animate \"auto\", therefore update to current height.\n    // Note: the height can't be overwritten by anime.set() because it was set\n    // using \"this.el.style.height\" in \"open()\", see:\n    // https://github.com/juliangarnier/anime/issues/758\n    this.el.style.height = `${this.el.clientHeight}px`\n\n    anime({\n      targets: this.el,\n      duration: this.getAnimationDuration(),\n      height: 0,\n      opacity: 0,\n      easing: \"cubicBezier(0.550, 0.085, 0.320, 1)\",\n      complete: () => {\n        anime.set(this.el, { display: \"none\" })\n        this.setDisplay(\"closed\", userInteractionInProgress)\n      },\n    })\n  }\n\n  private getParent(): HTMLSdxAccordionItemElement {\n    const { accordionItemEls } = this.state.get()\n\n    return accordionItemEls.find((el) => closest(this.el, el))!\n  }\n\n  private isOpen(\n    openAccordionItemEls?: HTMLSdxAccordionItemElement[]\n  ): boolean {\n    if (!openAccordionItemEls) {\n      openAccordionItemEls = this.state.get().openAccordionItemEls\n    }\n\n    return openAccordionItemEls.some((el) => closest(this.el, el))\n  }\n\n  private getComponentClassNames() {\n    const { arrowPosition, theme } = this.state.get()\n\n    return {\n      component: true,\n      [arrowPosition]: true,\n      [theme]: true,\n    }\n  }\n\n  public render() {\n    return (\n      <Host aria-expanded={(this.display === \"open\").toString()}>\n        <div class={this.getComponentClassNames()} style={this.componentStyle}>\n          <slot />\n        </div>\n      </Host>\n    )\n  }\n}\n",".component {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin: 0;\n  padding: $baseline-2;\n  border: 0;\n  cursor: pointer;\n  outline: none;\n  font-family: inherit;\n  background: transparent;\n  text-align: left;\n\n  @include bp-sm {\n    padding-top: 21px; // As defined in Figma\n    padding-bottom: 21px; // As defined in Figma\n  }\n\n  &.borderless {\n    padding-left: 0;\n    padding-right: 0;\n\n    :host-context(sdx-accordion-item:first-child) & {\n      padding-top: 0;\n    }\n\n    :host-context(sdx-accordion-item:last-child) & {\n      padding-bottom: 0;\n    }\n  }\n\n  &:hover {\n    .arrow {\n      @include arrow($color-accordion--active);\n    }\n  }\n\n  &.open {\n    .arrow {\n      @include arrow--up;\n    }\n  }\n\n  &.left {\n    flex-direction: row-reverse;\n\n    .header {\n      padding-left: $baseline; // prevent content from crashing into arrow\n    }\n  }\n\n  &.right {\n    .header {\n      padding-right: $baseline; // prevent content from crashing into arrow\n    }\n  }\n\n  &.center {\n    justify-content: center;\n    min-height: $baseline-4;\n    border-top: 1px solid $color-accordion-border;\n\n    .header {\n      display: none;\n    }\n  }\n\n  .header {\n    flex: 1; // ensure slot stretches 100%\n  }\n\n  .arrow {\n    @include arrow(inherit);\n    @include arrow--down;\n    width: $arrow-width;\n    background: $color-accordion;\n  }\n}\n\n.component.sdx--dark-theme {\n  color: $color-gray-dark-theme; // set color for headline\n\n  &:hover {\n    .arrow {\n      @include arrow($color-int-blue2-dark-theme--active);\n    }\n  }\n\n  .arrow {\n    background: $color-int-blue2-dark-theme;\n  }\n\n  &.center {\n    border-top-color: $color-gray-tint-7-dark-theme;\n  }\n}\n","import {\n  Component,\n  h,\n  Element,\n  State,\n  Prop,\n  Listen,\n  Method,\n} from \"@stencil/core\"\nimport {\n  AccordionState,\n  AccordionActions,\n  accordionReducer,\n  getInitialState,\n} from \"../../accordion-store\"\nimport {\n  StoreConnection,\n  StateHandle,\n  closest,\n  getAppearance,\n} from \"../../../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-accordion-item-header\",\n  styleUrl: \"accordion-item-header.scss\",\n  shadow: true,\n})\nexport class AccordionItemHeader {\n  private store: StoreConnection<this, AccordionState, AccordionActions>\n\n  @Element() public el!: HTMLSdxAccordionItemHeaderElement\n\n  @State() public state!: StateHandle<AccordionState>\n\n  /**\n   * @private\n   */\n  @Prop() public buttonStyle: Record<string, string | undefined> = {}\n\n  /**\n   * @private\n   */\n  @Prop() public arrowStyle: Record<string, string | undefined> = {}\n\n  @Listen(\"click\")\n  public onClick() {\n    this.store.set(\"userInteractionInProgress\", true)\n\n    this.store.dispatch({\n      type: \"TOGGLE_ACCORDION_ITEM_EL\",\n      accordionItemEl: this.getParent(),\n    })\n\n    this.store.set(\"userInteractionInProgress\", false)\n  }\n\n  /**\n   * Closes this accordion item.\n   */\n  @Method()\n  public async closeItem() {\n    this.store.dispatch({\n      type: \"CLOSE_ACCORDION_ITEM_EL\",\n      accordionItemEl: this.getParent(),\n    })\n  }\n\n  /**\n   * Opens this accordion item.\n   */\n  @Method()\n  public async openItem() {\n    this.store.dispatch({\n      type: \"OPEN_ACCORDION_ITEM_EL\",\n      accordionItemEl: this.getParent(),\n    })\n  }\n\n  constructor() {\n    this.store = new StoreConnection(\n      this,\n      accordionReducer,\n      getInitialState(),\n      [\"accordionItemEls\", \"openAccordionItemEls\", \"arrowPosition\", \"theme\"]\n    )\n  }\n\n  public componentDidLoad() {\n    this.store.subscribe()\n  }\n\n  private getParent(): HTMLSdxAccordionItemElement {\n    const { accordionItemEls } = this.state.get()\n\n    return accordionItemEls.find((el) => closest(this.el, el))!\n  }\n\n  private isOpen(): boolean {\n    const { openAccordionItemEls } = this.state.get()\n\n    return openAccordionItemEls.some((el) => closest(this.el, el))\n  }\n\n  private getComponentClassNames() {\n    const { arrowPosition, theme } = this.state.get()\n\n    return {\n      component: true,\n      [getAppearance(this.el)]: true,\n      open: this.isOpen(),\n      [arrowPosition]: true,\n      [theme]: true,\n    }\n  }\n\n  public render() {\n    return (\n      <button\n        type=\"button\"\n        class={this.getComponentClassNames()}\n        style={this.buttonStyle}\n        aria-expanded={this.isOpen().toString()}\n      >\n        <div class=\"header\">\n          <slot />\n        </div>\n\n        <div class=\"arrow\" style={this.arrowStyle}></div>\n      </button>\n    )\n  }\n}\n",":host {\n  padding-top: $accordion-padding-vertical;\n  padding-bottom: $accordion-padding-vertical;\n  padding-left: $accordion-padding-horizontal;\n  padding-right: $accordion-padding-horizontal;\n  display: inline-block;\n  position: relative;\n}\n","import { Component, h } from \"@stencil/core\"\n\n@Component({\n  tag: \"sdx-accordion-item-section\",\n  styleUrl: \"accordion-item-section.scss\",\n  shadow: true,\n})\nexport class AccordionItemSection {\n  public render() {\n    return <slot />\n  }\n}\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["add","list","item","includes","remove","filter","currentItem","toggle","objectMap","obj","cb","newObj","key","open","state","accordionItemEl","openAccordionItemEls","keepOpen","close","el","accordionReducer","action","type","accordionItemEls","sort","sortByAppearanceInDomTree","reappendedItems","reappending","length","isOpen","Accordion","isReappending","this","store","StoreConnection","arrowPosition","theme","userInteractionInProgress","set","flush","index","get","dispatch","closest","document","documentElement","subscribe","component","getAppearance","h","class","getComponentClassNames","style","componentStyle","AccordionItem","_a","Host","getHostClassNames","AccordionItemBody","animationDuration","componentDidLoadComplete","prev","prevState","openAccordionItemElsChanged","getParent","animated","display","sdxdisplaychange","emit","wasOpen","setDisplay","anime","height","clientHeight","targets","duration","getAnimationDuration","opacity","easing","complete","find","some","toString","AccordionItemHeader","buttonStyle","arrowStyle","AccordionItemSection","_objectDestructuringEmpty","TypeError"],"sourceRoot":""}