{"version":3,"file":"static/js/875.c61e9b94.chunk.js","mappings":"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","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/stock-counter/stock-counter.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/stock-counter/stock-counter.scss?tag=sdx-stock-counter&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/tag/tag.scss?tag=sdx-tag&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/tag/tag.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/time-counter/time-counter.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/time-counter/time-counter.scss?tag=sdx-time-counter&encapsulation=shadow"],"sourcesContent":["import { Component, Element, Fragment, h, Prop } from \"@stencil/core\"\nimport { getAppearance } from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-stock-counter\",\n  styleUrl: \"stock-counter.scss\",\n  shadow: true,\n})\nexport class StockCounter {\n  @Element() public el!: HTMLSdxStockCounterElement\n\n  /**\n   * Amount, corresponds to the length of the coloured bar.\n   */\n  @Prop() public amount: number = 0\n\n  /**\n   * Total, corresponds to the full bar length.\n   */\n  @Prop() public total: number = 0\n\n  /**\n   * The colour variation.\n   */\n  @Prop() public theme: \"standard\" | \"sales\" = \"standard\"\n\n  private getComponentClassNames() {\n    return {\n      component: true,\n      [this.theme]: true,\n      [getAppearance(this.el)]: true,\n    }\n  }\n\n  private getStyle() {\n    if (this.amount < 0 || this.total < this.amount) {\n      return\n    }\n    return {\n      width: `${(this.amount / this.total) * 100}%`,\n    }\n  }\n\n  public render() {\n    const lang = this.el.lang || document.documentElement.lang || \"en\"\n    return (\n      <div class={this.getComponentClassNames()}>\n        <div class=\"bar-total\"></div>\n        <div class=\"bar-amount\" style={this.getStyle()}></div>\n        <div class=\"label\">\n          {lang === \"de\" && (\n            <Fragment>\n              <b>noch {this.amount}</b> von {this.total} Stück\n            </Fragment>\n          )}\n          {lang === \"fr\" && (\n            <Fragment>\n              <b>plus que {this.amount}</b> pièces sur {this.total}\n            </Fragment>\n          )}\n          {lang === \"it\" && (\n            <Fragment>\n              <b>ancora {this.amount}</b> pezzi su {this.total}\n            </Fragment>\n          )}\n          {lang === \"en\" && (\n            <Fragment>\n              <b>{this.amount}</b> of {this.total} remaining\n            </Fragment>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n","@import \"stylesheets/sdx/typography/typography\";\n\n.component {\n  position: relative;\n\n  .bar-total,\n  .bar-amount {\n    border: 0.5 * $baseline solid;\n    border-radius: 0.5 * $baseline;\n  }\n  .bar-total {\n    width: 100%;\n    border-color: $color-horizon;\n  }\n  .bar-amount {\n    position: absolute;\n    margin-top: -1 * $baseline;\n  }\n\n  .label {\n    margin-top: 2px;\n    @include typo-small;\n    @include font-semi-light;\n\n    b {\n      @include font-semi-bold;\n    }\n  }\n\n  &.sales {\n    .bar-amount {\n      border-color: $color-orchid;\n    }\n    .label {\n      color: $color-orchid;\n    }\n  }\n\n  &.standard {\n    .bar-amount {\n      border-color: $color-turquoise;\n    }\n    .label {\n      color: $color-navy;\n    }\n  }\n}\n\n.component.sdx--dark-theme {\n  .bar-total {\n    border-color: rgb($color-white, 0.6);\n  }\n\n  &.sales {\n    .bar-amount {\n      border-color: $color-orchid-dark-theme;\n    }\n    .label,\n    b {\n      color: $color-orchid-dark-theme;\n    }\n  }\n\n  &.standard {\n    .bar-amount {\n      border-color: $color-turquoise-dark-theme;\n    }\n    .label,\n    b {\n      color: $color-gray-dark-theme;\n    }\n  }\n}\n",".component {\n  display: flex;\n  align-items: center;\n  padding: 2px $baseline-2;\n  border-radius: $border-radius-large;\n  color: $color-white;\n  overflow: hidden;\n  width: fit-content;\n  margin: 2px 0;\n  @include typo-headline-6;\n\n  &.standard {\n    border-color: $color-sc-navy;\n    background-color: $color-sc-navy;\n\n    &.dark,\n    &.sdx--dark-theme {\n      padding: 1px $baseline-2;\n      background-color: rgb($color-white, 0.1);\n      border: 1px solid $color-white;\n    }\n  }\n\n  &.sales {\n    background-color: $color-orchid;\n  }\n\n  &.new {\n    @include gradient-1;\n  }\n\n  .icon {\n    margin-right: $baseline * 0.5;\n  }\n}\n\n.component.sdx--dark-theme {\n  &.sales {\n    background-color: $color-orchid-dark-theme;\n  }\n}\n","import { Component, h, Element, Prop } from \"@stencil/core\"\nimport { BackgroundTheme } from \"../../components\"\nimport { IconName } from \"../../core/types/icon-names\"\nimport {\n  getAppearance,\n  translate,\n} from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-tag\",\n  styleUrl: \"tag.scss\",\n  shadow: true,\n})\nexport class Tag {\n  @Element() public el!: HTMLSdxTagElement\n\n  /**\n   * Text content.\n   */\n  @Prop() public label?: string\n\n  /**\n   * The colour variation.\n   */\n  @Prop() public theme: \"standard\" | \"sales\" | \"new\" = \"standard\"\n\n  /**\n   * Background theme. Use \"dark\" when placed on a gradient background.\n   */\n  @Prop() public background: BackgroundTheme = \"light\"\n\n  /**\n   * Which icon to display.\n   */\n  @Prop() public iconName?: IconName\n\n  private getLabel(): string | undefined {\n    if (this.theme === \"new\") {\n      return translate(\"New\", this.el.lang)\n    }\n\n    return this.label\n  }\n\n  private getComponentClassNames() {\n    return {\n      component: true,\n      [this.theme]: true,\n      [this.background]: true,\n      [getAppearance(this.el)]: true,\n    }\n  }\n\n  public render() {\n    return (\n      <div class={this.getComponentClassNames()}>\n        {this.iconName && (\n          <sdx-icon class=\"icon\" size={1} iconName={this.iconName} />\n        )}\n\n        <span class=\"label\">{this.getLabel()}</span>\n      </div>\n    )\n  }\n}\n","import { Component, Element, h, Prop, State, Watch } from \"@stencil/core\"\nimport {\n  getAppearance,\n  translate,\n} from \"../../core/helpers/webcomponent-helpers\"\n\n/**\n * Converts the amount of milliseconds given to a struct of days, hours, minutes and seconds\n *\n * @param duration the duration to convert, in milliseconds\n */\nfunction extract(duration: number) {\n  const result = {\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  result.seconds = Math.ceil(duration / 1000)\n  result.minutes = Math.floor(result.seconds / 60)\n  result.seconds %= 60\n  result.hours = Math.floor(result.minutes / 60)\n  result.minutes %= 60\n  result.days = Math.floor(result.hours / 24)\n  result.hours %= 24\n\n  return result\n}\n\n@Component({\n  tag: \"sdx-time-counter\",\n  styleUrl: \"time-counter.scss\",\n  shadow: true,\n})\nexport class TimeCounter {\n  @Element() public el!: HTMLSdxTimeCounterElement\n  @State() private days: string = \"\"\n  @State() private hours: string = \"\"\n  @State() private minutes: string = \"\"\n  @State() private seconds: string = \"\"\n  @State() private ended = true\n  private updateTimer?: NodeJS.Timer\n  private timestamp: number = 0\n\n  /**\n   * End date, in date time string format (YYYY-MM-DDTHH:mm:ss.sssZ).\n   */\n  @Prop() public date?: string\n\n  /**\n   * The colour variation.\n   */\n  @Prop() public theme: \"standard\" | \"sales\" = \"standard\"\n\n  @Watch(\"date\")\n  public dateChanged() {\n    this.timestamp = this.getTimestamp()\n    clearTimeout(this.updateTimer)\n    this.update()\n  }\n\n  public componentDidLoad() {\n    this.dateChanged()\n  }\n\n  public disconnectedCallback() {\n    clearTimeout(this.updateTimer)\n  }\n\n  private getTimestamp() {\n    return Date.parse(\n      this.date?.replace(/(\\d+)[.](\\d+)[.](\\d+)/g, \"$1-$2-$3\") || \"\"\n    )\n  }\n\n  private update() {\n    const now = Date.now()\n    this.ended = isNaN(this.timestamp) || this.timestamp < now\n    if (this.ended) {\n      return\n    }\n    const countdown = extract(this.timestamp - now)\n    this.days = `${countdown.days}`.padStart(2, \"0\")\n    this.hours = `${countdown.hours}`.padStart(2, \"0\")\n    this.minutes = `${countdown.minutes}`.padStart(2, \"0\")\n    this.seconds = `${countdown.seconds}`.padStart(2, \"0\")\n\n    this.updateTimer = setTimeout(() => {\n      this.update()\n    }, 500)\n  }\n\n  private getComponentClassNames() {\n    return {\n      component: true,\n      [this.theme]: true,\n      [getAppearance(this.el)]: true,\n      ended: this.ended,\n    }\n  }\n\n  public render() {\n    return (\n      <div class={this.getComponentClassNames()}>\n        <span class=\"sr-only\">{translate(\"Countdown\", this.el.lang)}: </span>\n        <span>{this.days}</span>\n        <span class=\"unit\">\n          {translate(this.days === \"01\" ? \"day\" : \"days\", this.el.lang)}\n        </span>\n        <span class=\"separator\">:</span>\n        <span>{this.hours}</span>\n        <span class=\"unit\">{translate(\"hrs\", this.el.lang)}</span>\n        <span class=\"separator\">:</span>\n        <span>{this.minutes}</span>\n        <span class=\"unit\">{translate(\"min\", this.el.lang)}</span>\n        <span class=\"separator\">:</span>\n        <span>{this.seconds}</span>\n        <span class=\"unit\">{translate(\"sec\", this.el.lang)}</span>\n      </div>\n    )\n  }\n}\n","@import \"stylesheets/sdx/typography/typography\";\n@import \"stylesheets/sdx/utilities/screenreaders\";\n\n.component {\n  @include typo-headline-5;\n  @include font-semi-bold;\n  white-space: nowrap;\n\n  .separator {\n    margin: 0 $baseline;\n  }\n\n  .unit {\n    @include typo-small;\n    @include font-semi-light;\n    margin-left: 2px;\n  }\n\n  &.sales {\n    color: $color-orchid;\n  }\n\n  &.standard {\n    color: $color-navy;\n  }\n\n  &.ended {\n    visibility: hidden;\n  }\n}\n\n.component.sdx--dark-theme {\n  &.sales {\n    color: $color-orchid-dark-theme;\n  }\n\n  &.standard {\n    color: $color-gray-dark-theme;\n  }\n}\n"],"names":["StockCounter","component","this","theme","getAppearance","el","amount","total","width","lang","document","documentElement","h","class","getComponentClassNames","style","getStyle","Fragment","Tag","translate","label","background","iconName","size","getLabel","TimeCounter","timestamp","getTimestamp","clearTimeout","updateTimer","update","dateChanged","Date","parse","date","_a","replace","now","ended","isNaN","countdown","duration","result","days","hours","minutes","seconds","Math","ceil","floor","extract","padStart","setTimeout"],"sourceRoot":""}