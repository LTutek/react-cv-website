{"version":3,"file":"static/js/343.c2c81bd7.chunk.js","mappings":"oPAqBaA,EAAM,W,8CAET,KAAAC,2BAAuC,kBAAM,MAC7C,KAAAC,0BAAsC,kBAAM,MAC5C,KAAAC,qBAAiC,kBAAM,M,WAeC,G,iBAKX,G,YAKL,G,qBAKS,G,2GAuBN,EAzDlB,2CA4DV,WACLC,KAAKC,6BA7DU,yCAiEV,WACLD,KAAKE,kCAlEU,mCAsEV,WACLF,KAAKG,4BAvEU,wCA2EV,WACLH,KAAKI,iCA5EU,qCAiFV,WAAuB,WACxBJ,KAAKK,aACPC,aAAaN,KAAKK,aAGpBL,KAAKK,YAAcE,YAAW,YAC5BC,EAAAA,EAAAA,GAAY,EAAKC,MAChB,MAxFY,+BA2FV,WACLT,KAAKE,gCACLF,KAAKG,0BACLH,KAAKI,iCA9FU,wDAqGV,oFACU,QAAf,EAAAJ,KAAKU,kBAAUC,IAAAA,GAAAA,EAAEC,UADZ,gDArGU,gFAyGT,WACFZ,KAAKU,YACPV,KAAKH,2BAA2BG,KAAKU,WAAWG,SA3GnC,sCA+GT,WACNb,KAAKD,qBAAqBC,KAAKa,OAC/Bb,KAAKF,0BAA0BE,KAAKa,SAjHrB,2CAoHT,WACNb,KAAKH,4BAA6BiB,EAAAA,EAAAA,GAAcd,KAAKe,wBArHtC,0CAwHT,WACNf,KAAKF,2BAA4BgB,EAAAA,EAAAA,GAAcd,KAAKgB,uBAzHrC,qCA4HT,WACNhB,KAAKD,sBAAuBe,EAAAA,EAAAA,GAAcd,KAAKiB,kBA7HhC,oBAgIV,WAAM,WACX,OACEC,EAAAA,EAAAA,GAAAA,MAAAA,CAAKC,MAAM,YACTD,EAAAA,EAAAA,GAAAA,YAAAA,CACEL,MAAOb,KAAKa,MACZO,OAAQpB,KAAKoB,OACbC,mBAAoBrB,KAAKsB,gBACzBC,KAAK,SACLC,YAAaxB,KAAKwB,YAClBC,YAAa,kBAAM,EAAKC,gBACxBC,QAAS,SAACC,GACR,EAAKf,MAASe,EAAEC,OAA+BhB,OAEjDiB,IAAK,SAACrB,GAAD,OAAS,EAAKC,WAAaD,GAChCsB,KAAK,cA9II,yB,uBAAA,gC,oLAAA,KAYFnC,EAAAA,WAAa,Q,QCjCZ","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/search_deprecated/search.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/search_deprecated/search.scss?tag=sdx-search&encapsulation=shadow"],"sourcesContent":["// WARNING\n// This component has been deprecated in favor of <sdx-input type=\"search\" />.\n// Do not make change in this file - it only exists for backwards compatibility.\n\nimport {\n  Component,\n  h,\n  Element,\n  Prop,\n  Watch,\n  Listen,\n  Method,\n  forceUpdate,\n} from \"@stencil/core\"\nimport { parseFunction } from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-search\",\n  styleUrl: \"search.scss\",\n  shadow: true,\n})\nexport class Search {\n  private sdxInputEl?: HTMLSdxInputElement\n  private invokeSearchSubmitCallback: Function = () => null\n  private invokeValueChangeCallback: Function = () => null\n  private invokeChangeCallback: Function = () => null\n  private resizeTimer?: NodeJS.Timer\n\n  /**\n   * Emitted whenever user is typing or clearing the search field.\n   * @event\n   */\n  // @ts-ignore just for documentation purposes\n  private static eventInput = \"input\"\n\n  @Element() public el!: HTMLSdxSearchElement\n\n  /**\n   * Can be used for both reading and writing the value.\n   */\n  @Prop({ mutable: true }) public value: string = \"\"\n\n  /**\n   * Default text that will disappear on type.\n   */\n  @Prop() public placeholder: string = \"\"\n\n  /**\n   * Text for the screen reader labelling the search input field.\n   */\n  @Prop() public srHint: string = \"\"\n\n  /**\n   * Button text for the screen reader to read in place of the search icon.\n   */\n  @Prop() public srHintForButton: string = \"\"\n\n  /**\n   * Callback that will fire on hitting enter or on clicking the button.\n   */\n  @Prop() public searchSubmitCallback?: ((value: string) => void) | string\n\n  /**\n   * Callback that will fire when the value has changed, regardless of method (keyboard or programmatical).\n   * @deprecated use input event instead.\n   */\n  @Prop() public changeCallback?: ((value: string) => void) | string\n\n  /**\n   * Callback that will fire when the value has changed, regardless of method (keyboard or programmatical). Same as changeCallback.\n   * @deprecated use input event instead.\n   */\n  @Prop() public valueChangeCallback?: ((value: string) => void) | string\n\n  /**\n   * Disable animations for testing.\n   * @private\n   */\n  @Prop() public animated: boolean = true\n\n  @Watch(\"value\")\n  public valueChanged() {\n    this.invokeAllChangeCallbacks()\n  }\n\n  @Watch(\"searchSubmitCallback\")\n  public searchSubmitCallbackChanged() {\n    this.setInvokeSearchSubmitCallback()\n  }\n\n  @Watch(\"changeCallback\")\n  public changeCallbackChanged() {\n    this.setInvokeChangeCallback()\n  }\n\n  @Watch(\"valueChangeCallback\")\n  public valueChangeCallbackChanged() {\n    this.setInvokeValueChangeCallback()\n  }\n\n  // Rerender on resize to show \"clearable\" button if needed\n  @Listen(\"resize\", { target: \"window\" })\n  public onWindowResizeDebounced() {\n    if (this.resizeTimer) {\n      clearTimeout(this.resizeTimer)\n    }\n\n    this.resizeTimer = setTimeout(() => {\n      forceUpdate(this.el)\n    }, 10)\n  }\n\n  public componentWillLoad() {\n    this.setInvokeSearchSubmitCallback()\n    this.setInvokeChangeCallback()\n    this.setInvokeValueChangeCallback()\n  }\n\n  /**\n   * Set focus to element.\n   */\n  @Method()\n  public async doFocus() {\n    this.sdxInputEl?.doFocus()\n  }\n\n  private submitSearch(): void {\n    if (this.sdxInputEl) {\n      this.invokeSearchSubmitCallback(this.sdxInputEl.value)\n    }\n  }\n\n  private invokeAllChangeCallbacks() {\n    this.invokeChangeCallback(this.value)\n    this.invokeValueChangeCallback(this.value)\n  }\n\n  private setInvokeSearchSubmitCallback(): void {\n    this.invokeSearchSubmitCallback = parseFunction(this.searchSubmitCallback)\n  }\n\n  private setInvokeValueChangeCallback(): void {\n    this.invokeValueChangeCallback = parseFunction(this.valueChangeCallback)\n  }\n\n  private setInvokeChangeCallback(): void {\n    this.invokeChangeCallback = parseFunction(this.changeCallback)\n  }\n\n  public render() {\n    return (\n      <div class=\"wrapper\">\n        <sdx-input\n          value={this.value}\n          srHint={this.srHint}\n          srHintSearchButton={this.srHintForButton}\n          type=\"search\"\n          placeholder={this.placeholder}\n          onSdxsearch={() => this.submitSearch()}\n          onInput={(e: Event) => {\n            this.value = (e.target as HTMLSdxInputElement).value\n          }}\n          ref={(el) => (this.sdxInputEl = el)}\n          role=\"search\"\n        />\n      </div>\n    )\n  }\n}\n","// WARNING\n// This component has been deprecated in favor of <sdx-input type=\"search\" />.\n// Do not make change in this file - it only exists for backwards compatibility.\n\n@import \"stylesheets/sdx/utilities/screenreaders\";\n\n:host {\n  color: $color-int-blue; // for search icon\n}\n\n.wrapper {\n  position: relative;\n}\n"],"names":["Search","invokeSearchSubmitCallback","invokeValueChangeCallback","invokeChangeCallback","this","invokeAllChangeCallbacks","setInvokeSearchSubmitCallback","setInvokeChangeCallback","setInvokeValueChangeCallback","resizeTimer","clearTimeout","setTimeout","forceUpdate","el","sdxInputEl","_a","doFocus","value","parseFunction","searchSubmitCallback","valueChangeCallback","changeCallback","h","class","srHint","srHintSearchButton","srHintForButton","type","placeholder","onSdxsearch","submitSearch","onInput","e","target","ref","role"],"sourceRoot":""}