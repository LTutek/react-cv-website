{"version":3,"file":"static/js/103.97d3f976.chunk.js","mappings":"uSAqBaA,EAAM,WA+GjB,+B,0BAtGqD,U,gBAMS,Q,eAK3B,E,UAKL,G,8BAUC,G,sDAiBC,G,4CAaD,G,UAMG,S,cAMA,E,kBAmCd,WAAdC,KAAKC,OACPD,KAAKE,uBAAyBC,SAASC,cAAc,SACrDJ,KAAKE,uBAAuBD,KAAOD,KAAKC,KACxCD,KAAKE,uBAAuBG,SAAWL,KAAKK,SAC5CL,KAAKE,uBAAuBI,QAAS,EAErCN,KAAKE,uBAAuBK,QAAU,SAACC,GAAD,OAAOA,EAAEC,mBAC/CT,KAAKU,GAAGC,OAAOX,KAAKE,yBAvHP,8CAuFV,WACDF,KAAKE,yBACPF,KAAKE,uBAAuBG,SAAWL,KAAKK,YAzF/B,wDAiGV,oFACW,QAAhB,EAAAL,KAAKY,mBAAWC,IAAAA,GAAAA,EAAEC,QADb,gDAjGU,gFAsGV,cAtGU,qBA2GV,W,MACsB,QAA3B,EAAAd,KAAKE,8BAAsBW,IAAAA,GAAAA,EAAEE,UA5Gd,+BA2HT,WAAiB,MACvB,sBACGf,KAAKgB,OAAQ,IADhB,oBAEYhB,KAAKK,WAFjB,mBAGWL,KAAKiB,UAHhB,UAIGC,EAAAA,EAAAA,GAAclB,KAAKU,KAAM,GAJ5B,IA5He,iCAoIT,WAAmB,MACnBS,EAAWnB,KAAKoB,eAAiB,EAEvC,UACEC,WAAW,EACX,gBAAgB,IAFlB,SAGGrB,KAAKgB,OAAQ,IAHhB,SAIE,gBAAqC,SAApBhB,KAAKsB,aAJxB,oBAKYtB,KAAKK,WALjB,oBAM0B,IAAfL,KAAKuB,QANhB,cAOMJ,EAAW,GAPjB,IAvIe,6BAkJT,WACN,OAAkC,IAA9BnB,KAAKwB,qBACA,QACgC,IAA9BxB,KAAKwB,qBACP,aAEP,IAxJa,yBA6JT,WACN,GAAmB,gBAAfxB,KAAKgB,MACP,OAAOhB,KAAKmB,WA/JC,8BAqKT,WACN,QAASnB,KAAKyB,OAAwB,gBAAfzB,KAAKgB,QAA4BhB,KAAK0B,QAtK9C,yBAyKT,SAAYA,GAClB,GAAIA,EACF,OAAOC,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,MAAM,SAASF,KA3Kf,oBA+KV,WAAM,WACLG,EAAM7B,KAAK8B,KAAO,IAAM,SAE9B,OACEH,EAAAA,EAAAA,GAACI,EAAAA,EAAI,CAACH,MAAO5B,KAAKgC,sBAChBL,EAAAA,EAAAA,GAAAA,MAAAA,CAAKC,MAAM,cACTD,EAAAA,EAAAA,GAACE,EAAG,CACFI,IAAK,SAACvB,GAAD,OAAS,EAAKE,YAAcF,GACjCkB,MAAO5B,KAAKkC,sBACZJ,KAAM9B,KAAK8B,KACXK,OAAQnC,KAAKmC,OACb9B,SAAUL,KAAKK,SACfJ,KAAMD,KAAKC,KAAI,gBACAD,KAAKoC,mBAEnBpC,KAAKiB,UACJU,EAAAA,EAAAA,GAAAA,MAAAA,CAAKC,MAAM,4BAA2B,YAAW,WAC/CD,EAAAA,EAAAA,GAAAA,sBAAAA,CACEU,OAAQrC,KAAKqC,aAAUC,EACvBC,eAAa,KAKH,SAAfvC,KAAKgB,OAAoBhB,KAAKwC,YAAYxC,KAAK0B,QAE/B,SAAf1B,KAAKgB,OAAoBhB,KAAKyC,YAC9Bd,EAAAA,EAAAA,GAAAA,WAAAA,CACEC,MAAM,OACNc,KAAM1C,KAAKoB,cACXqB,SACiB,SAAfzC,KAAKgB,MAAmB,oBAAsBhB,KAAKyC,WAKzC,SAAfzC,KAAKgB,OAAoBhB,KAAKwC,YAAYxC,KAAK0B,OAE/C1B,KAAKqC,SAAUV,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,MAAM,WAAW5B,KAAKqC,SAG7CrC,KAAK2C,qBAAsBhB,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,MAAM,SAAS5B,KAAKyB,WAxN7C,yB,uBAAA,gC,yCAAA,K,QCrBD,mvoBCAlB,ICQamB,EAAc,W,wDAMgB,Q,YAKT,kB,oBAMQ,EAjBf,kDAmBjB,WAAmB,MACzB,UACEC,QAAQ,IADV,UAEG3B,EAAAA,EAAAA,GAAclB,KAAKU,KAAM,IAF5B,SAGE,iBAAkBV,KAAKuC,eAHzB,IApBuB,oBA2BlB,WACL,IAEMO,EAAuB,UAAd9C,KAAK0C,KADF,GACiC,GAG7CK,EAAc,GAAH,OAJC,GAIsCD,EAL9B,EAKT,MAEjB,OACEnB,EAAAA,EAAAA,GAAAA,MAAAA,CACEC,MAAM,YACNoB,MAAO,CAAEC,MAAO,GAAF,OAAKH,EAAL,MAAiBI,OAAQ,GAAF,OAAKJ,EAAL,SAErCnB,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,MAAM,WAAW5B,KAAKqC,SAE5BV,EAAAA,EAAAA,GAAAA,MAAAA,CAAKwB,QAAQ,YAAYF,MAAM,OAAOC,OAAO,SAC3CvB,EAAAA,EAAAA,GAAAA,SAAAA,CACEC,MAAO5B,KAAKoD,sBACZC,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,KAAK,OAAM,eACGT,EAAW,iBACV,cAlDA,yB,wBAAA,K,QDRD","sources":["../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/button/button.tsx","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/button/button.scss?tag=sdx-button&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/loading-spinner/loading-spinner.scss?tag=sdx-loading-spinner&encapsulation=shadow","../node_modules/@swisscom/sdx/dist/js/webcomponents/esm/webcomponents/components/loading-spinner/loading-spinner.tsx"],"sourcesContent":["import {\n  Component,\n  h,\n  Element,\n  Listen,\n  Prop,\n  Host,\n  Method,\n  Watch,\n} from \"@stencil/core\"\nimport { ButtonType } from \"./types\"\nimport { IconSize } from \"../icon/types\"\nimport { getAppearance } from \"../../core/helpers/webcomponent-helpers\"\nimport { BackgroundTheme, ButtonTheme } from \"../../core/types/types\"\nimport { IconName } from \"../../core/types/icon-names\"\n\n@Component({\n  tag: \"sdx-button\",\n  styleUrl: \"button.scss\",\n  shadow: true,\n})\nexport class Button {\n  private focusableEl?: HTMLElement\n  private lightDOMHiddenSubmitEl?: HTMLInputElement\n\n  @Element() public el!: HTMLSdxButtonElement\n\n  /**\n   * Button theme.\n   */\n  @Prop({ reflect: true }) public theme: ButtonTheme = \"primary\"\n\n  /**\n   * Background theme. Use \"dark\" to make button outlined, whenever it is\n   * used on a coloured or dark background (gradient or image).\n   */\n  @Prop({ reflect: true }) public background: BackgroundTheme = \"light\"\n\n  /**\n   * Disable Button. Better not show the button at all in this case.\n   */\n  @Prop() public disabled: boolean = false\n\n  /**\n   * \"href\" when used as a link looking like a button.\n   */\n  @Prop() public href: string = \"\"\n\n  /**\n   * \"target\" when used as a link looking like a button.\n   */\n  @Prop() public target?: string\n\n  /**\n   * Button text.\n   */\n  @Prop() public label: string = \"\"\n\n  /**\n   * Which icon to display.\n   */\n  @Prop() public iconName?: IconName\n\n  /**\n   * Size of the displayed icon. Can only be modified when theme=\"transparent\".\n   * Font-size will be adjusted automatically.\n   */\n  @Prop() public iconSize: IconSize\n\n  /**\n   * Description text read by the screen reader. Will be appended to the button\n   * content and to the loading spinner when loading=\"true\".\n   */\n  @Prop() public srHint: string = \"\"\n\n  /**\n   * Value for aria-expanded that will be applied to the button element. Used\n   * for buttons that trigger expanding/collapsing such as an accordion,\n   * dropdown menu or tooltip.\n   */\n  @Prop() public ariaExpandedOnButton?: boolean\n\n  /**\n   * Usually a number, to be used to gain the user's attention.\n   * Supported for icon buttons when \"theme\" is \"transparent\".\n   */\n  @Prop() public badge: string = \"\"\n\n  /**\n   * @deprecated because in shadow roots the button will never submit or reset\n   * a form.\n   */\n  @Prop() public type: ButtonType = \"button\"\n\n  /**\n   * Shows a loading spinner and disables the sdx-button.\n   * Don't forget to set srHint accordingly.\n   */\n  @Prop() public loading: boolean = false\n\n  /**\n   * only used for icon-buttons within input fields such as numeric stepper,\n   * search, select, datepicker etc.\n   * @private\n   */\n  @Prop() public valid?: boolean\n\n  @Watch(\"disabled\")\n  public disabledChanged() {\n    if (this.lightDOMHiddenSubmitEl) {\n      this.lightDOMHiddenSubmitEl.disabled = this.disabled\n    }\n  }\n\n  /**\n   * Set focus to element.\n   */\n  @Method()\n  public async doFocus() {\n    this.focusableEl?.focus()\n  }\n\n  @Listen(\"touchstart\")\n  public onTouchStart() {\n    // NOP - make sure touchstart is noticed. touchstart event needed for the animations (note: tracking on prod)\n  }\n\n  @Listen(\"click\")\n  public onClick() {\n    this.lightDOMHiddenSubmitEl?.click()\n  }\n\n  constructor() {\n    if (this.type === \"submit\") {\n      this.lightDOMHiddenSubmitEl = document.createElement(\"input\")\n      this.lightDOMHiddenSubmitEl.type = this.type\n      this.lightDOMHiddenSubmitEl.disabled = this.disabled\n      this.lightDOMHiddenSubmitEl.hidden = true\n      // otherwise consumer will get a second click event\n      this.lightDOMHiddenSubmitEl.onclick = (e) => e.stopPropagation()\n      this.el.append(this.lightDOMHiddenSubmitEl)\n    }\n  }\n\n  private getHostClassNames() {\n    return {\n      [this.theme]: true,\n      disabled: this.disabled,\n      loading: this.loading,\n      [getAppearance(this.el)]: true,\n    }\n  }\n\n  private getButtonClassNames() {\n    const iconSize = this.getIconSize() || 1\n\n    return {\n      clickable: true,\n      \"button-reset\": true,\n      [this.theme]: true,\n      \"no-background\": this.background === \"dark\",\n      disabled: this.disabled,\n      invalid: this.valid === false,\n      h4: iconSize > 4, // icons with size 5+ have a larger font-size\n    }\n  }\n\n  private getAriaExpanded() {\n    if (this.ariaExpandedOnButton === true) {\n      return \"true\"\n    } else if (this.ariaExpandedOnButton === false) {\n      return \"false\"\n    } else {\n      return\n    }\n  }\n\n  // Make sure that only theme=\"transparent\" allows other sizes\n  private getIconSize(): IconSize | undefined {\n    if (this.theme === \"transparent\") {\n      return this.iconSize\n    }\n\n    return\n  }\n\n  private isBadgeDisplayed(): boolean {\n    return !!this.badge && this.theme === \"transparent\" && !this.label\n  }\n\n  private createLabel(label: string) {\n    if (label) {\n      return <span class=\"label\">{label}</span>\n    }\n  }\n\n  public render() {\n    const Tag = this.href ? \"a\" : \"button\"\n\n    return (\n      <Host class={this.getHostClassNames()}>\n        <div class=\"component\">\n          <Tag\n            ref={(el) => (this.focusableEl = el)}\n            class={this.getButtonClassNames()}\n            href={this.href}\n            target={this.target}\n            disabled={this.disabled}\n            type={this.type}\n            aria-expanded={this.getAriaExpanded()}\n          >\n            {this.loading && (\n              <div class=\"loading-spinner-container\" aria-live=\"polite\">\n                <sdx-loading-spinner\n                  srHint={this.srHint || undefined}\n                  strokeInherit\n                />\n              </div>\n            )}\n\n            {this.theme === \"chip\" && this.createLabel(this.label)}\n\n            {(this.theme === \"chip\" || this.iconName) && (\n              <sdx-icon\n                class=\"icon\"\n                size={this.getIconSize()}\n                iconName={\n                  this.theme === \"chip\" ? \"icon-clear-circle\" : this.iconName\n                }\n              />\n            )}\n\n            {this.theme !== \"chip\" && this.createLabel(this.label)}\n\n            {this.srHint && <span class=\"sr-only\">{this.srHint}</span>}\n          </Tag>\n\n          {this.isBadgeDisplayed() && <span class=\"badge\">{this.badge}</span>}\n        </div>\n      </Host>\n    )\n  }\n}\n","@import \"stylesheets/sdx/utilities/screenreaders\";\n@import \"../../globals/scss/button\";\n\n:host {\n  display: inline-block;\n  outline: none;\n  width: auto;\n  min-width: $button-min-width;\n}\n\n:host(.chip) {\n  min-width: 48px; // for touch devices\n  cursor: pointer;\n\n  .component {\n    height: $button-height; // chip is visually smaller but component should not be\n  }\n}\n\n// Style using :host because the buttons width is determined by the\n// sdx-buttons width and its content takes in all available space.\n:host(.transparent) {\n  min-width: 0;\n  color: $color-int-blue; // possibility to overwrite, e.g. for sdx-header\n}\n\n:host(.disabled),\n:host(.loading) {\n  pointer-events: none; // needed because the onClick event is on the host element\n\n  .component {\n    @include disabled; // needed to disable transform\n  }\n}\n\n:host(.loading) {\n  .icon,\n  .label {\n    visibility: hidden;\n  }\n}\n\n.component {\n  @include badge-top-right;\n\n  display: flex;\n  align-items: center;\n  justify-content: center; // in case chip has no label\n\n  .clickable {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    .icon + .label {\n      // space between icon and label\n      margin-left: $baseline;\n    }\n  }\n\n  &:active button.chip {\n    @extend :active;\n  }\n\n  &:hover button.chip {\n    @extend :hover;\n  }\n}\n\n.primary,\n.secondary,\n.confirm,\n.cancel,\n.chip {\n  width: 100%;\n  height: $button-height;\n  padding: 0 $button-padding-horizontal - $button-border-width;\n  border: $button-border-width solid $color-button-primary;\n  border-radius: $border-radius-medium;\n  transform-origin: 50% 50%;\n\n  &:active {\n    transform: scale(0.98);\n  }\n}\n\n.primary {\n  border-color: $color-button-primary;\n  background-color: $color-button-primary;\n  color: $color-white;\n\n  @include focus-active-hover {\n    border-color: $color-button-primary--active;\n    background-color: $color-button-primary--active;\n  }\n\n  &.disabled {\n    border-color: transparent;\n    background-color: rgba($color-button-primary, 0.4);\n    color: rgba($color-white, 0.6);\n  }\n}\n\n.secondary {\n  border-color: $color-int-blue;\n  background-color: $color-button-secondary;\n  color: $color-int-blue;\n\n  @include focus-active-hover {\n    border-color: $color-int-blue--active;\n    background-color: $color-button-secondary--active;\n    color: $color-int-blue--active;\n  }\n\n  &.disabled {\n    border-color: rgba($color-int-blue, 0.4);\n    background-color: rgba($color-button-secondary, 0.4);\n    color: rgba($color-int-blue, 0.4);\n  }\n}\n\n.confirm {\n  border-color: $color-button-confirm;\n  background-color: $color-button-confirm;\n  color: $color-white;\n\n  @include focus-active-hover {\n    border-color: $color-button-confirm--active;\n    background-color: $color-button-confirm--active;\n  }\n\n  &.disabled {\n    border-color: transparent;\n    background-color: rgba($color-button-confirm, 0.4);\n  }\n}\n\n.transparent {\n  padding: 0;\n  margin: 0; // normalize Safari\n  border: none; // normalize Safari\n  outline: none;\n  user-select: none;\n  background-color: transparent;\n  color: inherit;\n\n  &.invalid {\n    color: $color-input-invalid-form;\n  }\n\n  @include focus-active-hover {\n    color: $color-int-blue--active;\n\n    &.invalid {\n      color: $color-input-invalid-form-hover;\n    }\n  }\n\n  &.disabled,\n  &.disabled.invalid {\n    color: rgba($color-gray, 0.4);\n  }\n}\n\n.cancel {\n  border-color: transparent;\n  background-color: transparent;\n  color: $color-int-blue;\n\n  @include focus-active-hover {\n    border-color: $color-blue-tint-3;\n    background-color: $color-blue-tint-3;\n    color: $color-int-blue--active;\n  }\n}\n\n.chip {\n  font-weight: $font-weight-semi-light;\n  font-size: 16px;\n  border-color: $color-aluminum;\n  background-color: $color-aluminum;\n  width: auto;\n  height: $baseline-4;\n  padding: $baseline + 2px;\n\n  @include focus-active-hover {\n    border-color: $color-int-gray--active;\n    background-color: $color-int-gray--active;\n  }\n\n  .label ~ .icon {\n    // space between label and icon\n    margin-left: $baseline;\n  }\n}\n\n// Center spinner\n.loading-spinner-container {\n  position: absolute;\n  left: 0;\n  right: 0;\n  display: flex;\n  justify-content: center;\n}\n\n.h4 {\n  @include typo-headline-4;\n}\n\n// Used on colored backgrounds\n:host(.sdx--dark-theme),\n:host(.sdx--light-theme) {\n  .primary,\n  .secondary,\n  .confirm,\n  .transparent {\n    // No extra styling for .invalid\n    &.no-background,\n    &.no-background.invalid {\n      border-color: $color-white;\n      background-color: transparent;\n      color: $color-white;\n\n      @include focus-active-hover {\n        background-color: rgba($color-white, 0.15);\n      }\n\n      &.disabled {\n        border-color: rgba($color-white, 0.4);\n        color: rgba($color-white, 0.4);\n      }\n\n      &.invalid {\n        @include focus-active-hover {\n          color: rgba($color-white, 0.8);\n        }\n      }\n    }\n  }\n}\n\n:host(.sdx--dark-theme) {\n  .component {\n    .badge {\n      background-color: $color-int-orange-dark-theme;\n      &:hover {\n        background-color: $color-int-orange-dark-theme--active;\n      }\n    }\n  }\n\n  .primary {\n    border-color: $color-int-blue-dark-theme;\n    background-color: $color-int-blue-dark-theme;\n\n    @include focus-active-hover {\n      border-color: $color-int-blue-dark-theme--active;\n      background-color: $color-int-blue-dark-theme--active;\n    }\n\n    &.disabled {\n      background-color: rgba($color-int-blue-dark-theme, 0.4);\n      border-color: transparent;\n    }\n  }\n\n  .secondary {\n    border-color: $color-int-blue2-dark-theme;\n    background-color: transparent;\n    color: $color-int-blue2-dark-theme;\n\n    @include focus-active-hover {\n      border-color: $color-int-blue2-dark-theme--active;\n      background-color: rgba($color-int-blue2-dark-theme, 0.15);\n      color: $color-int-blue2-dark-theme--active;\n    }\n\n    &.disabled {\n      border-color: rgba($color-int-blue2-dark-theme, 0.4);\n      color: rgba($color-int-blue2-dark-theme, 0.4);\n    }\n  }\n\n  .confirm {\n    border-color: $color-int-green-dark-theme;\n    background-color: $color-int-green-dark-theme;\n\n    @include focus-active-hover {\n      border-color: $color-int-green-dark-theme--active;\n      background-color: $color-int-green-dark-theme--active;\n    }\n\n    &.disabled {\n      background-color: rgba($color-int-green-dark-theme, 0.4);\n      border-color: transparent;\n    }\n  }\n\n  .transparent {\n    &.invalid {\n      color: $color-invalid-dark-theme;\n    }\n\n    @include focus-active-hover {\n      color: $color-int-blue2-dark-theme--active;\n\n      &.invalid {\n        color: $color-invalid-dark-theme--active;\n      }\n    }\n\n    &.disabled,\n    &.disabled.invalid {\n      color: rgba($color-disabled-dark-theme, 0.8);\n    }\n  }\n\n  .cancel {\n    color: $color-int-blue2-dark-theme;\n\n    @include focus-active-hover {\n      border-color: transparent;\n      background-color: rgba($color-int-blue2-dark-theme, 0.15);\n      color: $color-int-blue2-dark-theme--active;\n    }\n  }\n\n  .chip {\n    border-color: $color-gray-tint-8-dark-theme;\n    background-color: $color-gray-tint-8-dark-theme;\n\n    @include focus-active-hover {\n      border-color: $color-gray-tint-6-dark-theme;\n      background-color: $color-gray-tint-6-dark-theme;\n    }\n  }\n}\n\n// Style using :host because the buttons width is determined by the\n// sdx-buttons width and its content takes in all available space.\n:host(.transparent.sdx--dark-theme) {\n  color: $color-int-blue2-dark-theme; // possibility to overwrite, e.g. for sdx-header\n}\n","@import \"stylesheets/sdx/utilities/screenreaders\";\n\n@keyframes rotate {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes dash {\n  0% {\n    stroke-dasharray: 1, 150;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 90, 150;\n    stroke-dashoffset: -35;\n  }\n  100% {\n    stroke-dasharray: 90, 150;\n    stroke-dashoffset: -124;\n  }\n}\n\n.component {\n  svg {\n    animation: rotate 2s linear infinite;\n  }\n}\n\n.circle {\n  animation: dash 1.5s ease-in-out infinite;\n  // stroke default color\n  stroke: $color-navy;\n}\n\n.stroke-inherit {\n  // overwrites the default\n  stroke: currentColor;\n}\n\n.circle.sdx--dark-theme {\n  stroke: $color-gray-dark-theme;\n}\n.stroke-inherit.sdx--dark-theme {\n  stroke: currentColor;\n}\n","import { Component, h, Element, Prop } from \"@stencil/core\"\nimport { getAppearance } from \"../../core/helpers/webcomponent-helpers\"\n\n@Component({\n  tag: \"sdx-loading-spinner\",\n  styleUrl: \"loading-spinner.scss\",\n  shadow: true,\n})\nexport class LoadingSpinner {\n  @Element() public el!: HTMLSdxLoadingSpinnerElement\n\n  /**\n   * Dimension of the spinner.\n   */\n  @Prop() public size: \"small\" | \"large\" = \"small\"\n\n  /**\n   * Description text read by the screen reader.\n   */\n  @Prop() public srHint: string = \"status: loading\"\n\n  /**\n   * Inherit the color.\n   * @private\n   */\n  @Prop() public strokeInherit: boolean = false\n\n  private getCircleClassNames() {\n    return {\n      circle: true,\n      [getAppearance(this.el)]: true,\n      \"stroke-inherit\": this.strokeInherit,\n    }\n  }\n\n  public render() {\n    const circleBorderWidth = 7\n    const baseWidth = 27\n    const sizePx = this.size === \"small\" ? baseWidth : 52\n    // The strokeWidth is just 7px if the default size is set.\n    // Otherwise we need to adjust the width as it grows with the circle width.\n    const strokeWidth = `${circleBorderWidth * (baseWidth / sizePx)}px`\n\n    return (\n      <div\n        class=\"component\"\n        style={{ width: `${sizePx}px`, height: `${sizePx}px` }}\n      >\n        <span class=\"sr-only\">{this.srHint}</span>\n\n        <svg viewBox=\"0 0 50 50\" width=\"100%\" height=\"100%\">\n          <circle\n            class={this.getCircleClassNames()}\n            cx=\"25\"\n            cy=\"25\"\n            r=\"20\"\n            fill=\"none\"\n            stroke-width={strokeWidth}\n            stroke-linecap=\"round\"\n          />\n        </svg>\n      </div>\n    )\n  }\n}\n"],"names":["Button","this","type","lightDOMHiddenSubmitEl","document","createElement","disabled","hidden","onclick","e","stopPropagation","el","append","focusableEl","_a","focus","click","theme","loading","getAppearance","iconSize","getIconSize","clickable","background","valid","ariaExpandedOnButton","badge","label","h","class","Tag","href","Host","getHostClassNames","ref","getButtonClassNames","target","getAriaExpanded","srHint","undefined","strokeInherit","createLabel","iconName","size","isBadgeDisplayed","LoadingSpinner","circle","sizePx","strokeWidth","style","width","height","viewBox","getCircleClassNames","cx","cy","r","fill"],"sourceRoot":""}